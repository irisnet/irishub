// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package htlc

import (
	v1beta1 "cosmossdk.io/api/cosmos/base/v1beta1"
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	io "io"
	reflect "reflect"
	sync "sync"
)

var _ protoreflect.List = (*_HTLC_6_list)(nil)

type _HTLC_6_list struct {
	list *[]*v1beta1.Coin
}

func (x *_HTLC_6_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_HTLC_6_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_HTLC_6_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	(*x.list)[i] = concreteValue
}

func (x *_HTLC_6_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	*x.list = append(*x.list, concreteValue)
}

func (x *_HTLC_6_list) AppendMutable() protoreflect.Value {
	v := new(v1beta1.Coin)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_HTLC_6_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_HTLC_6_list) NewElement() protoreflect.Value {
	v := new(v1beta1.Coin)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_HTLC_6_list) IsValid() bool {
	return x.list != nil
}

var (
	md_HTLC                         protoreflect.MessageDescriptor
	fd_HTLC_id                      protoreflect.FieldDescriptor
	fd_HTLC_sender                  protoreflect.FieldDescriptor
	fd_HTLC_to                      protoreflect.FieldDescriptor
	fd_HTLC_receiver_on_other_chain protoreflect.FieldDescriptor
	fd_HTLC_sender_on_other_chain   protoreflect.FieldDescriptor
	fd_HTLC_amount                  protoreflect.FieldDescriptor
	fd_HTLC_hash_lock               protoreflect.FieldDescriptor
	fd_HTLC_secret                  protoreflect.FieldDescriptor
	fd_HTLC_timestamp               protoreflect.FieldDescriptor
	fd_HTLC_expiration_height       protoreflect.FieldDescriptor
	fd_HTLC_state                   protoreflect.FieldDescriptor
	fd_HTLC_closed_block            protoreflect.FieldDescriptor
	fd_HTLC_transfer                protoreflect.FieldDescriptor
	fd_HTLC_direction               protoreflect.FieldDescriptor
)

func init() {
	file_irismod_htlc_htlc_proto_init()
	md_HTLC = File_irismod_htlc_htlc_proto.Messages().ByName("HTLC")
	fd_HTLC_id = md_HTLC.Fields().ByName("id")
	fd_HTLC_sender = md_HTLC.Fields().ByName("sender")
	fd_HTLC_to = md_HTLC.Fields().ByName("to")
	fd_HTLC_receiver_on_other_chain = md_HTLC.Fields().ByName("receiver_on_other_chain")
	fd_HTLC_sender_on_other_chain = md_HTLC.Fields().ByName("sender_on_other_chain")
	fd_HTLC_amount = md_HTLC.Fields().ByName("amount")
	fd_HTLC_hash_lock = md_HTLC.Fields().ByName("hash_lock")
	fd_HTLC_secret = md_HTLC.Fields().ByName("secret")
	fd_HTLC_timestamp = md_HTLC.Fields().ByName("timestamp")
	fd_HTLC_expiration_height = md_HTLC.Fields().ByName("expiration_height")
	fd_HTLC_state = md_HTLC.Fields().ByName("state")
	fd_HTLC_closed_block = md_HTLC.Fields().ByName("closed_block")
	fd_HTLC_transfer = md_HTLC.Fields().ByName("transfer")
	fd_HTLC_direction = md_HTLC.Fields().ByName("direction")
}

var _ protoreflect.Message = (*fastReflection_HTLC)(nil)

type fastReflection_HTLC HTLC

func (x *HTLC) ProtoReflect() protoreflect.Message {
	return (*fastReflection_HTLC)(x)
}

func (x *HTLC) slowProtoReflect() protoreflect.Message {
	mi := &file_irismod_htlc_htlc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_HTLC_messageType fastReflection_HTLC_messageType
var _ protoreflect.MessageType = fastReflection_HTLC_messageType{}

type fastReflection_HTLC_messageType struct{}

func (x fastReflection_HTLC_messageType) Zero() protoreflect.Message {
	return (*fastReflection_HTLC)(nil)
}
func (x fastReflection_HTLC_messageType) New() protoreflect.Message {
	return new(fastReflection_HTLC)
}
func (x fastReflection_HTLC_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_HTLC
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_HTLC) Descriptor() protoreflect.MessageDescriptor {
	return md_HTLC
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_HTLC) Type() protoreflect.MessageType {
	return _fastReflection_HTLC_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_HTLC) New() protoreflect.Message {
	return new(fastReflection_HTLC)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_HTLC) Interface() protoreflect.ProtoMessage {
	return (*HTLC)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_HTLC) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Id != "" {
		value := protoreflect.ValueOfString(x.Id)
		if !f(fd_HTLC_id, value) {
			return
		}
	}
	if x.Sender != "" {
		value := protoreflect.ValueOfString(x.Sender)
		if !f(fd_HTLC_sender, value) {
			return
		}
	}
	if x.To != "" {
		value := protoreflect.ValueOfString(x.To)
		if !f(fd_HTLC_to, value) {
			return
		}
	}
	if x.ReceiverOnOtherChain != "" {
		value := protoreflect.ValueOfString(x.ReceiverOnOtherChain)
		if !f(fd_HTLC_receiver_on_other_chain, value) {
			return
		}
	}
	if x.SenderOnOtherChain != "" {
		value := protoreflect.ValueOfString(x.SenderOnOtherChain)
		if !f(fd_HTLC_sender_on_other_chain, value) {
			return
		}
	}
	if len(x.Amount) != 0 {
		value := protoreflect.ValueOfList(&_HTLC_6_list{list: &x.Amount})
		if !f(fd_HTLC_amount, value) {
			return
		}
	}
	if x.HashLock != "" {
		value := protoreflect.ValueOfString(x.HashLock)
		if !f(fd_HTLC_hash_lock, value) {
			return
		}
	}
	if x.Secret != "" {
		value := protoreflect.ValueOfString(x.Secret)
		if !f(fd_HTLC_secret, value) {
			return
		}
	}
	if x.Timestamp != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Timestamp)
		if !f(fd_HTLC_timestamp, value) {
			return
		}
	}
	if x.ExpirationHeight != uint64(0) {
		value := protoreflect.ValueOfUint64(x.ExpirationHeight)
		if !f(fd_HTLC_expiration_height, value) {
			return
		}
	}
	if x.State != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.State))
		if !f(fd_HTLC_state, value) {
			return
		}
	}
	if x.ClosedBlock != uint64(0) {
		value := protoreflect.ValueOfUint64(x.ClosedBlock)
		if !f(fd_HTLC_closed_block, value) {
			return
		}
	}
	if x.Transfer != false {
		value := protoreflect.ValueOfBool(x.Transfer)
		if !f(fd_HTLC_transfer, value) {
			return
		}
	}
	if x.Direction != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Direction))
		if !f(fd_HTLC_direction, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_HTLC) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "irismod.htlc.HTLC.id":
		return x.Id != ""
	case "irismod.htlc.HTLC.sender":
		return x.Sender != ""
	case "irismod.htlc.HTLC.to":
		return x.To != ""
	case "irismod.htlc.HTLC.receiver_on_other_chain":
		return x.ReceiverOnOtherChain != ""
	case "irismod.htlc.HTLC.sender_on_other_chain":
		return x.SenderOnOtherChain != ""
	case "irismod.htlc.HTLC.amount":
		return len(x.Amount) != 0
	case "irismod.htlc.HTLC.hash_lock":
		return x.HashLock != ""
	case "irismod.htlc.HTLC.secret":
		return x.Secret != ""
	case "irismod.htlc.HTLC.timestamp":
		return x.Timestamp != uint64(0)
	case "irismod.htlc.HTLC.expiration_height":
		return x.ExpirationHeight != uint64(0)
	case "irismod.htlc.HTLC.state":
		return x.State != 0
	case "irismod.htlc.HTLC.closed_block":
		return x.ClosedBlock != uint64(0)
	case "irismod.htlc.HTLC.transfer":
		return x.Transfer != false
	case "irismod.htlc.HTLC.direction":
		return x.Direction != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: irismod.htlc.HTLC"))
		}
		panic(fmt.Errorf("message irismod.htlc.HTLC does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_HTLC) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "irismod.htlc.HTLC.id":
		x.Id = ""
	case "irismod.htlc.HTLC.sender":
		x.Sender = ""
	case "irismod.htlc.HTLC.to":
		x.To = ""
	case "irismod.htlc.HTLC.receiver_on_other_chain":
		x.ReceiverOnOtherChain = ""
	case "irismod.htlc.HTLC.sender_on_other_chain":
		x.SenderOnOtherChain = ""
	case "irismod.htlc.HTLC.amount":
		x.Amount = nil
	case "irismod.htlc.HTLC.hash_lock":
		x.HashLock = ""
	case "irismod.htlc.HTLC.secret":
		x.Secret = ""
	case "irismod.htlc.HTLC.timestamp":
		x.Timestamp = uint64(0)
	case "irismod.htlc.HTLC.expiration_height":
		x.ExpirationHeight = uint64(0)
	case "irismod.htlc.HTLC.state":
		x.State = 0
	case "irismod.htlc.HTLC.closed_block":
		x.ClosedBlock = uint64(0)
	case "irismod.htlc.HTLC.transfer":
		x.Transfer = false
	case "irismod.htlc.HTLC.direction":
		x.Direction = 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: irismod.htlc.HTLC"))
		}
		panic(fmt.Errorf("message irismod.htlc.HTLC does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_HTLC) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "irismod.htlc.HTLC.id":
		value := x.Id
		return protoreflect.ValueOfString(value)
	case "irismod.htlc.HTLC.sender":
		value := x.Sender
		return protoreflect.ValueOfString(value)
	case "irismod.htlc.HTLC.to":
		value := x.To
		return protoreflect.ValueOfString(value)
	case "irismod.htlc.HTLC.receiver_on_other_chain":
		value := x.ReceiverOnOtherChain
		return protoreflect.ValueOfString(value)
	case "irismod.htlc.HTLC.sender_on_other_chain":
		value := x.SenderOnOtherChain
		return protoreflect.ValueOfString(value)
	case "irismod.htlc.HTLC.amount":
		if len(x.Amount) == 0 {
			return protoreflect.ValueOfList(&_HTLC_6_list{})
		}
		listValue := &_HTLC_6_list{list: &x.Amount}
		return protoreflect.ValueOfList(listValue)
	case "irismod.htlc.HTLC.hash_lock":
		value := x.HashLock
		return protoreflect.ValueOfString(value)
	case "irismod.htlc.HTLC.secret":
		value := x.Secret
		return protoreflect.ValueOfString(value)
	case "irismod.htlc.HTLC.timestamp":
		value := x.Timestamp
		return protoreflect.ValueOfUint64(value)
	case "irismod.htlc.HTLC.expiration_height":
		value := x.ExpirationHeight
		return protoreflect.ValueOfUint64(value)
	case "irismod.htlc.HTLC.state":
		value := x.State
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "irismod.htlc.HTLC.closed_block":
		value := x.ClosedBlock
		return protoreflect.ValueOfUint64(value)
	case "irismod.htlc.HTLC.transfer":
		value := x.Transfer
		return protoreflect.ValueOfBool(value)
	case "irismod.htlc.HTLC.direction":
		value := x.Direction
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: irismod.htlc.HTLC"))
		}
		panic(fmt.Errorf("message irismod.htlc.HTLC does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_HTLC) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "irismod.htlc.HTLC.id":
		x.Id = value.Interface().(string)
	case "irismod.htlc.HTLC.sender":
		x.Sender = value.Interface().(string)
	case "irismod.htlc.HTLC.to":
		x.To = value.Interface().(string)
	case "irismod.htlc.HTLC.receiver_on_other_chain":
		x.ReceiverOnOtherChain = value.Interface().(string)
	case "irismod.htlc.HTLC.sender_on_other_chain":
		x.SenderOnOtherChain = value.Interface().(string)
	case "irismod.htlc.HTLC.amount":
		lv := value.List()
		clv := lv.(*_HTLC_6_list)
		x.Amount = *clv.list
	case "irismod.htlc.HTLC.hash_lock":
		x.HashLock = value.Interface().(string)
	case "irismod.htlc.HTLC.secret":
		x.Secret = value.Interface().(string)
	case "irismod.htlc.HTLC.timestamp":
		x.Timestamp = value.Uint()
	case "irismod.htlc.HTLC.expiration_height":
		x.ExpirationHeight = value.Uint()
	case "irismod.htlc.HTLC.state":
		x.State = (HTLCState)(value.Enum())
	case "irismod.htlc.HTLC.closed_block":
		x.ClosedBlock = value.Uint()
	case "irismod.htlc.HTLC.transfer":
		x.Transfer = value.Bool()
	case "irismod.htlc.HTLC.direction":
		x.Direction = (SwapDirection)(value.Enum())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: irismod.htlc.HTLC"))
		}
		panic(fmt.Errorf("message irismod.htlc.HTLC does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_HTLC) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "irismod.htlc.HTLC.amount":
		if x.Amount == nil {
			x.Amount = []*v1beta1.Coin{}
		}
		value := &_HTLC_6_list{list: &x.Amount}
		return protoreflect.ValueOfList(value)
	case "irismod.htlc.HTLC.id":
		panic(fmt.Errorf("field id of message irismod.htlc.HTLC is not mutable"))
	case "irismod.htlc.HTLC.sender":
		panic(fmt.Errorf("field sender of message irismod.htlc.HTLC is not mutable"))
	case "irismod.htlc.HTLC.to":
		panic(fmt.Errorf("field to of message irismod.htlc.HTLC is not mutable"))
	case "irismod.htlc.HTLC.receiver_on_other_chain":
		panic(fmt.Errorf("field receiver_on_other_chain of message irismod.htlc.HTLC is not mutable"))
	case "irismod.htlc.HTLC.sender_on_other_chain":
		panic(fmt.Errorf("field sender_on_other_chain of message irismod.htlc.HTLC is not mutable"))
	case "irismod.htlc.HTLC.hash_lock":
		panic(fmt.Errorf("field hash_lock of message irismod.htlc.HTLC is not mutable"))
	case "irismod.htlc.HTLC.secret":
		panic(fmt.Errorf("field secret of message irismod.htlc.HTLC is not mutable"))
	case "irismod.htlc.HTLC.timestamp":
		panic(fmt.Errorf("field timestamp of message irismod.htlc.HTLC is not mutable"))
	case "irismod.htlc.HTLC.expiration_height":
		panic(fmt.Errorf("field expiration_height of message irismod.htlc.HTLC is not mutable"))
	case "irismod.htlc.HTLC.state":
		panic(fmt.Errorf("field state of message irismod.htlc.HTLC is not mutable"))
	case "irismod.htlc.HTLC.closed_block":
		panic(fmt.Errorf("field closed_block of message irismod.htlc.HTLC is not mutable"))
	case "irismod.htlc.HTLC.transfer":
		panic(fmt.Errorf("field transfer of message irismod.htlc.HTLC is not mutable"))
	case "irismod.htlc.HTLC.direction":
		panic(fmt.Errorf("field direction of message irismod.htlc.HTLC is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: irismod.htlc.HTLC"))
		}
		panic(fmt.Errorf("message irismod.htlc.HTLC does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_HTLC) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "irismod.htlc.HTLC.id":
		return protoreflect.ValueOfString("")
	case "irismod.htlc.HTLC.sender":
		return protoreflect.ValueOfString("")
	case "irismod.htlc.HTLC.to":
		return protoreflect.ValueOfString("")
	case "irismod.htlc.HTLC.receiver_on_other_chain":
		return protoreflect.ValueOfString("")
	case "irismod.htlc.HTLC.sender_on_other_chain":
		return protoreflect.ValueOfString("")
	case "irismod.htlc.HTLC.amount":
		list := []*v1beta1.Coin{}
		return protoreflect.ValueOfList(&_HTLC_6_list{list: &list})
	case "irismod.htlc.HTLC.hash_lock":
		return protoreflect.ValueOfString("")
	case "irismod.htlc.HTLC.secret":
		return protoreflect.ValueOfString("")
	case "irismod.htlc.HTLC.timestamp":
		return protoreflect.ValueOfUint64(uint64(0))
	case "irismod.htlc.HTLC.expiration_height":
		return protoreflect.ValueOfUint64(uint64(0))
	case "irismod.htlc.HTLC.state":
		return protoreflect.ValueOfEnum(0)
	case "irismod.htlc.HTLC.closed_block":
		return protoreflect.ValueOfUint64(uint64(0))
	case "irismod.htlc.HTLC.transfer":
		return protoreflect.ValueOfBool(false)
	case "irismod.htlc.HTLC.direction":
		return protoreflect.ValueOfEnum(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: irismod.htlc.HTLC"))
		}
		panic(fmt.Errorf("message irismod.htlc.HTLC does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_HTLC) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in irismod.htlc.HTLC", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_HTLC) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_HTLC) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_HTLC) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_HTLC) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*HTLC)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Id)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Sender)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.To)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ReceiverOnOtherChain)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.SenderOnOtherChain)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.Amount) > 0 {
			for _, e := range x.Amount {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		l = len(x.HashLock)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Secret)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Timestamp != 0 {
			n += 1 + runtime.Sov(uint64(x.Timestamp))
		}
		if x.ExpirationHeight != 0 {
			n += 1 + runtime.Sov(uint64(x.ExpirationHeight))
		}
		if x.State != 0 {
			n += 1 + runtime.Sov(uint64(x.State))
		}
		if x.ClosedBlock != 0 {
			n += 1 + runtime.Sov(uint64(x.ClosedBlock))
		}
		if x.Transfer {
			n += 2
		}
		if x.Direction != 0 {
			n += 1 + runtime.Sov(uint64(x.Direction))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*HTLC)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Direction != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Direction))
			i--
			dAtA[i] = 0x70
		}
		if x.Transfer {
			i--
			if x.Transfer {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x68
		}
		if x.ClosedBlock != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ClosedBlock))
			i--
			dAtA[i] = 0x60
		}
		if x.State != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.State))
			i--
			dAtA[i] = 0x58
		}
		if x.ExpirationHeight != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ExpirationHeight))
			i--
			dAtA[i] = 0x50
		}
		if x.Timestamp != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Timestamp))
			i--
			dAtA[i] = 0x48
		}
		if len(x.Secret) > 0 {
			i -= len(x.Secret)
			copy(dAtA[i:], x.Secret)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Secret)))
			i--
			dAtA[i] = 0x42
		}
		if len(x.HashLock) > 0 {
			i -= len(x.HashLock)
			copy(dAtA[i:], x.HashLock)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.HashLock)))
			i--
			dAtA[i] = 0x3a
		}
		if len(x.Amount) > 0 {
			for iNdEx := len(x.Amount) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Amount[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x32
			}
		}
		if len(x.SenderOnOtherChain) > 0 {
			i -= len(x.SenderOnOtherChain)
			copy(dAtA[i:], x.SenderOnOtherChain)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SenderOnOtherChain)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.ReceiverOnOtherChain) > 0 {
			i -= len(x.ReceiverOnOtherChain)
			copy(dAtA[i:], x.ReceiverOnOtherChain)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ReceiverOnOtherChain)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.To) > 0 {
			i -= len(x.To)
			copy(dAtA[i:], x.To)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.To)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.Sender) > 0 {
			i -= len(x.Sender)
			copy(dAtA[i:], x.Sender)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Sender)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Id) > 0 {
			i -= len(x.Id)
			copy(dAtA[i:], x.Id)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Id)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*HTLC)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: HTLC: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: HTLC: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Id = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Sender = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.To = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ReceiverOnOtherChain", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ReceiverOnOtherChain = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SenderOnOtherChain", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SenderOnOtherChain = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Amount = append(x.Amount, &v1beta1.Coin{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Amount[len(x.Amount)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field HashLock", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.HashLock = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Secret", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Secret = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 9:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
				}
				x.Timestamp = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Timestamp |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 10:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ExpirationHeight", wireType)
				}
				x.ExpirationHeight = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ExpirationHeight |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 11:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
				}
				x.State = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.State |= HTLCState(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 12:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ClosedBlock", wireType)
				}
				x.ClosedBlock = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ClosedBlock |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 13:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Transfer", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.Transfer = bool(v != 0)
			case 14:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Direction", wireType)
				}
				x.Direction = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Direction |= SwapDirection(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_AssetSupply                             protoreflect.MessageDescriptor
	fd_AssetSupply_incoming_supply             protoreflect.FieldDescriptor
	fd_AssetSupply_outgoing_supply             protoreflect.FieldDescriptor
	fd_AssetSupply_current_supply              protoreflect.FieldDescriptor
	fd_AssetSupply_time_limited_current_supply protoreflect.FieldDescriptor
	fd_AssetSupply_time_elapsed                protoreflect.FieldDescriptor
)

func init() {
	file_irismod_htlc_htlc_proto_init()
	md_AssetSupply = File_irismod_htlc_htlc_proto.Messages().ByName("AssetSupply")
	fd_AssetSupply_incoming_supply = md_AssetSupply.Fields().ByName("incoming_supply")
	fd_AssetSupply_outgoing_supply = md_AssetSupply.Fields().ByName("outgoing_supply")
	fd_AssetSupply_current_supply = md_AssetSupply.Fields().ByName("current_supply")
	fd_AssetSupply_time_limited_current_supply = md_AssetSupply.Fields().ByName("time_limited_current_supply")
	fd_AssetSupply_time_elapsed = md_AssetSupply.Fields().ByName("time_elapsed")
}

var _ protoreflect.Message = (*fastReflection_AssetSupply)(nil)

type fastReflection_AssetSupply AssetSupply

func (x *AssetSupply) ProtoReflect() protoreflect.Message {
	return (*fastReflection_AssetSupply)(x)
}

func (x *AssetSupply) slowProtoReflect() protoreflect.Message {
	mi := &file_irismod_htlc_htlc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_AssetSupply_messageType fastReflection_AssetSupply_messageType
var _ protoreflect.MessageType = fastReflection_AssetSupply_messageType{}

type fastReflection_AssetSupply_messageType struct{}

func (x fastReflection_AssetSupply_messageType) Zero() protoreflect.Message {
	return (*fastReflection_AssetSupply)(nil)
}
func (x fastReflection_AssetSupply_messageType) New() protoreflect.Message {
	return new(fastReflection_AssetSupply)
}
func (x fastReflection_AssetSupply_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_AssetSupply
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_AssetSupply) Descriptor() protoreflect.MessageDescriptor {
	return md_AssetSupply
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_AssetSupply) Type() protoreflect.MessageType {
	return _fastReflection_AssetSupply_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_AssetSupply) New() protoreflect.Message {
	return new(fastReflection_AssetSupply)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_AssetSupply) Interface() protoreflect.ProtoMessage {
	return (*AssetSupply)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_AssetSupply) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.IncomingSupply != nil {
		value := protoreflect.ValueOfMessage(x.IncomingSupply.ProtoReflect())
		if !f(fd_AssetSupply_incoming_supply, value) {
			return
		}
	}
	if x.OutgoingSupply != nil {
		value := protoreflect.ValueOfMessage(x.OutgoingSupply.ProtoReflect())
		if !f(fd_AssetSupply_outgoing_supply, value) {
			return
		}
	}
	if x.CurrentSupply != nil {
		value := protoreflect.ValueOfMessage(x.CurrentSupply.ProtoReflect())
		if !f(fd_AssetSupply_current_supply, value) {
			return
		}
	}
	if x.TimeLimitedCurrentSupply != nil {
		value := protoreflect.ValueOfMessage(x.TimeLimitedCurrentSupply.ProtoReflect())
		if !f(fd_AssetSupply_time_limited_current_supply, value) {
			return
		}
	}
	if x.TimeElapsed != nil {
		value := protoreflect.ValueOfMessage(x.TimeElapsed.ProtoReflect())
		if !f(fd_AssetSupply_time_elapsed, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_AssetSupply) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "irismod.htlc.AssetSupply.incoming_supply":
		return x.IncomingSupply != nil
	case "irismod.htlc.AssetSupply.outgoing_supply":
		return x.OutgoingSupply != nil
	case "irismod.htlc.AssetSupply.current_supply":
		return x.CurrentSupply != nil
	case "irismod.htlc.AssetSupply.time_limited_current_supply":
		return x.TimeLimitedCurrentSupply != nil
	case "irismod.htlc.AssetSupply.time_elapsed":
		return x.TimeElapsed != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: irismod.htlc.AssetSupply"))
		}
		panic(fmt.Errorf("message irismod.htlc.AssetSupply does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AssetSupply) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "irismod.htlc.AssetSupply.incoming_supply":
		x.IncomingSupply = nil
	case "irismod.htlc.AssetSupply.outgoing_supply":
		x.OutgoingSupply = nil
	case "irismod.htlc.AssetSupply.current_supply":
		x.CurrentSupply = nil
	case "irismod.htlc.AssetSupply.time_limited_current_supply":
		x.TimeLimitedCurrentSupply = nil
	case "irismod.htlc.AssetSupply.time_elapsed":
		x.TimeElapsed = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: irismod.htlc.AssetSupply"))
		}
		panic(fmt.Errorf("message irismod.htlc.AssetSupply does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_AssetSupply) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "irismod.htlc.AssetSupply.incoming_supply":
		value := x.IncomingSupply
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "irismod.htlc.AssetSupply.outgoing_supply":
		value := x.OutgoingSupply
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "irismod.htlc.AssetSupply.current_supply":
		value := x.CurrentSupply
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "irismod.htlc.AssetSupply.time_limited_current_supply":
		value := x.TimeLimitedCurrentSupply
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "irismod.htlc.AssetSupply.time_elapsed":
		value := x.TimeElapsed
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: irismod.htlc.AssetSupply"))
		}
		panic(fmt.Errorf("message irismod.htlc.AssetSupply does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AssetSupply) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "irismod.htlc.AssetSupply.incoming_supply":
		x.IncomingSupply = value.Message().Interface().(*v1beta1.Coin)
	case "irismod.htlc.AssetSupply.outgoing_supply":
		x.OutgoingSupply = value.Message().Interface().(*v1beta1.Coin)
	case "irismod.htlc.AssetSupply.current_supply":
		x.CurrentSupply = value.Message().Interface().(*v1beta1.Coin)
	case "irismod.htlc.AssetSupply.time_limited_current_supply":
		x.TimeLimitedCurrentSupply = value.Message().Interface().(*v1beta1.Coin)
	case "irismod.htlc.AssetSupply.time_elapsed":
		x.TimeElapsed = value.Message().Interface().(*durationpb.Duration)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: irismod.htlc.AssetSupply"))
		}
		panic(fmt.Errorf("message irismod.htlc.AssetSupply does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AssetSupply) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "irismod.htlc.AssetSupply.incoming_supply":
		if x.IncomingSupply == nil {
			x.IncomingSupply = new(v1beta1.Coin)
		}
		return protoreflect.ValueOfMessage(x.IncomingSupply.ProtoReflect())
	case "irismod.htlc.AssetSupply.outgoing_supply":
		if x.OutgoingSupply == nil {
			x.OutgoingSupply = new(v1beta1.Coin)
		}
		return protoreflect.ValueOfMessage(x.OutgoingSupply.ProtoReflect())
	case "irismod.htlc.AssetSupply.current_supply":
		if x.CurrentSupply == nil {
			x.CurrentSupply = new(v1beta1.Coin)
		}
		return protoreflect.ValueOfMessage(x.CurrentSupply.ProtoReflect())
	case "irismod.htlc.AssetSupply.time_limited_current_supply":
		if x.TimeLimitedCurrentSupply == nil {
			x.TimeLimitedCurrentSupply = new(v1beta1.Coin)
		}
		return protoreflect.ValueOfMessage(x.TimeLimitedCurrentSupply.ProtoReflect())
	case "irismod.htlc.AssetSupply.time_elapsed":
		if x.TimeElapsed == nil {
			x.TimeElapsed = new(durationpb.Duration)
		}
		return protoreflect.ValueOfMessage(x.TimeElapsed.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: irismod.htlc.AssetSupply"))
		}
		panic(fmt.Errorf("message irismod.htlc.AssetSupply does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_AssetSupply) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "irismod.htlc.AssetSupply.incoming_supply":
		m := new(v1beta1.Coin)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "irismod.htlc.AssetSupply.outgoing_supply":
		m := new(v1beta1.Coin)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "irismod.htlc.AssetSupply.current_supply":
		m := new(v1beta1.Coin)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "irismod.htlc.AssetSupply.time_limited_current_supply":
		m := new(v1beta1.Coin)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "irismod.htlc.AssetSupply.time_elapsed":
		m := new(durationpb.Duration)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: irismod.htlc.AssetSupply"))
		}
		panic(fmt.Errorf("message irismod.htlc.AssetSupply does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_AssetSupply) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in irismod.htlc.AssetSupply", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_AssetSupply) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AssetSupply) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_AssetSupply) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_AssetSupply) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*AssetSupply)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.IncomingSupply != nil {
			l = options.Size(x.IncomingSupply)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.OutgoingSupply != nil {
			l = options.Size(x.OutgoingSupply)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.CurrentSupply != nil {
			l = options.Size(x.CurrentSupply)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.TimeLimitedCurrentSupply != nil {
			l = options.Size(x.TimeLimitedCurrentSupply)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.TimeElapsed != nil {
			l = options.Size(x.TimeElapsed)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*AssetSupply)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.TimeElapsed != nil {
			encoded, err := options.Marshal(x.TimeElapsed)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x2a
		}
		if x.TimeLimitedCurrentSupply != nil {
			encoded, err := options.Marshal(x.TimeLimitedCurrentSupply)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x22
		}
		if x.CurrentSupply != nil {
			encoded, err := options.Marshal(x.CurrentSupply)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1a
		}
		if x.OutgoingSupply != nil {
			encoded, err := options.Marshal(x.OutgoingSupply)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if x.IncomingSupply != nil {
			encoded, err := options.Marshal(x.IncomingSupply)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*AssetSupply)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: AssetSupply: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: AssetSupply: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field IncomingSupply", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.IncomingSupply == nil {
					x.IncomingSupply = &v1beta1.Coin{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.IncomingSupply); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OutgoingSupply", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.OutgoingSupply == nil {
					x.OutgoingSupply = &v1beta1.Coin{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.OutgoingSupply); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CurrentSupply", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.CurrentSupply == nil {
					x.CurrentSupply = &v1beta1.Coin{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.CurrentSupply); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TimeLimitedCurrentSupply", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.TimeLimitedCurrentSupply == nil {
					x.TimeLimitedCurrentSupply = &v1beta1.Coin{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.TimeLimitedCurrentSupply); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TimeElapsed", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.TimeElapsed == nil {
					x.TimeElapsed = &durationpb.Duration{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.TimeElapsed); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_Params_1_list)(nil)

type _Params_1_list struct {
	list *[]*AssetParam
}

func (x *_Params_1_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Params_1_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_Params_1_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*AssetParam)
	(*x.list)[i] = concreteValue
}

func (x *_Params_1_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*AssetParam)
	*x.list = append(*x.list, concreteValue)
}

func (x *_Params_1_list) AppendMutable() protoreflect.Value {
	v := new(AssetParam)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Params_1_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_Params_1_list) NewElement() protoreflect.Value {
	v := new(AssetParam)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Params_1_list) IsValid() bool {
	return x.list != nil
}

var (
	md_Params              protoreflect.MessageDescriptor
	fd_Params_asset_params protoreflect.FieldDescriptor
)

func init() {
	file_irismod_htlc_htlc_proto_init()
	md_Params = File_irismod_htlc_htlc_proto.Messages().ByName("Params")
	fd_Params_asset_params = md_Params.Fields().ByName("asset_params")
}

var _ protoreflect.Message = (*fastReflection_Params)(nil)

type fastReflection_Params Params

func (x *Params) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Params)(x)
}

func (x *Params) slowProtoReflect() protoreflect.Message {
	mi := &file_irismod_htlc_htlc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Params_messageType fastReflection_Params_messageType
var _ protoreflect.MessageType = fastReflection_Params_messageType{}

type fastReflection_Params_messageType struct{}

func (x fastReflection_Params_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Params)(nil)
}
func (x fastReflection_Params_messageType) New() protoreflect.Message {
	return new(fastReflection_Params)
}
func (x fastReflection_Params_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Params
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Params) Descriptor() protoreflect.MessageDescriptor {
	return md_Params
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Params) Type() protoreflect.MessageType {
	return _fastReflection_Params_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Params) New() protoreflect.Message {
	return new(fastReflection_Params)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Params) Interface() protoreflect.ProtoMessage {
	return (*Params)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Params) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.AssetParams) != 0 {
		value := protoreflect.ValueOfList(&_Params_1_list{list: &x.AssetParams})
		if !f(fd_Params_asset_params, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Params) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "irismod.htlc.Params.asset_params":
		return len(x.AssetParams) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: irismod.htlc.Params"))
		}
		panic(fmt.Errorf("message irismod.htlc.Params does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "irismod.htlc.Params.asset_params":
		x.AssetParams = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: irismod.htlc.Params"))
		}
		panic(fmt.Errorf("message irismod.htlc.Params does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Params) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "irismod.htlc.Params.asset_params":
		if len(x.AssetParams) == 0 {
			return protoreflect.ValueOfList(&_Params_1_list{})
		}
		listValue := &_Params_1_list{list: &x.AssetParams}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: irismod.htlc.Params"))
		}
		panic(fmt.Errorf("message irismod.htlc.Params does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "irismod.htlc.Params.asset_params":
		lv := value.List()
		clv := lv.(*_Params_1_list)
		x.AssetParams = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: irismod.htlc.Params"))
		}
		panic(fmt.Errorf("message irismod.htlc.Params does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "irismod.htlc.Params.asset_params":
		if x.AssetParams == nil {
			x.AssetParams = []*AssetParam{}
		}
		value := &_Params_1_list{list: &x.AssetParams}
		return protoreflect.ValueOfList(value)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: irismod.htlc.Params"))
		}
		panic(fmt.Errorf("message irismod.htlc.Params does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Params) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "irismod.htlc.Params.asset_params":
		list := []*AssetParam{}
		return protoreflect.ValueOfList(&_Params_1_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: irismod.htlc.Params"))
		}
		panic(fmt.Errorf("message irismod.htlc.Params does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Params) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in irismod.htlc.Params", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Params) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Params) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Params) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Params)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if len(x.AssetParams) > 0 {
			for _, e := range x.AssetParams {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Params)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.AssetParams) > 0 {
			for iNdEx := len(x.AssetParams) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.AssetParams[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0xa
			}
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Params)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Params: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AssetParams", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.AssetParams = append(x.AssetParams, &AssetParam{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.AssetParams[len(x.AssetParams)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_AssetParam                 protoreflect.MessageDescriptor
	fd_AssetParam_denom           protoreflect.FieldDescriptor
	fd_AssetParam_supply_limit    protoreflect.FieldDescriptor
	fd_AssetParam_active          protoreflect.FieldDescriptor
	fd_AssetParam_deputy_address  protoreflect.FieldDescriptor
	fd_AssetParam_fixed_fee       protoreflect.FieldDescriptor
	fd_AssetParam_min_swap_amount protoreflect.FieldDescriptor
	fd_AssetParam_max_swap_amount protoreflect.FieldDescriptor
	fd_AssetParam_min_block_lock  protoreflect.FieldDescriptor
	fd_AssetParam_max_block_lock  protoreflect.FieldDescriptor
)

func init() {
	file_irismod_htlc_htlc_proto_init()
	md_AssetParam = File_irismod_htlc_htlc_proto.Messages().ByName("AssetParam")
	fd_AssetParam_denom = md_AssetParam.Fields().ByName("denom")
	fd_AssetParam_supply_limit = md_AssetParam.Fields().ByName("supply_limit")
	fd_AssetParam_active = md_AssetParam.Fields().ByName("active")
	fd_AssetParam_deputy_address = md_AssetParam.Fields().ByName("deputy_address")
	fd_AssetParam_fixed_fee = md_AssetParam.Fields().ByName("fixed_fee")
	fd_AssetParam_min_swap_amount = md_AssetParam.Fields().ByName("min_swap_amount")
	fd_AssetParam_max_swap_amount = md_AssetParam.Fields().ByName("max_swap_amount")
	fd_AssetParam_min_block_lock = md_AssetParam.Fields().ByName("min_block_lock")
	fd_AssetParam_max_block_lock = md_AssetParam.Fields().ByName("max_block_lock")
}

var _ protoreflect.Message = (*fastReflection_AssetParam)(nil)

type fastReflection_AssetParam AssetParam

func (x *AssetParam) ProtoReflect() protoreflect.Message {
	return (*fastReflection_AssetParam)(x)
}

func (x *AssetParam) slowProtoReflect() protoreflect.Message {
	mi := &file_irismod_htlc_htlc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_AssetParam_messageType fastReflection_AssetParam_messageType
var _ protoreflect.MessageType = fastReflection_AssetParam_messageType{}

type fastReflection_AssetParam_messageType struct{}

func (x fastReflection_AssetParam_messageType) Zero() protoreflect.Message {
	return (*fastReflection_AssetParam)(nil)
}
func (x fastReflection_AssetParam_messageType) New() protoreflect.Message {
	return new(fastReflection_AssetParam)
}
func (x fastReflection_AssetParam_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_AssetParam
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_AssetParam) Descriptor() protoreflect.MessageDescriptor {
	return md_AssetParam
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_AssetParam) Type() protoreflect.MessageType {
	return _fastReflection_AssetParam_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_AssetParam) New() protoreflect.Message {
	return new(fastReflection_AssetParam)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_AssetParam) Interface() protoreflect.ProtoMessage {
	return (*AssetParam)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_AssetParam) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Denom != "" {
		value := protoreflect.ValueOfString(x.Denom)
		if !f(fd_AssetParam_denom, value) {
			return
		}
	}
	if x.SupplyLimit != nil {
		value := protoreflect.ValueOfMessage(x.SupplyLimit.ProtoReflect())
		if !f(fd_AssetParam_supply_limit, value) {
			return
		}
	}
	if x.Active != false {
		value := protoreflect.ValueOfBool(x.Active)
		if !f(fd_AssetParam_active, value) {
			return
		}
	}
	if x.DeputyAddress != "" {
		value := protoreflect.ValueOfString(x.DeputyAddress)
		if !f(fd_AssetParam_deputy_address, value) {
			return
		}
	}
	if x.FixedFee != "" {
		value := protoreflect.ValueOfString(x.FixedFee)
		if !f(fd_AssetParam_fixed_fee, value) {
			return
		}
	}
	if x.MinSwapAmount != "" {
		value := protoreflect.ValueOfString(x.MinSwapAmount)
		if !f(fd_AssetParam_min_swap_amount, value) {
			return
		}
	}
	if x.MaxSwapAmount != "" {
		value := protoreflect.ValueOfString(x.MaxSwapAmount)
		if !f(fd_AssetParam_max_swap_amount, value) {
			return
		}
	}
	if x.MinBlockLock != uint64(0) {
		value := protoreflect.ValueOfUint64(x.MinBlockLock)
		if !f(fd_AssetParam_min_block_lock, value) {
			return
		}
	}
	if x.MaxBlockLock != uint64(0) {
		value := protoreflect.ValueOfUint64(x.MaxBlockLock)
		if !f(fd_AssetParam_max_block_lock, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_AssetParam) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "irismod.htlc.AssetParam.denom":
		return x.Denom != ""
	case "irismod.htlc.AssetParam.supply_limit":
		return x.SupplyLimit != nil
	case "irismod.htlc.AssetParam.active":
		return x.Active != false
	case "irismod.htlc.AssetParam.deputy_address":
		return x.DeputyAddress != ""
	case "irismod.htlc.AssetParam.fixed_fee":
		return x.FixedFee != ""
	case "irismod.htlc.AssetParam.min_swap_amount":
		return x.MinSwapAmount != ""
	case "irismod.htlc.AssetParam.max_swap_amount":
		return x.MaxSwapAmount != ""
	case "irismod.htlc.AssetParam.min_block_lock":
		return x.MinBlockLock != uint64(0)
	case "irismod.htlc.AssetParam.max_block_lock":
		return x.MaxBlockLock != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: irismod.htlc.AssetParam"))
		}
		panic(fmt.Errorf("message irismod.htlc.AssetParam does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AssetParam) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "irismod.htlc.AssetParam.denom":
		x.Denom = ""
	case "irismod.htlc.AssetParam.supply_limit":
		x.SupplyLimit = nil
	case "irismod.htlc.AssetParam.active":
		x.Active = false
	case "irismod.htlc.AssetParam.deputy_address":
		x.DeputyAddress = ""
	case "irismod.htlc.AssetParam.fixed_fee":
		x.FixedFee = ""
	case "irismod.htlc.AssetParam.min_swap_amount":
		x.MinSwapAmount = ""
	case "irismod.htlc.AssetParam.max_swap_amount":
		x.MaxSwapAmount = ""
	case "irismod.htlc.AssetParam.min_block_lock":
		x.MinBlockLock = uint64(0)
	case "irismod.htlc.AssetParam.max_block_lock":
		x.MaxBlockLock = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: irismod.htlc.AssetParam"))
		}
		panic(fmt.Errorf("message irismod.htlc.AssetParam does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_AssetParam) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "irismod.htlc.AssetParam.denom":
		value := x.Denom
		return protoreflect.ValueOfString(value)
	case "irismod.htlc.AssetParam.supply_limit":
		value := x.SupplyLimit
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "irismod.htlc.AssetParam.active":
		value := x.Active
		return protoreflect.ValueOfBool(value)
	case "irismod.htlc.AssetParam.deputy_address":
		value := x.DeputyAddress
		return protoreflect.ValueOfString(value)
	case "irismod.htlc.AssetParam.fixed_fee":
		value := x.FixedFee
		return protoreflect.ValueOfString(value)
	case "irismod.htlc.AssetParam.min_swap_amount":
		value := x.MinSwapAmount
		return protoreflect.ValueOfString(value)
	case "irismod.htlc.AssetParam.max_swap_amount":
		value := x.MaxSwapAmount
		return protoreflect.ValueOfString(value)
	case "irismod.htlc.AssetParam.min_block_lock":
		value := x.MinBlockLock
		return protoreflect.ValueOfUint64(value)
	case "irismod.htlc.AssetParam.max_block_lock":
		value := x.MaxBlockLock
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: irismod.htlc.AssetParam"))
		}
		panic(fmt.Errorf("message irismod.htlc.AssetParam does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AssetParam) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "irismod.htlc.AssetParam.denom":
		x.Denom = value.Interface().(string)
	case "irismod.htlc.AssetParam.supply_limit":
		x.SupplyLimit = value.Message().Interface().(*SupplyLimit)
	case "irismod.htlc.AssetParam.active":
		x.Active = value.Bool()
	case "irismod.htlc.AssetParam.deputy_address":
		x.DeputyAddress = value.Interface().(string)
	case "irismod.htlc.AssetParam.fixed_fee":
		x.FixedFee = value.Interface().(string)
	case "irismod.htlc.AssetParam.min_swap_amount":
		x.MinSwapAmount = value.Interface().(string)
	case "irismod.htlc.AssetParam.max_swap_amount":
		x.MaxSwapAmount = value.Interface().(string)
	case "irismod.htlc.AssetParam.min_block_lock":
		x.MinBlockLock = value.Uint()
	case "irismod.htlc.AssetParam.max_block_lock":
		x.MaxBlockLock = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: irismod.htlc.AssetParam"))
		}
		panic(fmt.Errorf("message irismod.htlc.AssetParam does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AssetParam) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "irismod.htlc.AssetParam.supply_limit":
		if x.SupplyLimit == nil {
			x.SupplyLimit = new(SupplyLimit)
		}
		return protoreflect.ValueOfMessage(x.SupplyLimit.ProtoReflect())
	case "irismod.htlc.AssetParam.denom":
		panic(fmt.Errorf("field denom of message irismod.htlc.AssetParam is not mutable"))
	case "irismod.htlc.AssetParam.active":
		panic(fmt.Errorf("field active of message irismod.htlc.AssetParam is not mutable"))
	case "irismod.htlc.AssetParam.deputy_address":
		panic(fmt.Errorf("field deputy_address of message irismod.htlc.AssetParam is not mutable"))
	case "irismod.htlc.AssetParam.fixed_fee":
		panic(fmt.Errorf("field fixed_fee of message irismod.htlc.AssetParam is not mutable"))
	case "irismod.htlc.AssetParam.min_swap_amount":
		panic(fmt.Errorf("field min_swap_amount of message irismod.htlc.AssetParam is not mutable"))
	case "irismod.htlc.AssetParam.max_swap_amount":
		panic(fmt.Errorf("field max_swap_amount of message irismod.htlc.AssetParam is not mutable"))
	case "irismod.htlc.AssetParam.min_block_lock":
		panic(fmt.Errorf("field min_block_lock of message irismod.htlc.AssetParam is not mutable"))
	case "irismod.htlc.AssetParam.max_block_lock":
		panic(fmt.Errorf("field max_block_lock of message irismod.htlc.AssetParam is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: irismod.htlc.AssetParam"))
		}
		panic(fmt.Errorf("message irismod.htlc.AssetParam does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_AssetParam) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "irismod.htlc.AssetParam.denom":
		return protoreflect.ValueOfString("")
	case "irismod.htlc.AssetParam.supply_limit":
		m := new(SupplyLimit)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "irismod.htlc.AssetParam.active":
		return protoreflect.ValueOfBool(false)
	case "irismod.htlc.AssetParam.deputy_address":
		return protoreflect.ValueOfString("")
	case "irismod.htlc.AssetParam.fixed_fee":
		return protoreflect.ValueOfString("")
	case "irismod.htlc.AssetParam.min_swap_amount":
		return protoreflect.ValueOfString("")
	case "irismod.htlc.AssetParam.max_swap_amount":
		return protoreflect.ValueOfString("")
	case "irismod.htlc.AssetParam.min_block_lock":
		return protoreflect.ValueOfUint64(uint64(0))
	case "irismod.htlc.AssetParam.max_block_lock":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: irismod.htlc.AssetParam"))
		}
		panic(fmt.Errorf("message irismod.htlc.AssetParam does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_AssetParam) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in irismod.htlc.AssetParam", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_AssetParam) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AssetParam) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_AssetParam) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_AssetParam) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*AssetParam)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Denom)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.SupplyLimit != nil {
			l = options.Size(x.SupplyLimit)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Active {
			n += 2
		}
		l = len(x.DeputyAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.FixedFee)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.MinSwapAmount)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.MaxSwapAmount)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.MinBlockLock != 0 {
			n += 1 + runtime.Sov(uint64(x.MinBlockLock))
		}
		if x.MaxBlockLock != 0 {
			n += 1 + runtime.Sov(uint64(x.MaxBlockLock))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*AssetParam)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.MaxBlockLock != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MaxBlockLock))
			i--
			dAtA[i] = 0x48
		}
		if x.MinBlockLock != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MinBlockLock))
			i--
			dAtA[i] = 0x40
		}
		if len(x.MaxSwapAmount) > 0 {
			i -= len(x.MaxSwapAmount)
			copy(dAtA[i:], x.MaxSwapAmount)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.MaxSwapAmount)))
			i--
			dAtA[i] = 0x3a
		}
		if len(x.MinSwapAmount) > 0 {
			i -= len(x.MinSwapAmount)
			copy(dAtA[i:], x.MinSwapAmount)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.MinSwapAmount)))
			i--
			dAtA[i] = 0x32
		}
		if len(x.FixedFee) > 0 {
			i -= len(x.FixedFee)
			copy(dAtA[i:], x.FixedFee)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.FixedFee)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.DeputyAddress) > 0 {
			i -= len(x.DeputyAddress)
			copy(dAtA[i:], x.DeputyAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.DeputyAddress)))
			i--
			dAtA[i] = 0x22
		}
		if x.Active {
			i--
			if x.Active {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x18
		}
		if x.SupplyLimit != nil {
			encoded, err := options.Marshal(x.SupplyLimit)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Denom) > 0 {
			i -= len(x.Denom)
			copy(dAtA[i:], x.Denom)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Denom)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*AssetParam)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: AssetParam: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: AssetParam: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Denom = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SupplyLimit", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.SupplyLimit == nil {
					x.SupplyLimit = &SupplyLimit{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.SupplyLimit); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.Active = bool(v != 0)
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DeputyAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.DeputyAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FixedFee", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.FixedFee = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MinSwapAmount", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MinSwapAmount = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaxSwapAmount", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MaxSwapAmount = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 8:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MinBlockLock", wireType)
				}
				x.MinBlockLock = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MinBlockLock |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 9:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaxBlockLock", wireType)
				}
				x.MaxBlockLock = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MaxBlockLock |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_SupplyLimit                  protoreflect.MessageDescriptor
	fd_SupplyLimit_limit            protoreflect.FieldDescriptor
	fd_SupplyLimit_time_limited     protoreflect.FieldDescriptor
	fd_SupplyLimit_time_period      protoreflect.FieldDescriptor
	fd_SupplyLimit_time_based_limit protoreflect.FieldDescriptor
)

func init() {
	file_irismod_htlc_htlc_proto_init()
	md_SupplyLimit = File_irismod_htlc_htlc_proto.Messages().ByName("SupplyLimit")
	fd_SupplyLimit_limit = md_SupplyLimit.Fields().ByName("limit")
	fd_SupplyLimit_time_limited = md_SupplyLimit.Fields().ByName("time_limited")
	fd_SupplyLimit_time_period = md_SupplyLimit.Fields().ByName("time_period")
	fd_SupplyLimit_time_based_limit = md_SupplyLimit.Fields().ByName("time_based_limit")
}

var _ protoreflect.Message = (*fastReflection_SupplyLimit)(nil)

type fastReflection_SupplyLimit SupplyLimit

func (x *SupplyLimit) ProtoReflect() protoreflect.Message {
	return (*fastReflection_SupplyLimit)(x)
}

func (x *SupplyLimit) slowProtoReflect() protoreflect.Message {
	mi := &file_irismod_htlc_htlc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_SupplyLimit_messageType fastReflection_SupplyLimit_messageType
var _ protoreflect.MessageType = fastReflection_SupplyLimit_messageType{}

type fastReflection_SupplyLimit_messageType struct{}

func (x fastReflection_SupplyLimit_messageType) Zero() protoreflect.Message {
	return (*fastReflection_SupplyLimit)(nil)
}
func (x fastReflection_SupplyLimit_messageType) New() protoreflect.Message {
	return new(fastReflection_SupplyLimit)
}
func (x fastReflection_SupplyLimit_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_SupplyLimit
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_SupplyLimit) Descriptor() protoreflect.MessageDescriptor {
	return md_SupplyLimit
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_SupplyLimit) Type() protoreflect.MessageType {
	return _fastReflection_SupplyLimit_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_SupplyLimit) New() protoreflect.Message {
	return new(fastReflection_SupplyLimit)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_SupplyLimit) Interface() protoreflect.ProtoMessage {
	return (*SupplyLimit)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_SupplyLimit) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Limit != "" {
		value := protoreflect.ValueOfString(x.Limit)
		if !f(fd_SupplyLimit_limit, value) {
			return
		}
	}
	if x.TimeLimited != false {
		value := protoreflect.ValueOfBool(x.TimeLimited)
		if !f(fd_SupplyLimit_time_limited, value) {
			return
		}
	}
	if x.TimePeriod != nil {
		value := protoreflect.ValueOfMessage(x.TimePeriod.ProtoReflect())
		if !f(fd_SupplyLimit_time_period, value) {
			return
		}
	}
	if x.TimeBasedLimit != "" {
		value := protoreflect.ValueOfString(x.TimeBasedLimit)
		if !f(fd_SupplyLimit_time_based_limit, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_SupplyLimit) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "irismod.htlc.SupplyLimit.limit":
		return x.Limit != ""
	case "irismod.htlc.SupplyLimit.time_limited":
		return x.TimeLimited != false
	case "irismod.htlc.SupplyLimit.time_period":
		return x.TimePeriod != nil
	case "irismod.htlc.SupplyLimit.time_based_limit":
		return x.TimeBasedLimit != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: irismod.htlc.SupplyLimit"))
		}
		panic(fmt.Errorf("message irismod.htlc.SupplyLimit does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SupplyLimit) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "irismod.htlc.SupplyLimit.limit":
		x.Limit = ""
	case "irismod.htlc.SupplyLimit.time_limited":
		x.TimeLimited = false
	case "irismod.htlc.SupplyLimit.time_period":
		x.TimePeriod = nil
	case "irismod.htlc.SupplyLimit.time_based_limit":
		x.TimeBasedLimit = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: irismod.htlc.SupplyLimit"))
		}
		panic(fmt.Errorf("message irismod.htlc.SupplyLimit does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_SupplyLimit) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "irismod.htlc.SupplyLimit.limit":
		value := x.Limit
		return protoreflect.ValueOfString(value)
	case "irismod.htlc.SupplyLimit.time_limited":
		value := x.TimeLimited
		return protoreflect.ValueOfBool(value)
	case "irismod.htlc.SupplyLimit.time_period":
		value := x.TimePeriod
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "irismod.htlc.SupplyLimit.time_based_limit":
		value := x.TimeBasedLimit
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: irismod.htlc.SupplyLimit"))
		}
		panic(fmt.Errorf("message irismod.htlc.SupplyLimit does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SupplyLimit) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "irismod.htlc.SupplyLimit.limit":
		x.Limit = value.Interface().(string)
	case "irismod.htlc.SupplyLimit.time_limited":
		x.TimeLimited = value.Bool()
	case "irismod.htlc.SupplyLimit.time_period":
		x.TimePeriod = value.Message().Interface().(*durationpb.Duration)
	case "irismod.htlc.SupplyLimit.time_based_limit":
		x.TimeBasedLimit = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: irismod.htlc.SupplyLimit"))
		}
		panic(fmt.Errorf("message irismod.htlc.SupplyLimit does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SupplyLimit) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "irismod.htlc.SupplyLimit.time_period":
		if x.TimePeriod == nil {
			x.TimePeriod = new(durationpb.Duration)
		}
		return protoreflect.ValueOfMessage(x.TimePeriod.ProtoReflect())
	case "irismod.htlc.SupplyLimit.limit":
		panic(fmt.Errorf("field limit of message irismod.htlc.SupplyLimit is not mutable"))
	case "irismod.htlc.SupplyLimit.time_limited":
		panic(fmt.Errorf("field time_limited of message irismod.htlc.SupplyLimit is not mutable"))
	case "irismod.htlc.SupplyLimit.time_based_limit":
		panic(fmt.Errorf("field time_based_limit of message irismod.htlc.SupplyLimit is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: irismod.htlc.SupplyLimit"))
		}
		panic(fmt.Errorf("message irismod.htlc.SupplyLimit does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_SupplyLimit) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "irismod.htlc.SupplyLimit.limit":
		return protoreflect.ValueOfString("")
	case "irismod.htlc.SupplyLimit.time_limited":
		return protoreflect.ValueOfBool(false)
	case "irismod.htlc.SupplyLimit.time_period":
		m := new(durationpb.Duration)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "irismod.htlc.SupplyLimit.time_based_limit":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: irismod.htlc.SupplyLimit"))
		}
		panic(fmt.Errorf("message irismod.htlc.SupplyLimit does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_SupplyLimit) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in irismod.htlc.SupplyLimit", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_SupplyLimit) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SupplyLimit) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_SupplyLimit) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_SupplyLimit) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*SupplyLimit)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Limit)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.TimeLimited {
			n += 2
		}
		if x.TimePeriod != nil {
			l = options.Size(x.TimePeriod)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TimeBasedLimit)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*SupplyLimit)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.TimeBasedLimit) > 0 {
			i -= len(x.TimeBasedLimit)
			copy(dAtA[i:], x.TimeBasedLimit)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TimeBasedLimit)))
			i--
			dAtA[i] = 0x22
		}
		if x.TimePeriod != nil {
			encoded, err := options.Marshal(x.TimePeriod)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1a
		}
		if x.TimeLimited {
			i--
			if x.TimeLimited {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x10
		}
		if len(x.Limit) > 0 {
			i -= len(x.Limit)
			copy(dAtA[i:], x.Limit)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Limit)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*SupplyLimit)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: SupplyLimit: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: SupplyLimit: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Limit = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TimeLimited", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.TimeLimited = bool(v != 0)
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TimePeriod", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.TimePeriod == nil {
					x.TimePeriod = &durationpb.Duration{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.TimePeriod); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TimeBasedLimit", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TimeBasedLimit = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: irismod/htlc/htlc.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// HTLCState defines the state of an HTLC
type HTLCState int32

const (
	// HTLC_STATE_OPEN defines an open state.
	HTLCState_HTLC_STATE_OPEN HTLCState = 0
	// HTLC_STATE_COMPLETED defines a completed state.
	HTLCState_HTLC_STATE_COMPLETED HTLCState = 1
	// HTLC_STATE_REFUNDED defines a refunded state.
	HTLCState_HTLC_STATE_REFUNDED HTLCState = 2
)

// Enum value maps for HTLCState.
var (
	HTLCState_name = map[int32]string{
		0: "HTLC_STATE_OPEN",
		1: "HTLC_STATE_COMPLETED",
		2: "HTLC_STATE_REFUNDED",
	}
	HTLCState_value = map[string]int32{
		"HTLC_STATE_OPEN":      0,
		"HTLC_STATE_COMPLETED": 1,
		"HTLC_STATE_REFUNDED":  2,
	}
)

func (x HTLCState) Enum() *HTLCState {
	p := new(HTLCState)
	*p = x
	return p
}

func (x HTLCState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HTLCState) Descriptor() protoreflect.EnumDescriptor {
	return file_irismod_htlc_htlc_proto_enumTypes[0].Descriptor()
}

func (HTLCState) Type() protoreflect.EnumType {
	return &file_irismod_htlc_htlc_proto_enumTypes[0]
}

func (x HTLCState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HTLCState.Descriptor instead.
func (HTLCState) EnumDescriptor() ([]byte, []int) {
	return file_irismod_htlc_htlc_proto_rawDescGZIP(), []int{0}
}

// SwapDirection defines the direction of an HTLT
type SwapDirection int32

const (
	// NONE defines an htlt none direction.
	SwapDirection_NONE SwapDirection = 0
	// INCOMING defines an htlt incoming direction.
	SwapDirection_INCOMING SwapDirection = 1
	// OUTGOING defines an htlt outgoing direction.
	SwapDirection_OUTGOING SwapDirection = 2
)

// Enum value maps for SwapDirection.
var (
	SwapDirection_name = map[int32]string{
		0: "NONE",
		1: "INCOMING",
		2: "OUTGOING",
	}
	SwapDirection_value = map[string]int32{
		"NONE":     0,
		"INCOMING": 1,
		"OUTGOING": 2,
	}
)

func (x SwapDirection) Enum() *SwapDirection {
	p := new(SwapDirection)
	*p = x
	return p
}

func (x SwapDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SwapDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_irismod_htlc_htlc_proto_enumTypes[1].Descriptor()
}

func (SwapDirection) Type() protoreflect.EnumType {
	return &file_irismod_htlc_htlc_proto_enumTypes[1]
}

func (x SwapDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SwapDirection.Descriptor instead.
func (SwapDirection) EnumDescriptor() ([]byte, []int) {
	return file_irismod_htlc_htlc_proto_rawDescGZIP(), []int{1}
}

// HTLC defines the struct of an HTLC
type HTLC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Sender               string          `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	To                   string          `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	ReceiverOnOtherChain string          `protobuf:"bytes,4,opt,name=receiver_on_other_chain,json=receiverOnOtherChain,proto3" json:"receiver_on_other_chain,omitempty"`
	SenderOnOtherChain   string          `protobuf:"bytes,5,opt,name=sender_on_other_chain,json=senderOnOtherChain,proto3" json:"sender_on_other_chain,omitempty"`
	Amount               []*v1beta1.Coin `protobuf:"bytes,6,rep,name=amount,proto3" json:"amount,omitempty"`
	HashLock             string          `protobuf:"bytes,7,opt,name=hash_lock,json=hashLock,proto3" json:"hash_lock,omitempty"`
	Secret               string          `protobuf:"bytes,8,opt,name=secret,proto3" json:"secret,omitempty"`
	Timestamp            uint64          `protobuf:"varint,9,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ExpirationHeight     uint64          `protobuf:"varint,10,opt,name=expiration_height,json=expirationHeight,proto3" json:"expiration_height,omitempty"`
	State                HTLCState       `protobuf:"varint,11,opt,name=state,proto3,enum=irismod.htlc.HTLCState" json:"state,omitempty"`
	ClosedBlock          uint64          `protobuf:"varint,12,opt,name=closed_block,json=closedBlock,proto3" json:"closed_block,omitempty"`
	Transfer             bool            `protobuf:"varint,13,opt,name=transfer,proto3" json:"transfer,omitempty"`
	Direction            SwapDirection   `protobuf:"varint,14,opt,name=direction,proto3,enum=irismod.htlc.SwapDirection" json:"direction,omitempty"`
}

func (x *HTLC) Reset() {
	*x = HTLC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_irismod_htlc_htlc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTLC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTLC) ProtoMessage() {}

// Deprecated: Use HTLC.ProtoReflect.Descriptor instead.
func (*HTLC) Descriptor() ([]byte, []int) {
	return file_irismod_htlc_htlc_proto_rawDescGZIP(), []int{0}
}

func (x *HTLC) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *HTLC) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *HTLC) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *HTLC) GetReceiverOnOtherChain() string {
	if x != nil {
		return x.ReceiverOnOtherChain
	}
	return ""
}

func (x *HTLC) GetSenderOnOtherChain() string {
	if x != nil {
		return x.SenderOnOtherChain
	}
	return ""
}

func (x *HTLC) GetAmount() []*v1beta1.Coin {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *HTLC) GetHashLock() string {
	if x != nil {
		return x.HashLock
	}
	return ""
}

func (x *HTLC) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *HTLC) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *HTLC) GetExpirationHeight() uint64 {
	if x != nil {
		return x.ExpirationHeight
	}
	return 0
}

func (x *HTLC) GetState() HTLCState {
	if x != nil {
		return x.State
	}
	return HTLCState_HTLC_STATE_OPEN
}

func (x *HTLC) GetClosedBlock() uint64 {
	if x != nil {
		return x.ClosedBlock
	}
	return 0
}

func (x *HTLC) GetTransfer() bool {
	if x != nil {
		return x.Transfer
	}
	return false
}

func (x *HTLC) GetDirection() SwapDirection {
	if x != nil {
		return x.Direction
	}
	return SwapDirection_NONE
}

// AssetSupply defines the struct of an AssetSupply
type AssetSupply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IncomingSupply           *v1beta1.Coin        `protobuf:"bytes,1,opt,name=incoming_supply,json=incomingSupply,proto3" json:"incoming_supply,omitempty"`
	OutgoingSupply           *v1beta1.Coin        `protobuf:"bytes,2,opt,name=outgoing_supply,json=outgoingSupply,proto3" json:"outgoing_supply,omitempty"`
	CurrentSupply            *v1beta1.Coin        `protobuf:"bytes,3,opt,name=current_supply,json=currentSupply,proto3" json:"current_supply,omitempty"`
	TimeLimitedCurrentSupply *v1beta1.Coin        `protobuf:"bytes,4,opt,name=time_limited_current_supply,json=timeLimitedCurrentSupply,proto3" json:"time_limited_current_supply,omitempty"`
	TimeElapsed              *durationpb.Duration `protobuf:"bytes,5,opt,name=time_elapsed,json=timeElapsed,proto3" json:"time_elapsed,omitempty"`
}

func (x *AssetSupply) Reset() {
	*x = AssetSupply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_irismod_htlc_htlc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetSupply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetSupply) ProtoMessage() {}

// Deprecated: Use AssetSupply.ProtoReflect.Descriptor instead.
func (*AssetSupply) Descriptor() ([]byte, []int) {
	return file_irismod_htlc_htlc_proto_rawDescGZIP(), []int{1}
}

func (x *AssetSupply) GetIncomingSupply() *v1beta1.Coin {
	if x != nil {
		return x.IncomingSupply
	}
	return nil
}

func (x *AssetSupply) GetOutgoingSupply() *v1beta1.Coin {
	if x != nil {
		return x.OutgoingSupply
	}
	return nil
}

func (x *AssetSupply) GetCurrentSupply() *v1beta1.Coin {
	if x != nil {
		return x.CurrentSupply
	}
	return nil
}

func (x *AssetSupply) GetTimeLimitedCurrentSupply() *v1beta1.Coin {
	if x != nil {
		return x.TimeLimitedCurrentSupply
	}
	return nil
}

func (x *AssetSupply) GetTimeElapsed() *durationpb.Duration {
	if x != nil {
		return x.TimeElapsed
	}
	return nil
}

// Params defines token module's parameters
type Params struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetParams []*AssetParam `protobuf:"bytes,1,rep,name=asset_params,json=assetParams,proto3" json:"asset_params,omitempty"`
}

func (x *Params) Reset() {
	*x = Params{}
	if protoimpl.UnsafeEnabled {
		mi := &file_irismod_htlc_htlc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Params) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Params) ProtoMessage() {}

// Deprecated: Use Params.ProtoReflect.Descriptor instead.
func (*Params) Descriptor() ([]byte, []int) {
	return file_irismod_htlc_htlc_proto_rawDescGZIP(), []int{2}
}

func (x *Params) GetAssetParams() []*AssetParam {
	if x != nil {
		return x.AssetParams
	}
	return nil
}

// AssetParam defines the struct of an AssetParam
type AssetParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Denom         string       `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`                                        // name of the asset
	SupplyLimit   *SupplyLimit `protobuf:"bytes,2,opt,name=supply_limit,json=supplyLimit,proto3" json:"supply_limit,omitempty"`         // asset supply limit
	Active        bool         `protobuf:"varint,3,opt,name=active,proto3" json:"active,omitempty"`                                     // denotes if asset is available or paused
	DeputyAddress string       `protobuf:"bytes,4,opt,name=deputy_address,json=deputyAddress,proto3" json:"deputy_address,omitempty"`   // the address of the relayer process
	FixedFee      string       `protobuf:"bytes,5,opt,name=fixed_fee,json=fixedFee,proto3" json:"fixed_fee,omitempty"`                  // the fixed fee charged by the relayer process for outgoing swaps
	MinSwapAmount string       `protobuf:"bytes,6,opt,name=min_swap_amount,json=minSwapAmount,proto3" json:"min_swap_amount,omitempty"` // Minimum swap amount
	MaxSwapAmount string       `protobuf:"bytes,7,opt,name=max_swap_amount,json=maxSwapAmount,proto3" json:"max_swap_amount,omitempty"` // Maximum swap amount
	MinBlockLock  uint64       `protobuf:"varint,8,opt,name=min_block_lock,json=minBlockLock,proto3" json:"min_block_lock,omitempty"`   // Minimum swap block lock
	MaxBlockLock  uint64       `protobuf:"varint,9,opt,name=max_block_lock,json=maxBlockLock,proto3" json:"max_block_lock,omitempty"`   // Maximum swap block lock
}

func (x *AssetParam) Reset() {
	*x = AssetParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_irismod_htlc_htlc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetParam) ProtoMessage() {}

// Deprecated: Use AssetParam.ProtoReflect.Descriptor instead.
func (*AssetParam) Descriptor() ([]byte, []int) {
	return file_irismod_htlc_htlc_proto_rawDescGZIP(), []int{3}
}

func (x *AssetParam) GetDenom() string {
	if x != nil {
		return x.Denom
	}
	return ""
}

func (x *AssetParam) GetSupplyLimit() *SupplyLimit {
	if x != nil {
		return x.SupplyLimit
	}
	return nil
}

func (x *AssetParam) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *AssetParam) GetDeputyAddress() string {
	if x != nil {
		return x.DeputyAddress
	}
	return ""
}

func (x *AssetParam) GetFixedFee() string {
	if x != nil {
		return x.FixedFee
	}
	return ""
}

func (x *AssetParam) GetMinSwapAmount() string {
	if x != nil {
		return x.MinSwapAmount
	}
	return ""
}

func (x *AssetParam) GetMaxSwapAmount() string {
	if x != nil {
		return x.MaxSwapAmount
	}
	return ""
}

func (x *AssetParam) GetMinBlockLock() uint64 {
	if x != nil {
		return x.MinBlockLock
	}
	return 0
}

func (x *AssetParam) GetMaxBlockLock() uint64 {
	if x != nil {
		return x.MaxBlockLock
	}
	return 0
}

// SupplyLimit defines the struct of an SupplyLimit
type SupplyLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit          string               `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`                                           // the absolute supply limit for an asset
	TimeLimited    bool                 `protobuf:"varint,2,opt,name=time_limited,json=timeLimited,proto3" json:"time_limited,omitempty"`           // boolean for if the supply is also limited by time
	TimePeriod     *durationpb.Duration `protobuf:"bytes,3,opt,name=time_period,json=timePeriod,proto3" json:"time_period,omitempty"`               // the duration for which the supply time limit applies
	TimeBasedLimit string               `protobuf:"bytes,4,opt,name=time_based_limit,json=timeBasedLimit,proto3" json:"time_based_limit,omitempty"` // the supply limit for an asset for each time period
}

func (x *SupplyLimit) Reset() {
	*x = SupplyLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_irismod_htlc_htlc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupplyLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupplyLimit) ProtoMessage() {}

// Deprecated: Use SupplyLimit.ProtoReflect.Descriptor instead.
func (*SupplyLimit) Descriptor() ([]byte, []int) {
	return file_irismod_htlc_htlc_proto_rawDescGZIP(), []int{4}
}

func (x *SupplyLimit) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *SupplyLimit) GetTimeLimited() bool {
	if x != nil {
		return x.TimeLimited
	}
	return false
}

func (x *SupplyLimit) GetTimePeriod() *durationpb.Duration {
	if x != nil {
		return x.TimePeriod
	}
	return nil
}

func (x *SupplyLimit) GetTimeBasedLimit() string {
	if x != nil {
		return x.TimeBasedLimit
	}
	return ""
}

var File_irismod_htlc_htlc_proto protoreflect.FileDescriptor

var file_irismod_htlc_htlc_proto_rawDesc = []byte{
	0x0a, 0x17, 0x69, 0x72, 0x69, 0x73, 0x6d, 0x6f, 0x64, 0x2f, 0x68, 0x74, 0x6c, 0x63, 0x2f, 0x68,
	0x74, 0x6c, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x69, 0x72, 0x69, 0x73, 0x6d,
	0x6f, 0x64, 0x2e, 0x68, 0x74, 0x6c, 0x63, 0x1a, 0x1e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f,
	0x62, 0x61, 0x73, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x63, 0x6f, 0x69,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbc, 0x04,
	0x0a, 0x04, 0x48, 0x54, 0x4c, 0x43, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x0e,
	0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x35,
	0x0a, 0x17, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6f, 0x6e, 0x5f, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4f, 0x6e, 0x4f, 0x74, 0x68, 0x65, 0x72,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x31, 0x0a, 0x15, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f,
	0x6f, 0x6e, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x6e, 0x4f, 0x74,
	0x68, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x63, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43,
	0x6f, 0x69, 0x6e, 0x42, 0x30, 0xc8, 0xde, 0x1f, 0x00, 0xaa, 0xdf, 0x1f, 0x28, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x2b, 0x0a, 0x11, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2d, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x69,
	0x72, 0x69, 0x73, 0x6d, 0x6f, 0x64, 0x2e, 0x68, 0x74, 0x6c, 0x63, 0x2e, 0x48, 0x54, 0x4c, 0x43,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12,
	0x1a, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x09, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x69, 0x72, 0x69, 0x73, 0x6d, 0x6f, 0x64, 0x2e, 0x68, 0x74, 0x6c, 0x63, 0x2e, 0x53, 0x77,
	0x61, 0x70, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x04, 0xe8, 0xa0, 0x1f, 0x01, 0x22, 0x91, 0x03, 0x0a,
	0x0b, 0x41, 0x73, 0x73, 0x65, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x48, 0x0a, 0x0f,
	0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e,
	0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67,
	0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x48, 0x0a, 0x0f, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00,
	0x52, 0x0e, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79,
	0x12, 0x46, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x70, 0x70,
	0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43,
	0x6f, 0x69, 0x6e, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x5e, 0x0a, 0x1b, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x18,
	0x74, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x46, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0xc8, 0xde, 0x1f, 0x00, 0x98,
	0xdf, 0x1f, 0x01, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64,
	0x22, 0x6c, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x58, 0x0a, 0x0c, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x69, 0x72, 0x69, 0x73, 0x6d, 0x6f, 0x64, 0x2e, 0x68, 0x74, 0x6c, 0x63, 0x2e,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x42, 0x1b, 0xc8, 0xde, 0x1f, 0x00,
	0xf2, 0xde, 0x1f, 0x13, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x52, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x3a, 0x08, 0x98, 0xa0, 0x1f, 0x00, 0xe8, 0xa0, 0x1f, 0x01, 0x22, 0xf8,
	0x03, 0x0a, 0x0a, 0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x14, 0x0a,
	0x05, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x65,
	0x6e, 0x6f, 0x6d, 0x12, 0x42, 0x0a, 0x0c, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x72, 0x69, 0x73,
	0x6d, 0x6f, 0x64, 0x2e, 0x68, 0x74, 0x6c, 0x63, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0b, 0x73, 0x75, 0x70, 0x70,
	0x6c, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x64, 0x65, 0x70, 0x75, 0x74, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x70, 0x75, 0x74, 0x79, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x4b, 0x0a, 0x09, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f,
	0x66, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xc8, 0xde, 0x1f, 0x00, 0xda,
	0xde, 0x1f, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x08, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x46, 0x65, 0x65, 0x12, 0x56, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xc8, 0xde,
	0x1f, 0x00, 0xda, 0xde, 0x1f, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73,
	0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x0d, 0x6d, 0x69,
	0x6e, 0x53, 0x77, 0x61, 0x70, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x56, 0x0a, 0x0f, 0x6d,
	0x61, 0x78, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x26, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x53, 0x77, 0x61, 0x70, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6d, 0x69, 0x6e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x78,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x6f, 0x63, 0x6b, 0x3a,
	0x08, 0x98, 0xa0, 0x1f, 0x00, 0xe8, 0xa0, 0x1f, 0x01, 0x22, 0xa0, 0x02, 0x0a, 0x0b, 0x53, 0x75,
	0x70, 0x70, 0x6c, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x44, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde,
	0x1f, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x65, 0x64, 0x12, 0x44, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x08, 0xc8, 0xde, 0x1f, 0x00, 0x98, 0xdf, 0x1f, 0x01, 0x52, 0x0a, 0x74, 0x69,
	0x6d, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x58, 0x0a, 0x10, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x2e, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x26, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x61, 0x73, 0x65, 0x64, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x3a, 0x08, 0x98, 0xa0, 0x1f, 0x00, 0xe8, 0xa0, 0x1f, 0x01, 0x2a, 0x80, 0x01, 0x0a,
	0x09, 0x48, 0x54, 0x4c, 0x43, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0f, 0x48, 0x54,
	0x4c, 0x43, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x00, 0x1a,
	0x08, 0x8a, 0x9d, 0x20, 0x04, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x27, 0x0a, 0x14, 0x48, 0x54, 0x4c,
	0x43, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45,
	0x44, 0x10, 0x01, 0x1a, 0x0d, 0x8a, 0x9d, 0x20, 0x09, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x12, 0x25, 0x0a, 0x13, 0x48, 0x54, 0x4c, 0x43, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x52, 0x45, 0x46, 0x55, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x02, 0x1a, 0x0c, 0x8a, 0x9d, 0x20,
	0x08, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x1a, 0x04, 0x88, 0xa3, 0x1e, 0x00, 0x2a,
	0x61, 0x0a, 0x0d, 0x53, 0x77, 0x61, 0x70, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x1a, 0x08, 0x8a, 0x9d, 0x20, 0x04,
	0x4e, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x49, 0x4e, 0x47,
	0x10, 0x01, 0x1a, 0x0c, 0x8a, 0x9d, 0x20, 0x08, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67,
	0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x55, 0x54, 0x47, 0x4f, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x1a, 0x0c,
	0x8a, 0x9d, 0x20, 0x08, 0x4f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x1a, 0x04, 0x88, 0xa3,
	0x1e, 0x00, 0x42, 0x95, 0x01, 0xc8, 0xe1, 0x1e, 0x00, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x2e, 0x69,
	0x72, 0x69, 0x73, 0x6d, 0x6f, 0x64, 0x2e, 0x68, 0x74, 0x6c, 0x63, 0x42, 0x09, 0x48, 0x74, 0x6c,
	0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x21, 0x6d, 0x6f, 0x64, 0x73, 0x2e, 0x69,
	0x72, 0x69, 0x73, 0x6e, 0x65, 0x74, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69,
	0x72, 0x69, 0x73, 0x6d, 0x6f, 0x64, 0x2f, 0x68, 0x74, 0x6c, 0x63, 0xa2, 0x02, 0x03, 0x49, 0x48,
	0x58, 0xaa, 0x02, 0x0c, 0x49, 0x72, 0x69, 0x73, 0x6d, 0x6f, 0x64, 0x2e, 0x48, 0x74, 0x6c, 0x63,
	0xca, 0x02, 0x0c, 0x49, 0x72, 0x69, 0x73, 0x6d, 0x6f, 0x64, 0x5c, 0x48, 0x74, 0x6c, 0x63, 0xe2,
	0x02, 0x18, 0x49, 0x72, 0x69, 0x73, 0x6d, 0x6f, 0x64, 0x5c, 0x48, 0x74, 0x6c, 0x63, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0d, 0x49, 0x72, 0x69,
	0x73, 0x6d, 0x6f, 0x64, 0x3a, 0x3a, 0x48, 0x74, 0x6c, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_irismod_htlc_htlc_proto_rawDescOnce sync.Once
	file_irismod_htlc_htlc_proto_rawDescData = file_irismod_htlc_htlc_proto_rawDesc
)

func file_irismod_htlc_htlc_proto_rawDescGZIP() []byte {
	file_irismod_htlc_htlc_proto_rawDescOnce.Do(func() {
		file_irismod_htlc_htlc_proto_rawDescData = protoimpl.X.CompressGZIP(file_irismod_htlc_htlc_proto_rawDescData)
	})
	return file_irismod_htlc_htlc_proto_rawDescData
}

var file_irismod_htlc_htlc_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_irismod_htlc_htlc_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_irismod_htlc_htlc_proto_goTypes = []interface{}{
	(HTLCState)(0),              // 0: irismod.htlc.HTLCState
	(SwapDirection)(0),          // 1: irismod.htlc.SwapDirection
	(*HTLC)(nil),                // 2: irismod.htlc.HTLC
	(*AssetSupply)(nil),         // 3: irismod.htlc.AssetSupply
	(*Params)(nil),              // 4: irismod.htlc.Params
	(*AssetParam)(nil),          // 5: irismod.htlc.AssetParam
	(*SupplyLimit)(nil),         // 6: irismod.htlc.SupplyLimit
	(*v1beta1.Coin)(nil),        // 7: cosmos.base.v1beta1.Coin
	(*durationpb.Duration)(nil), // 8: google.protobuf.Duration
}
var file_irismod_htlc_htlc_proto_depIdxs = []int32{
	7,  // 0: irismod.htlc.HTLC.amount:type_name -> cosmos.base.v1beta1.Coin
	0,  // 1: irismod.htlc.HTLC.state:type_name -> irismod.htlc.HTLCState
	1,  // 2: irismod.htlc.HTLC.direction:type_name -> irismod.htlc.SwapDirection
	7,  // 3: irismod.htlc.AssetSupply.incoming_supply:type_name -> cosmos.base.v1beta1.Coin
	7,  // 4: irismod.htlc.AssetSupply.outgoing_supply:type_name -> cosmos.base.v1beta1.Coin
	7,  // 5: irismod.htlc.AssetSupply.current_supply:type_name -> cosmos.base.v1beta1.Coin
	7,  // 6: irismod.htlc.AssetSupply.time_limited_current_supply:type_name -> cosmos.base.v1beta1.Coin
	8,  // 7: irismod.htlc.AssetSupply.time_elapsed:type_name -> google.protobuf.Duration
	5,  // 8: irismod.htlc.Params.asset_params:type_name -> irismod.htlc.AssetParam
	6,  // 9: irismod.htlc.AssetParam.supply_limit:type_name -> irismod.htlc.SupplyLimit
	8,  // 10: irismod.htlc.SupplyLimit.time_period:type_name -> google.protobuf.Duration
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_irismod_htlc_htlc_proto_init() }
func file_irismod_htlc_htlc_proto_init() {
	if File_irismod_htlc_htlc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_irismod_htlc_htlc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTLC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_irismod_htlc_htlc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetSupply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_irismod_htlc_htlc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Params); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_irismod_htlc_htlc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_irismod_htlc_htlc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupplyLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_irismod_htlc_htlc_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_irismod_htlc_htlc_proto_goTypes,
		DependencyIndexes: file_irismod_htlc_htlc_proto_depIdxs,
		EnumInfos:         file_irismod_htlc_htlc_proto_enumTypes,
		MessageInfos:      file_irismod_htlc_htlc_proto_msgTypes,
	}.Build()
	File_irismod_htlc_htlc_proto = out.File
	file_irismod_htlc_htlc_proto_rawDesc = nil
	file_irismod_htlc_htlc_proto_goTypes = nil
	file_irismod_htlc_htlc_proto_depIdxs = nil
}
