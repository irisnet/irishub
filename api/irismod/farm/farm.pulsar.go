// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package farm

import (
	v1beta1 "cosmossdk.io/api/cosmos/base/v1beta1"
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var _ protoreflect.List = (*_FarmPool_9_list)(nil)

type _FarmPool_9_list struct {
	list *[]*RewardRule
}

func (x *_FarmPool_9_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_FarmPool_9_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_FarmPool_9_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*RewardRule)
	(*x.list)[i] = concreteValue
}

func (x *_FarmPool_9_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*RewardRule)
	*x.list = append(*x.list, concreteValue)
}

func (x *_FarmPool_9_list) AppendMutable() protoreflect.Value {
	v := new(RewardRule)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_FarmPool_9_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_FarmPool_9_list) NewElement() protoreflect.Value {
	v := new(RewardRule)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_FarmPool_9_list) IsValid() bool {
	return x.list != nil
}

var (
	md_FarmPool                           protoreflect.MessageDescriptor
	fd_FarmPool_id                        protoreflect.FieldDescriptor
	fd_FarmPool_creator                   protoreflect.FieldDescriptor
	fd_FarmPool_description               protoreflect.FieldDescriptor
	fd_FarmPool_start_height              protoreflect.FieldDescriptor
	fd_FarmPool_end_height                protoreflect.FieldDescriptor
	fd_FarmPool_last_height_distr_rewards protoreflect.FieldDescriptor
	fd_FarmPool_editable                  protoreflect.FieldDescriptor
	fd_FarmPool_total_lpt_locked          protoreflect.FieldDescriptor
	fd_FarmPool_rules                     protoreflect.FieldDescriptor
)

func init() {
	file_irismod_farm_farm_proto_init()
	md_FarmPool = File_irismod_farm_farm_proto.Messages().ByName("FarmPool")
	fd_FarmPool_id = md_FarmPool.Fields().ByName("id")
	fd_FarmPool_creator = md_FarmPool.Fields().ByName("creator")
	fd_FarmPool_description = md_FarmPool.Fields().ByName("description")
	fd_FarmPool_start_height = md_FarmPool.Fields().ByName("start_height")
	fd_FarmPool_end_height = md_FarmPool.Fields().ByName("end_height")
	fd_FarmPool_last_height_distr_rewards = md_FarmPool.Fields().ByName("last_height_distr_rewards")
	fd_FarmPool_editable = md_FarmPool.Fields().ByName("editable")
	fd_FarmPool_total_lpt_locked = md_FarmPool.Fields().ByName("total_lpt_locked")
	fd_FarmPool_rules = md_FarmPool.Fields().ByName("rules")
}

var _ protoreflect.Message = (*fastReflection_FarmPool)(nil)

type fastReflection_FarmPool FarmPool

func (x *FarmPool) ProtoReflect() protoreflect.Message {
	return (*fastReflection_FarmPool)(x)
}

func (x *FarmPool) slowProtoReflect() protoreflect.Message {
	mi := &file_irismod_farm_farm_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_FarmPool_messageType fastReflection_FarmPool_messageType
var _ protoreflect.MessageType = fastReflection_FarmPool_messageType{}

type fastReflection_FarmPool_messageType struct{}

func (x fastReflection_FarmPool_messageType) Zero() protoreflect.Message {
	return (*fastReflection_FarmPool)(nil)
}
func (x fastReflection_FarmPool_messageType) New() protoreflect.Message {
	return new(fastReflection_FarmPool)
}
func (x fastReflection_FarmPool_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_FarmPool
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_FarmPool) Descriptor() protoreflect.MessageDescriptor {
	return md_FarmPool
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_FarmPool) Type() protoreflect.MessageType {
	return _fastReflection_FarmPool_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_FarmPool) New() protoreflect.Message {
	return new(fastReflection_FarmPool)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_FarmPool) Interface() protoreflect.ProtoMessage {
	return (*FarmPool)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_FarmPool) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Id != "" {
		value := protoreflect.ValueOfString(x.Id)
		if !f(fd_FarmPool_id, value) {
			return
		}
	}
	if x.Creator != "" {
		value := protoreflect.ValueOfString(x.Creator)
		if !f(fd_FarmPool_creator, value) {
			return
		}
	}
	if x.Description != "" {
		value := protoreflect.ValueOfString(x.Description)
		if !f(fd_FarmPool_description, value) {
			return
		}
	}
	if x.StartHeight != int64(0) {
		value := protoreflect.ValueOfInt64(x.StartHeight)
		if !f(fd_FarmPool_start_height, value) {
			return
		}
	}
	if x.EndHeight != int64(0) {
		value := protoreflect.ValueOfInt64(x.EndHeight)
		if !f(fd_FarmPool_end_height, value) {
			return
		}
	}
	if x.LastHeightDistrRewards != int64(0) {
		value := protoreflect.ValueOfInt64(x.LastHeightDistrRewards)
		if !f(fd_FarmPool_last_height_distr_rewards, value) {
			return
		}
	}
	if x.Editable != false {
		value := protoreflect.ValueOfBool(x.Editable)
		if !f(fd_FarmPool_editable, value) {
			return
		}
	}
	if x.TotalLptLocked != nil {
		value := protoreflect.ValueOfMessage(x.TotalLptLocked.ProtoReflect())
		if !f(fd_FarmPool_total_lpt_locked, value) {
			return
		}
	}
	if len(x.Rules) != 0 {
		value := protoreflect.ValueOfList(&_FarmPool_9_list{list: &x.Rules})
		if !f(fd_FarmPool_rules, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_FarmPool) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "irismod.farm.FarmPool.id":
		return x.Id != ""
	case "irismod.farm.FarmPool.creator":
		return x.Creator != ""
	case "irismod.farm.FarmPool.description":
		return x.Description != ""
	case "irismod.farm.FarmPool.start_height":
		return x.StartHeight != int64(0)
	case "irismod.farm.FarmPool.end_height":
		return x.EndHeight != int64(0)
	case "irismod.farm.FarmPool.last_height_distr_rewards":
		return x.LastHeightDistrRewards != int64(0)
	case "irismod.farm.FarmPool.editable":
		return x.Editable != false
	case "irismod.farm.FarmPool.total_lpt_locked":
		return x.TotalLptLocked != nil
	case "irismod.farm.FarmPool.rules":
		return len(x.Rules) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: irismod.farm.FarmPool"))
		}
		panic(fmt.Errorf("message irismod.farm.FarmPool does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_FarmPool) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "irismod.farm.FarmPool.id":
		x.Id = ""
	case "irismod.farm.FarmPool.creator":
		x.Creator = ""
	case "irismod.farm.FarmPool.description":
		x.Description = ""
	case "irismod.farm.FarmPool.start_height":
		x.StartHeight = int64(0)
	case "irismod.farm.FarmPool.end_height":
		x.EndHeight = int64(0)
	case "irismod.farm.FarmPool.last_height_distr_rewards":
		x.LastHeightDistrRewards = int64(0)
	case "irismod.farm.FarmPool.editable":
		x.Editable = false
	case "irismod.farm.FarmPool.total_lpt_locked":
		x.TotalLptLocked = nil
	case "irismod.farm.FarmPool.rules":
		x.Rules = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: irismod.farm.FarmPool"))
		}
		panic(fmt.Errorf("message irismod.farm.FarmPool does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_FarmPool) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "irismod.farm.FarmPool.id":
		value := x.Id
		return protoreflect.ValueOfString(value)
	case "irismod.farm.FarmPool.creator":
		value := x.Creator
		return protoreflect.ValueOfString(value)
	case "irismod.farm.FarmPool.description":
		value := x.Description
		return protoreflect.ValueOfString(value)
	case "irismod.farm.FarmPool.start_height":
		value := x.StartHeight
		return protoreflect.ValueOfInt64(value)
	case "irismod.farm.FarmPool.end_height":
		value := x.EndHeight
		return protoreflect.ValueOfInt64(value)
	case "irismod.farm.FarmPool.last_height_distr_rewards":
		value := x.LastHeightDistrRewards
		return protoreflect.ValueOfInt64(value)
	case "irismod.farm.FarmPool.editable":
		value := x.Editable
		return protoreflect.ValueOfBool(value)
	case "irismod.farm.FarmPool.total_lpt_locked":
		value := x.TotalLptLocked
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "irismod.farm.FarmPool.rules":
		if len(x.Rules) == 0 {
			return protoreflect.ValueOfList(&_FarmPool_9_list{})
		}
		listValue := &_FarmPool_9_list{list: &x.Rules}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: irismod.farm.FarmPool"))
		}
		panic(fmt.Errorf("message irismod.farm.FarmPool does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_FarmPool) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "irismod.farm.FarmPool.id":
		x.Id = value.Interface().(string)
	case "irismod.farm.FarmPool.creator":
		x.Creator = value.Interface().(string)
	case "irismod.farm.FarmPool.description":
		x.Description = value.Interface().(string)
	case "irismod.farm.FarmPool.start_height":
		x.StartHeight = value.Int()
	case "irismod.farm.FarmPool.end_height":
		x.EndHeight = value.Int()
	case "irismod.farm.FarmPool.last_height_distr_rewards":
		x.LastHeightDistrRewards = value.Int()
	case "irismod.farm.FarmPool.editable":
		x.Editable = value.Bool()
	case "irismod.farm.FarmPool.total_lpt_locked":
		x.TotalLptLocked = value.Message().Interface().(*v1beta1.Coin)
	case "irismod.farm.FarmPool.rules":
		lv := value.List()
		clv := lv.(*_FarmPool_9_list)
		x.Rules = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: irismod.farm.FarmPool"))
		}
		panic(fmt.Errorf("message irismod.farm.FarmPool does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_FarmPool) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "irismod.farm.FarmPool.total_lpt_locked":
		if x.TotalLptLocked == nil {
			x.TotalLptLocked = new(v1beta1.Coin)
		}
		return protoreflect.ValueOfMessage(x.TotalLptLocked.ProtoReflect())
	case "irismod.farm.FarmPool.rules":
		if x.Rules == nil {
			x.Rules = []*RewardRule{}
		}
		value := &_FarmPool_9_list{list: &x.Rules}
		return protoreflect.ValueOfList(value)
	case "irismod.farm.FarmPool.id":
		panic(fmt.Errorf("field id of message irismod.farm.FarmPool is not mutable"))
	case "irismod.farm.FarmPool.creator":
		panic(fmt.Errorf("field creator of message irismod.farm.FarmPool is not mutable"))
	case "irismod.farm.FarmPool.description":
		panic(fmt.Errorf("field description of message irismod.farm.FarmPool is not mutable"))
	case "irismod.farm.FarmPool.start_height":
		panic(fmt.Errorf("field start_height of message irismod.farm.FarmPool is not mutable"))
	case "irismod.farm.FarmPool.end_height":
		panic(fmt.Errorf("field end_height of message irismod.farm.FarmPool is not mutable"))
	case "irismod.farm.FarmPool.last_height_distr_rewards":
		panic(fmt.Errorf("field last_height_distr_rewards of message irismod.farm.FarmPool is not mutable"))
	case "irismod.farm.FarmPool.editable":
		panic(fmt.Errorf("field editable of message irismod.farm.FarmPool is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: irismod.farm.FarmPool"))
		}
		panic(fmt.Errorf("message irismod.farm.FarmPool does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_FarmPool) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "irismod.farm.FarmPool.id":
		return protoreflect.ValueOfString("")
	case "irismod.farm.FarmPool.creator":
		return protoreflect.ValueOfString("")
	case "irismod.farm.FarmPool.description":
		return protoreflect.ValueOfString("")
	case "irismod.farm.FarmPool.start_height":
		return protoreflect.ValueOfInt64(int64(0))
	case "irismod.farm.FarmPool.end_height":
		return protoreflect.ValueOfInt64(int64(0))
	case "irismod.farm.FarmPool.last_height_distr_rewards":
		return protoreflect.ValueOfInt64(int64(0))
	case "irismod.farm.FarmPool.editable":
		return protoreflect.ValueOfBool(false)
	case "irismod.farm.FarmPool.total_lpt_locked":
		m := new(v1beta1.Coin)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "irismod.farm.FarmPool.rules":
		list := []*RewardRule{}
		return protoreflect.ValueOfList(&_FarmPool_9_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: irismod.farm.FarmPool"))
		}
		panic(fmt.Errorf("message irismod.farm.FarmPool does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_FarmPool) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in irismod.farm.FarmPool", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_FarmPool) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_FarmPool) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_FarmPool) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_FarmPool) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*FarmPool)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Id)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Creator)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Description)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.StartHeight != 0 {
			n += 1 + runtime.Sov(uint64(x.StartHeight))
		}
		if x.EndHeight != 0 {
			n += 1 + runtime.Sov(uint64(x.EndHeight))
		}
		if x.LastHeightDistrRewards != 0 {
			n += 1 + runtime.Sov(uint64(x.LastHeightDistrRewards))
		}
		if x.Editable {
			n += 2
		}
		if x.TotalLptLocked != nil {
			l = options.Size(x.TotalLptLocked)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.Rules) > 0 {
			for _, e := range x.Rules {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*FarmPool)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Rules) > 0 {
			for iNdEx := len(x.Rules) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Rules[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x4a
			}
		}
		if x.TotalLptLocked != nil {
			encoded, err := options.Marshal(x.TotalLptLocked)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x42
		}
		if x.Editable {
			i--
			if x.Editable {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x38
		}
		if x.LastHeightDistrRewards != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.LastHeightDistrRewards))
			i--
			dAtA[i] = 0x30
		}
		if x.EndHeight != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.EndHeight))
			i--
			dAtA[i] = 0x28
		}
		if x.StartHeight != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.StartHeight))
			i--
			dAtA[i] = 0x20
		}
		if len(x.Description) > 0 {
			i -= len(x.Description)
			copy(dAtA[i:], x.Description)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Description)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.Creator) > 0 {
			i -= len(x.Creator)
			copy(dAtA[i:], x.Creator)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Creator)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Id) > 0 {
			i -= len(x.Id)
			copy(dAtA[i:], x.Id)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Id)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*FarmPool)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: FarmPool: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: FarmPool: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Id = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Creator = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Description = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field StartHeight", wireType)
				}
				x.StartHeight = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.StartHeight |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EndHeight", wireType)
				}
				x.EndHeight = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.EndHeight |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LastHeightDistrRewards", wireType)
				}
				x.LastHeightDistrRewards = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.LastHeightDistrRewards |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 7:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Editable", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.Editable = bool(v != 0)
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TotalLptLocked", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.TotalLptLocked == nil {
					x.TotalLptLocked = &v1beta1.Coin{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.TotalLptLocked); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Rules", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Rules = append(x.Rules, &RewardRule{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Rules[len(x.Rules)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_RewardRule                  protoreflect.MessageDescriptor
	fd_RewardRule_reward           protoreflect.FieldDescriptor
	fd_RewardRule_total_reward     protoreflect.FieldDescriptor
	fd_RewardRule_remaining_reward protoreflect.FieldDescriptor
	fd_RewardRule_reward_per_block protoreflect.FieldDescriptor
	fd_RewardRule_reward_per_share protoreflect.FieldDescriptor
)

func init() {
	file_irismod_farm_farm_proto_init()
	md_RewardRule = File_irismod_farm_farm_proto.Messages().ByName("RewardRule")
	fd_RewardRule_reward = md_RewardRule.Fields().ByName("reward")
	fd_RewardRule_total_reward = md_RewardRule.Fields().ByName("total_reward")
	fd_RewardRule_remaining_reward = md_RewardRule.Fields().ByName("remaining_reward")
	fd_RewardRule_reward_per_block = md_RewardRule.Fields().ByName("reward_per_block")
	fd_RewardRule_reward_per_share = md_RewardRule.Fields().ByName("reward_per_share")
}

var _ protoreflect.Message = (*fastReflection_RewardRule)(nil)

type fastReflection_RewardRule RewardRule

func (x *RewardRule) ProtoReflect() protoreflect.Message {
	return (*fastReflection_RewardRule)(x)
}

func (x *RewardRule) slowProtoReflect() protoreflect.Message {
	mi := &file_irismod_farm_farm_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_RewardRule_messageType fastReflection_RewardRule_messageType
var _ protoreflect.MessageType = fastReflection_RewardRule_messageType{}

type fastReflection_RewardRule_messageType struct{}

func (x fastReflection_RewardRule_messageType) Zero() protoreflect.Message {
	return (*fastReflection_RewardRule)(nil)
}
func (x fastReflection_RewardRule_messageType) New() protoreflect.Message {
	return new(fastReflection_RewardRule)
}
func (x fastReflection_RewardRule_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_RewardRule
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_RewardRule) Descriptor() protoreflect.MessageDescriptor {
	return md_RewardRule
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_RewardRule) Type() protoreflect.MessageType {
	return _fastReflection_RewardRule_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_RewardRule) New() protoreflect.Message {
	return new(fastReflection_RewardRule)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_RewardRule) Interface() protoreflect.ProtoMessage {
	return (*RewardRule)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_RewardRule) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Reward != "" {
		value := protoreflect.ValueOfString(x.Reward)
		if !f(fd_RewardRule_reward, value) {
			return
		}
	}
	if x.TotalReward != "" {
		value := protoreflect.ValueOfString(x.TotalReward)
		if !f(fd_RewardRule_total_reward, value) {
			return
		}
	}
	if x.RemainingReward != "" {
		value := protoreflect.ValueOfString(x.RemainingReward)
		if !f(fd_RewardRule_remaining_reward, value) {
			return
		}
	}
	if x.RewardPerBlock != "" {
		value := protoreflect.ValueOfString(x.RewardPerBlock)
		if !f(fd_RewardRule_reward_per_block, value) {
			return
		}
	}
	if x.RewardPerShare != "" {
		value := protoreflect.ValueOfString(x.RewardPerShare)
		if !f(fd_RewardRule_reward_per_share, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_RewardRule) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "irismod.farm.RewardRule.reward":
		return x.Reward != ""
	case "irismod.farm.RewardRule.total_reward":
		return x.TotalReward != ""
	case "irismod.farm.RewardRule.remaining_reward":
		return x.RemainingReward != ""
	case "irismod.farm.RewardRule.reward_per_block":
		return x.RewardPerBlock != ""
	case "irismod.farm.RewardRule.reward_per_share":
		return x.RewardPerShare != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: irismod.farm.RewardRule"))
		}
		panic(fmt.Errorf("message irismod.farm.RewardRule does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RewardRule) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "irismod.farm.RewardRule.reward":
		x.Reward = ""
	case "irismod.farm.RewardRule.total_reward":
		x.TotalReward = ""
	case "irismod.farm.RewardRule.remaining_reward":
		x.RemainingReward = ""
	case "irismod.farm.RewardRule.reward_per_block":
		x.RewardPerBlock = ""
	case "irismod.farm.RewardRule.reward_per_share":
		x.RewardPerShare = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: irismod.farm.RewardRule"))
		}
		panic(fmt.Errorf("message irismod.farm.RewardRule does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_RewardRule) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "irismod.farm.RewardRule.reward":
		value := x.Reward
		return protoreflect.ValueOfString(value)
	case "irismod.farm.RewardRule.total_reward":
		value := x.TotalReward
		return protoreflect.ValueOfString(value)
	case "irismod.farm.RewardRule.remaining_reward":
		value := x.RemainingReward
		return protoreflect.ValueOfString(value)
	case "irismod.farm.RewardRule.reward_per_block":
		value := x.RewardPerBlock
		return protoreflect.ValueOfString(value)
	case "irismod.farm.RewardRule.reward_per_share":
		value := x.RewardPerShare
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: irismod.farm.RewardRule"))
		}
		panic(fmt.Errorf("message irismod.farm.RewardRule does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RewardRule) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "irismod.farm.RewardRule.reward":
		x.Reward = value.Interface().(string)
	case "irismod.farm.RewardRule.total_reward":
		x.TotalReward = value.Interface().(string)
	case "irismod.farm.RewardRule.remaining_reward":
		x.RemainingReward = value.Interface().(string)
	case "irismod.farm.RewardRule.reward_per_block":
		x.RewardPerBlock = value.Interface().(string)
	case "irismod.farm.RewardRule.reward_per_share":
		x.RewardPerShare = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: irismod.farm.RewardRule"))
		}
		panic(fmt.Errorf("message irismod.farm.RewardRule does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RewardRule) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "irismod.farm.RewardRule.reward":
		panic(fmt.Errorf("field reward of message irismod.farm.RewardRule is not mutable"))
	case "irismod.farm.RewardRule.total_reward":
		panic(fmt.Errorf("field total_reward of message irismod.farm.RewardRule is not mutable"))
	case "irismod.farm.RewardRule.remaining_reward":
		panic(fmt.Errorf("field remaining_reward of message irismod.farm.RewardRule is not mutable"))
	case "irismod.farm.RewardRule.reward_per_block":
		panic(fmt.Errorf("field reward_per_block of message irismod.farm.RewardRule is not mutable"))
	case "irismod.farm.RewardRule.reward_per_share":
		panic(fmt.Errorf("field reward_per_share of message irismod.farm.RewardRule is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: irismod.farm.RewardRule"))
		}
		panic(fmt.Errorf("message irismod.farm.RewardRule does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_RewardRule) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "irismod.farm.RewardRule.reward":
		return protoreflect.ValueOfString("")
	case "irismod.farm.RewardRule.total_reward":
		return protoreflect.ValueOfString("")
	case "irismod.farm.RewardRule.remaining_reward":
		return protoreflect.ValueOfString("")
	case "irismod.farm.RewardRule.reward_per_block":
		return protoreflect.ValueOfString("")
	case "irismod.farm.RewardRule.reward_per_share":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: irismod.farm.RewardRule"))
		}
		panic(fmt.Errorf("message irismod.farm.RewardRule does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_RewardRule) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in irismod.farm.RewardRule", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_RewardRule) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RewardRule) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_RewardRule) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_RewardRule) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*RewardRule)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Reward)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TotalReward)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.RemainingReward)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.RewardPerBlock)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.RewardPerShare)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*RewardRule)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.RewardPerShare) > 0 {
			i -= len(x.RewardPerShare)
			copy(dAtA[i:], x.RewardPerShare)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.RewardPerShare)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.RewardPerBlock) > 0 {
			i -= len(x.RewardPerBlock)
			copy(dAtA[i:], x.RewardPerBlock)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.RewardPerBlock)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.RemainingReward) > 0 {
			i -= len(x.RemainingReward)
			copy(dAtA[i:], x.RemainingReward)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.RemainingReward)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.TotalReward) > 0 {
			i -= len(x.TotalReward)
			copy(dAtA[i:], x.TotalReward)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TotalReward)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Reward) > 0 {
			i -= len(x.Reward)
			copy(dAtA[i:], x.Reward)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Reward)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*RewardRule)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: RewardRule: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: RewardRule: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Reward = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TotalReward", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TotalReward = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RemainingReward", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RemainingReward = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RewardPerBlock", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RewardPerBlock = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RewardPerShare", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RewardPerShare = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_FarmInfo_4_list)(nil)

type _FarmInfo_4_list struct {
	list *[]*v1beta1.Coin
}

func (x *_FarmInfo_4_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_FarmInfo_4_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_FarmInfo_4_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	(*x.list)[i] = concreteValue
}

func (x *_FarmInfo_4_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	*x.list = append(*x.list, concreteValue)
}

func (x *_FarmInfo_4_list) AppendMutable() protoreflect.Value {
	v := new(v1beta1.Coin)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_FarmInfo_4_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_FarmInfo_4_list) NewElement() protoreflect.Value {
	v := new(v1beta1.Coin)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_FarmInfo_4_list) IsValid() bool {
	return x.list != nil
}

var (
	md_FarmInfo             protoreflect.MessageDescriptor
	fd_FarmInfo_pool_id     protoreflect.FieldDescriptor
	fd_FarmInfo_address     protoreflect.FieldDescriptor
	fd_FarmInfo_locked      protoreflect.FieldDescriptor
	fd_FarmInfo_reward_debt protoreflect.FieldDescriptor
)

func init() {
	file_irismod_farm_farm_proto_init()
	md_FarmInfo = File_irismod_farm_farm_proto.Messages().ByName("FarmInfo")
	fd_FarmInfo_pool_id = md_FarmInfo.Fields().ByName("pool_id")
	fd_FarmInfo_address = md_FarmInfo.Fields().ByName("address")
	fd_FarmInfo_locked = md_FarmInfo.Fields().ByName("locked")
	fd_FarmInfo_reward_debt = md_FarmInfo.Fields().ByName("reward_debt")
}

var _ protoreflect.Message = (*fastReflection_FarmInfo)(nil)

type fastReflection_FarmInfo FarmInfo

func (x *FarmInfo) ProtoReflect() protoreflect.Message {
	return (*fastReflection_FarmInfo)(x)
}

func (x *FarmInfo) slowProtoReflect() protoreflect.Message {
	mi := &file_irismod_farm_farm_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_FarmInfo_messageType fastReflection_FarmInfo_messageType
var _ protoreflect.MessageType = fastReflection_FarmInfo_messageType{}

type fastReflection_FarmInfo_messageType struct{}

func (x fastReflection_FarmInfo_messageType) Zero() protoreflect.Message {
	return (*fastReflection_FarmInfo)(nil)
}
func (x fastReflection_FarmInfo_messageType) New() protoreflect.Message {
	return new(fastReflection_FarmInfo)
}
func (x fastReflection_FarmInfo_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_FarmInfo
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_FarmInfo) Descriptor() protoreflect.MessageDescriptor {
	return md_FarmInfo
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_FarmInfo) Type() protoreflect.MessageType {
	return _fastReflection_FarmInfo_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_FarmInfo) New() protoreflect.Message {
	return new(fastReflection_FarmInfo)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_FarmInfo) Interface() protoreflect.ProtoMessage {
	return (*FarmInfo)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_FarmInfo) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.PoolId != "" {
		value := protoreflect.ValueOfString(x.PoolId)
		if !f(fd_FarmInfo_pool_id, value) {
			return
		}
	}
	if x.Address != "" {
		value := protoreflect.ValueOfString(x.Address)
		if !f(fd_FarmInfo_address, value) {
			return
		}
	}
	if x.Locked != "" {
		value := protoreflect.ValueOfString(x.Locked)
		if !f(fd_FarmInfo_locked, value) {
			return
		}
	}
	if len(x.RewardDebt) != 0 {
		value := protoreflect.ValueOfList(&_FarmInfo_4_list{list: &x.RewardDebt})
		if !f(fd_FarmInfo_reward_debt, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_FarmInfo) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "irismod.farm.FarmInfo.pool_id":
		return x.PoolId != ""
	case "irismod.farm.FarmInfo.address":
		return x.Address != ""
	case "irismod.farm.FarmInfo.locked":
		return x.Locked != ""
	case "irismod.farm.FarmInfo.reward_debt":
		return len(x.RewardDebt) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: irismod.farm.FarmInfo"))
		}
		panic(fmt.Errorf("message irismod.farm.FarmInfo does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_FarmInfo) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "irismod.farm.FarmInfo.pool_id":
		x.PoolId = ""
	case "irismod.farm.FarmInfo.address":
		x.Address = ""
	case "irismod.farm.FarmInfo.locked":
		x.Locked = ""
	case "irismod.farm.FarmInfo.reward_debt":
		x.RewardDebt = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: irismod.farm.FarmInfo"))
		}
		panic(fmt.Errorf("message irismod.farm.FarmInfo does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_FarmInfo) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "irismod.farm.FarmInfo.pool_id":
		value := x.PoolId
		return protoreflect.ValueOfString(value)
	case "irismod.farm.FarmInfo.address":
		value := x.Address
		return protoreflect.ValueOfString(value)
	case "irismod.farm.FarmInfo.locked":
		value := x.Locked
		return protoreflect.ValueOfString(value)
	case "irismod.farm.FarmInfo.reward_debt":
		if len(x.RewardDebt) == 0 {
			return protoreflect.ValueOfList(&_FarmInfo_4_list{})
		}
		listValue := &_FarmInfo_4_list{list: &x.RewardDebt}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: irismod.farm.FarmInfo"))
		}
		panic(fmt.Errorf("message irismod.farm.FarmInfo does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_FarmInfo) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "irismod.farm.FarmInfo.pool_id":
		x.PoolId = value.Interface().(string)
	case "irismod.farm.FarmInfo.address":
		x.Address = value.Interface().(string)
	case "irismod.farm.FarmInfo.locked":
		x.Locked = value.Interface().(string)
	case "irismod.farm.FarmInfo.reward_debt":
		lv := value.List()
		clv := lv.(*_FarmInfo_4_list)
		x.RewardDebt = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: irismod.farm.FarmInfo"))
		}
		panic(fmt.Errorf("message irismod.farm.FarmInfo does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_FarmInfo) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "irismod.farm.FarmInfo.reward_debt":
		if x.RewardDebt == nil {
			x.RewardDebt = []*v1beta1.Coin{}
		}
		value := &_FarmInfo_4_list{list: &x.RewardDebt}
		return protoreflect.ValueOfList(value)
	case "irismod.farm.FarmInfo.pool_id":
		panic(fmt.Errorf("field pool_id of message irismod.farm.FarmInfo is not mutable"))
	case "irismod.farm.FarmInfo.address":
		panic(fmt.Errorf("field address of message irismod.farm.FarmInfo is not mutable"))
	case "irismod.farm.FarmInfo.locked":
		panic(fmt.Errorf("field locked of message irismod.farm.FarmInfo is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: irismod.farm.FarmInfo"))
		}
		panic(fmt.Errorf("message irismod.farm.FarmInfo does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_FarmInfo) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "irismod.farm.FarmInfo.pool_id":
		return protoreflect.ValueOfString("")
	case "irismod.farm.FarmInfo.address":
		return protoreflect.ValueOfString("")
	case "irismod.farm.FarmInfo.locked":
		return protoreflect.ValueOfString("")
	case "irismod.farm.FarmInfo.reward_debt":
		list := []*v1beta1.Coin{}
		return protoreflect.ValueOfList(&_FarmInfo_4_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: irismod.farm.FarmInfo"))
		}
		panic(fmt.Errorf("message irismod.farm.FarmInfo does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_FarmInfo) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in irismod.farm.FarmInfo", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_FarmInfo) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_FarmInfo) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_FarmInfo) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_FarmInfo) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*FarmInfo)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.PoolId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Address)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Locked)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.RewardDebt) > 0 {
			for _, e := range x.RewardDebt {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*FarmInfo)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.RewardDebt) > 0 {
			for iNdEx := len(x.RewardDebt) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.RewardDebt[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x22
			}
		}
		if len(x.Locked) > 0 {
			i -= len(x.Locked)
			copy(dAtA[i:], x.Locked)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Locked)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.Address) > 0 {
			i -= len(x.Address)
			copy(dAtA[i:], x.Address)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Address)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.PoolId) > 0 {
			i -= len(x.PoolId)
			copy(dAtA[i:], x.PoolId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.PoolId)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*FarmInfo)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: FarmInfo: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: FarmInfo: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PoolId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Address = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Locked", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Locked = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RewardDebt", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RewardDebt = append(x.RewardDebt, &v1beta1.Coin{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.RewardDebt[len(x.RewardDebt)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_Params                       protoreflect.MessageDescriptor
	fd_Params_pool_creation_fee     protoreflect.FieldDescriptor
	fd_Params_max_reward_categories protoreflect.FieldDescriptor
	fd_Params_tax_rate              protoreflect.FieldDescriptor
)

func init() {
	file_irismod_farm_farm_proto_init()
	md_Params = File_irismod_farm_farm_proto.Messages().ByName("Params")
	fd_Params_pool_creation_fee = md_Params.Fields().ByName("pool_creation_fee")
	fd_Params_max_reward_categories = md_Params.Fields().ByName("max_reward_categories")
	fd_Params_tax_rate = md_Params.Fields().ByName("tax_rate")
}

var _ protoreflect.Message = (*fastReflection_Params)(nil)

type fastReflection_Params Params

func (x *Params) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Params)(x)
}

func (x *Params) slowProtoReflect() protoreflect.Message {
	mi := &file_irismod_farm_farm_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Params_messageType fastReflection_Params_messageType
var _ protoreflect.MessageType = fastReflection_Params_messageType{}

type fastReflection_Params_messageType struct{}

func (x fastReflection_Params_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Params)(nil)
}
func (x fastReflection_Params_messageType) New() protoreflect.Message {
	return new(fastReflection_Params)
}
func (x fastReflection_Params_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Params
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Params) Descriptor() protoreflect.MessageDescriptor {
	return md_Params
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Params) Type() protoreflect.MessageType {
	return _fastReflection_Params_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Params) New() protoreflect.Message {
	return new(fastReflection_Params)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Params) Interface() protoreflect.ProtoMessage {
	return (*Params)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Params) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.PoolCreationFee != nil {
		value := protoreflect.ValueOfMessage(x.PoolCreationFee.ProtoReflect())
		if !f(fd_Params_pool_creation_fee, value) {
			return
		}
	}
	if x.MaxRewardCategories != uint32(0) {
		value := protoreflect.ValueOfUint32(x.MaxRewardCategories)
		if !f(fd_Params_max_reward_categories, value) {
			return
		}
	}
	if x.TaxRate != "" {
		value := protoreflect.ValueOfString(x.TaxRate)
		if !f(fd_Params_tax_rate, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Params) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "irismod.farm.Params.pool_creation_fee":
		return x.PoolCreationFee != nil
	case "irismod.farm.Params.max_reward_categories":
		return x.MaxRewardCategories != uint32(0)
	case "irismod.farm.Params.tax_rate":
		return x.TaxRate != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: irismod.farm.Params"))
		}
		panic(fmt.Errorf("message irismod.farm.Params does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "irismod.farm.Params.pool_creation_fee":
		x.PoolCreationFee = nil
	case "irismod.farm.Params.max_reward_categories":
		x.MaxRewardCategories = uint32(0)
	case "irismod.farm.Params.tax_rate":
		x.TaxRate = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: irismod.farm.Params"))
		}
		panic(fmt.Errorf("message irismod.farm.Params does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Params) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "irismod.farm.Params.pool_creation_fee":
		value := x.PoolCreationFee
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "irismod.farm.Params.max_reward_categories":
		value := x.MaxRewardCategories
		return protoreflect.ValueOfUint32(value)
	case "irismod.farm.Params.tax_rate":
		value := x.TaxRate
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: irismod.farm.Params"))
		}
		panic(fmt.Errorf("message irismod.farm.Params does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "irismod.farm.Params.pool_creation_fee":
		x.PoolCreationFee = value.Message().Interface().(*v1beta1.Coin)
	case "irismod.farm.Params.max_reward_categories":
		x.MaxRewardCategories = uint32(value.Uint())
	case "irismod.farm.Params.tax_rate":
		x.TaxRate = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: irismod.farm.Params"))
		}
		panic(fmt.Errorf("message irismod.farm.Params does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "irismod.farm.Params.pool_creation_fee":
		if x.PoolCreationFee == nil {
			x.PoolCreationFee = new(v1beta1.Coin)
		}
		return protoreflect.ValueOfMessage(x.PoolCreationFee.ProtoReflect())
	case "irismod.farm.Params.max_reward_categories":
		panic(fmt.Errorf("field max_reward_categories of message irismod.farm.Params is not mutable"))
	case "irismod.farm.Params.tax_rate":
		panic(fmt.Errorf("field tax_rate of message irismod.farm.Params is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: irismod.farm.Params"))
		}
		panic(fmt.Errorf("message irismod.farm.Params does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Params) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "irismod.farm.Params.pool_creation_fee":
		m := new(v1beta1.Coin)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "irismod.farm.Params.max_reward_categories":
		return protoreflect.ValueOfUint32(uint32(0))
	case "irismod.farm.Params.tax_rate":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: irismod.farm.Params"))
		}
		panic(fmt.Errorf("message irismod.farm.Params does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Params) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in irismod.farm.Params", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Params) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Params) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Params) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Params)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.PoolCreationFee != nil {
			l = options.Size(x.PoolCreationFee)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.MaxRewardCategories != 0 {
			n += 1 + runtime.Sov(uint64(x.MaxRewardCategories))
		}
		l = len(x.TaxRate)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Params)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.TaxRate) > 0 {
			i -= len(x.TaxRate)
			copy(dAtA[i:], x.TaxRate)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TaxRate)))
			i--
			dAtA[i] = 0x1a
		}
		if x.MaxRewardCategories != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MaxRewardCategories))
			i--
			dAtA[i] = 0x10
		}
		if x.PoolCreationFee != nil {
			encoded, err := options.Marshal(x.PoolCreationFee)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Params)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Params: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PoolCreationFee", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.PoolCreationFee == nil {
					x.PoolCreationFee = &v1beta1.Coin{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.PoolCreationFee); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaxRewardCategories", wireType)
				}
				x.MaxRewardCategories = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MaxRewardCategories |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TaxRate", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TaxRate = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_EscrowInfo_2_list)(nil)

type _EscrowInfo_2_list struct {
	list *[]*v1beta1.Coin
}

func (x *_EscrowInfo_2_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_EscrowInfo_2_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_EscrowInfo_2_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	(*x.list)[i] = concreteValue
}

func (x *_EscrowInfo_2_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	*x.list = append(*x.list, concreteValue)
}

func (x *_EscrowInfo_2_list) AppendMutable() protoreflect.Value {
	v := new(v1beta1.Coin)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_EscrowInfo_2_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_EscrowInfo_2_list) NewElement() protoreflect.Value {
	v := new(v1beta1.Coin)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_EscrowInfo_2_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_EscrowInfo_3_list)(nil)

type _EscrowInfo_3_list struct {
	list *[]*v1beta1.Coin
}

func (x *_EscrowInfo_3_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_EscrowInfo_3_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_EscrowInfo_3_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	(*x.list)[i] = concreteValue
}

func (x *_EscrowInfo_3_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	*x.list = append(*x.list, concreteValue)
}

func (x *_EscrowInfo_3_list) AppendMutable() protoreflect.Value {
	v := new(v1beta1.Coin)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_EscrowInfo_3_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_EscrowInfo_3_list) NewElement() protoreflect.Value {
	v := new(v1beta1.Coin)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_EscrowInfo_3_list) IsValid() bool {
	return x.list != nil
}

var (
	md_EscrowInfo                protoreflect.MessageDescriptor
	fd_EscrowInfo_proposer       protoreflect.FieldDescriptor
	fd_EscrowInfo_fund_applied   protoreflect.FieldDescriptor
	fd_EscrowInfo_fund_self_bond protoreflect.FieldDescriptor
	fd_EscrowInfo_proposal_id    protoreflect.FieldDescriptor
)

func init() {
	file_irismod_farm_farm_proto_init()
	md_EscrowInfo = File_irismod_farm_farm_proto.Messages().ByName("EscrowInfo")
	fd_EscrowInfo_proposer = md_EscrowInfo.Fields().ByName("proposer")
	fd_EscrowInfo_fund_applied = md_EscrowInfo.Fields().ByName("fund_applied")
	fd_EscrowInfo_fund_self_bond = md_EscrowInfo.Fields().ByName("fund_self_bond")
	fd_EscrowInfo_proposal_id = md_EscrowInfo.Fields().ByName("proposal_id")
}

var _ protoreflect.Message = (*fastReflection_EscrowInfo)(nil)

type fastReflection_EscrowInfo EscrowInfo

func (x *EscrowInfo) ProtoReflect() protoreflect.Message {
	return (*fastReflection_EscrowInfo)(x)
}

func (x *EscrowInfo) slowProtoReflect() protoreflect.Message {
	mi := &file_irismod_farm_farm_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_EscrowInfo_messageType fastReflection_EscrowInfo_messageType
var _ protoreflect.MessageType = fastReflection_EscrowInfo_messageType{}

type fastReflection_EscrowInfo_messageType struct{}

func (x fastReflection_EscrowInfo_messageType) Zero() protoreflect.Message {
	return (*fastReflection_EscrowInfo)(nil)
}
func (x fastReflection_EscrowInfo_messageType) New() protoreflect.Message {
	return new(fastReflection_EscrowInfo)
}
func (x fastReflection_EscrowInfo_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_EscrowInfo
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_EscrowInfo) Descriptor() protoreflect.MessageDescriptor {
	return md_EscrowInfo
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_EscrowInfo) Type() protoreflect.MessageType {
	return _fastReflection_EscrowInfo_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_EscrowInfo) New() protoreflect.Message {
	return new(fastReflection_EscrowInfo)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_EscrowInfo) Interface() protoreflect.ProtoMessage {
	return (*EscrowInfo)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_EscrowInfo) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Proposer != "" {
		value := protoreflect.ValueOfString(x.Proposer)
		if !f(fd_EscrowInfo_proposer, value) {
			return
		}
	}
	if len(x.FundApplied) != 0 {
		value := protoreflect.ValueOfList(&_EscrowInfo_2_list{list: &x.FundApplied})
		if !f(fd_EscrowInfo_fund_applied, value) {
			return
		}
	}
	if len(x.FundSelfBond) != 0 {
		value := protoreflect.ValueOfList(&_EscrowInfo_3_list{list: &x.FundSelfBond})
		if !f(fd_EscrowInfo_fund_self_bond, value) {
			return
		}
	}
	if x.ProposalId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.ProposalId)
		if !f(fd_EscrowInfo_proposal_id, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_EscrowInfo) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "irismod.farm.EscrowInfo.proposer":
		return x.Proposer != ""
	case "irismod.farm.EscrowInfo.fund_applied":
		return len(x.FundApplied) != 0
	case "irismod.farm.EscrowInfo.fund_self_bond":
		return len(x.FundSelfBond) != 0
	case "irismod.farm.EscrowInfo.proposal_id":
		return x.ProposalId != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: irismod.farm.EscrowInfo"))
		}
		panic(fmt.Errorf("message irismod.farm.EscrowInfo does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EscrowInfo) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "irismod.farm.EscrowInfo.proposer":
		x.Proposer = ""
	case "irismod.farm.EscrowInfo.fund_applied":
		x.FundApplied = nil
	case "irismod.farm.EscrowInfo.fund_self_bond":
		x.FundSelfBond = nil
	case "irismod.farm.EscrowInfo.proposal_id":
		x.ProposalId = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: irismod.farm.EscrowInfo"))
		}
		panic(fmt.Errorf("message irismod.farm.EscrowInfo does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_EscrowInfo) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "irismod.farm.EscrowInfo.proposer":
		value := x.Proposer
		return protoreflect.ValueOfString(value)
	case "irismod.farm.EscrowInfo.fund_applied":
		if len(x.FundApplied) == 0 {
			return protoreflect.ValueOfList(&_EscrowInfo_2_list{})
		}
		listValue := &_EscrowInfo_2_list{list: &x.FundApplied}
		return protoreflect.ValueOfList(listValue)
	case "irismod.farm.EscrowInfo.fund_self_bond":
		if len(x.FundSelfBond) == 0 {
			return protoreflect.ValueOfList(&_EscrowInfo_3_list{})
		}
		listValue := &_EscrowInfo_3_list{list: &x.FundSelfBond}
		return protoreflect.ValueOfList(listValue)
	case "irismod.farm.EscrowInfo.proposal_id":
		value := x.ProposalId
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: irismod.farm.EscrowInfo"))
		}
		panic(fmt.Errorf("message irismod.farm.EscrowInfo does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EscrowInfo) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "irismod.farm.EscrowInfo.proposer":
		x.Proposer = value.Interface().(string)
	case "irismod.farm.EscrowInfo.fund_applied":
		lv := value.List()
		clv := lv.(*_EscrowInfo_2_list)
		x.FundApplied = *clv.list
	case "irismod.farm.EscrowInfo.fund_self_bond":
		lv := value.List()
		clv := lv.(*_EscrowInfo_3_list)
		x.FundSelfBond = *clv.list
	case "irismod.farm.EscrowInfo.proposal_id":
		x.ProposalId = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: irismod.farm.EscrowInfo"))
		}
		panic(fmt.Errorf("message irismod.farm.EscrowInfo does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EscrowInfo) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "irismod.farm.EscrowInfo.fund_applied":
		if x.FundApplied == nil {
			x.FundApplied = []*v1beta1.Coin{}
		}
		value := &_EscrowInfo_2_list{list: &x.FundApplied}
		return protoreflect.ValueOfList(value)
	case "irismod.farm.EscrowInfo.fund_self_bond":
		if x.FundSelfBond == nil {
			x.FundSelfBond = []*v1beta1.Coin{}
		}
		value := &_EscrowInfo_3_list{list: &x.FundSelfBond}
		return protoreflect.ValueOfList(value)
	case "irismod.farm.EscrowInfo.proposer":
		panic(fmt.Errorf("field proposer of message irismod.farm.EscrowInfo is not mutable"))
	case "irismod.farm.EscrowInfo.proposal_id":
		panic(fmt.Errorf("field proposal_id of message irismod.farm.EscrowInfo is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: irismod.farm.EscrowInfo"))
		}
		panic(fmt.Errorf("message irismod.farm.EscrowInfo does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_EscrowInfo) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "irismod.farm.EscrowInfo.proposer":
		return protoreflect.ValueOfString("")
	case "irismod.farm.EscrowInfo.fund_applied":
		list := []*v1beta1.Coin{}
		return protoreflect.ValueOfList(&_EscrowInfo_2_list{list: &list})
	case "irismod.farm.EscrowInfo.fund_self_bond":
		list := []*v1beta1.Coin{}
		return protoreflect.ValueOfList(&_EscrowInfo_3_list{list: &list})
	case "irismod.farm.EscrowInfo.proposal_id":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: irismod.farm.EscrowInfo"))
		}
		panic(fmt.Errorf("message irismod.farm.EscrowInfo does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_EscrowInfo) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in irismod.farm.EscrowInfo", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_EscrowInfo) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EscrowInfo) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_EscrowInfo) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_EscrowInfo) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*EscrowInfo)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Proposer)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.FundApplied) > 0 {
			for _, e := range x.FundApplied {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.FundSelfBond) > 0 {
			for _, e := range x.FundSelfBond {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.ProposalId != 0 {
			n += 1 + runtime.Sov(uint64(x.ProposalId))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*EscrowInfo)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.ProposalId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ProposalId))
			i--
			dAtA[i] = 0x20
		}
		if len(x.FundSelfBond) > 0 {
			for iNdEx := len(x.FundSelfBond) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.FundSelfBond[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x1a
			}
		}
		if len(x.FundApplied) > 0 {
			for iNdEx := len(x.FundApplied) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.FundApplied[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x12
			}
		}
		if len(x.Proposer) > 0 {
			i -= len(x.Proposer)
			copy(dAtA[i:], x.Proposer)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Proposer)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*EscrowInfo)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: EscrowInfo: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: EscrowInfo: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Proposer = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FundApplied", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.FundApplied = append(x.FundApplied, &v1beta1.Coin{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.FundApplied[len(x.FundApplied)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FundSelfBond", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.FundSelfBond = append(x.FundSelfBond, &v1beta1.Coin{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.FundSelfBond[len(x.FundSelfBond)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ProposalId", wireType)
				}
				x.ProposalId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ProposalId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_CommunityPoolCreateFarmProposal_5_list)(nil)

type _CommunityPoolCreateFarmProposal_5_list struct {
	list *[]*v1beta1.Coin
}

func (x *_CommunityPoolCreateFarmProposal_5_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_CommunityPoolCreateFarmProposal_5_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_CommunityPoolCreateFarmProposal_5_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	(*x.list)[i] = concreteValue
}

func (x *_CommunityPoolCreateFarmProposal_5_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	*x.list = append(*x.list, concreteValue)
}

func (x *_CommunityPoolCreateFarmProposal_5_list) AppendMutable() protoreflect.Value {
	v := new(v1beta1.Coin)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_CommunityPoolCreateFarmProposal_5_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_CommunityPoolCreateFarmProposal_5_list) NewElement() protoreflect.Value {
	v := new(v1beta1.Coin)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_CommunityPoolCreateFarmProposal_5_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_CommunityPoolCreateFarmProposal_6_list)(nil)

type _CommunityPoolCreateFarmProposal_6_list struct {
	list *[]*v1beta1.Coin
}

func (x *_CommunityPoolCreateFarmProposal_6_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_CommunityPoolCreateFarmProposal_6_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_CommunityPoolCreateFarmProposal_6_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	(*x.list)[i] = concreteValue
}

func (x *_CommunityPoolCreateFarmProposal_6_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	*x.list = append(*x.list, concreteValue)
}

func (x *_CommunityPoolCreateFarmProposal_6_list) AppendMutable() protoreflect.Value {
	v := new(v1beta1.Coin)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_CommunityPoolCreateFarmProposal_6_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_CommunityPoolCreateFarmProposal_6_list) NewElement() protoreflect.Value {
	v := new(v1beta1.Coin)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_CommunityPoolCreateFarmProposal_6_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_CommunityPoolCreateFarmProposal_7_list)(nil)

type _CommunityPoolCreateFarmProposal_7_list struct {
	list *[]*v1beta1.Coin
}

func (x *_CommunityPoolCreateFarmProposal_7_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_CommunityPoolCreateFarmProposal_7_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_CommunityPoolCreateFarmProposal_7_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	(*x.list)[i] = concreteValue
}

func (x *_CommunityPoolCreateFarmProposal_7_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	*x.list = append(*x.list, concreteValue)
}

func (x *_CommunityPoolCreateFarmProposal_7_list) AppendMutable() protoreflect.Value {
	v := new(v1beta1.Coin)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_CommunityPoolCreateFarmProposal_7_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_CommunityPoolCreateFarmProposal_7_list) NewElement() protoreflect.Value {
	v := new(v1beta1.Coin)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_CommunityPoolCreateFarmProposal_7_list) IsValid() bool {
	return x.list != nil
}

var (
	md_CommunityPoolCreateFarmProposal                  protoreflect.MessageDescriptor
	fd_CommunityPoolCreateFarmProposal_title            protoreflect.FieldDescriptor
	fd_CommunityPoolCreateFarmProposal_description      protoreflect.FieldDescriptor
	fd_CommunityPoolCreateFarmProposal_pool_description protoreflect.FieldDescriptor
	fd_CommunityPoolCreateFarmProposal_lpt_denom        protoreflect.FieldDescriptor
	fd_CommunityPoolCreateFarmProposal_reward_per_block protoreflect.FieldDescriptor
	fd_CommunityPoolCreateFarmProposal_fund_applied     protoreflect.FieldDescriptor
	fd_CommunityPoolCreateFarmProposal_fund_self_bond   protoreflect.FieldDescriptor
)

func init() {
	file_irismod_farm_farm_proto_init()
	md_CommunityPoolCreateFarmProposal = File_irismod_farm_farm_proto.Messages().ByName("CommunityPoolCreateFarmProposal")
	fd_CommunityPoolCreateFarmProposal_title = md_CommunityPoolCreateFarmProposal.Fields().ByName("title")
	fd_CommunityPoolCreateFarmProposal_description = md_CommunityPoolCreateFarmProposal.Fields().ByName("description")
	fd_CommunityPoolCreateFarmProposal_pool_description = md_CommunityPoolCreateFarmProposal.Fields().ByName("pool_description")
	fd_CommunityPoolCreateFarmProposal_lpt_denom = md_CommunityPoolCreateFarmProposal.Fields().ByName("lpt_denom")
	fd_CommunityPoolCreateFarmProposal_reward_per_block = md_CommunityPoolCreateFarmProposal.Fields().ByName("reward_per_block")
	fd_CommunityPoolCreateFarmProposal_fund_applied = md_CommunityPoolCreateFarmProposal.Fields().ByName("fund_applied")
	fd_CommunityPoolCreateFarmProposal_fund_self_bond = md_CommunityPoolCreateFarmProposal.Fields().ByName("fund_self_bond")
}

var _ protoreflect.Message = (*fastReflection_CommunityPoolCreateFarmProposal)(nil)

type fastReflection_CommunityPoolCreateFarmProposal CommunityPoolCreateFarmProposal

func (x *CommunityPoolCreateFarmProposal) ProtoReflect() protoreflect.Message {
	return (*fastReflection_CommunityPoolCreateFarmProposal)(x)
}

func (x *CommunityPoolCreateFarmProposal) slowProtoReflect() protoreflect.Message {
	mi := &file_irismod_farm_farm_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_CommunityPoolCreateFarmProposal_messageType fastReflection_CommunityPoolCreateFarmProposal_messageType
var _ protoreflect.MessageType = fastReflection_CommunityPoolCreateFarmProposal_messageType{}

type fastReflection_CommunityPoolCreateFarmProposal_messageType struct{}

func (x fastReflection_CommunityPoolCreateFarmProposal_messageType) Zero() protoreflect.Message {
	return (*fastReflection_CommunityPoolCreateFarmProposal)(nil)
}
func (x fastReflection_CommunityPoolCreateFarmProposal_messageType) New() protoreflect.Message {
	return new(fastReflection_CommunityPoolCreateFarmProposal)
}
func (x fastReflection_CommunityPoolCreateFarmProposal_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_CommunityPoolCreateFarmProposal
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_CommunityPoolCreateFarmProposal) Descriptor() protoreflect.MessageDescriptor {
	return md_CommunityPoolCreateFarmProposal
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_CommunityPoolCreateFarmProposal) Type() protoreflect.MessageType {
	return _fastReflection_CommunityPoolCreateFarmProposal_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_CommunityPoolCreateFarmProposal) New() protoreflect.Message {
	return new(fastReflection_CommunityPoolCreateFarmProposal)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_CommunityPoolCreateFarmProposal) Interface() protoreflect.ProtoMessage {
	return (*CommunityPoolCreateFarmProposal)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_CommunityPoolCreateFarmProposal) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Title != "" {
		value := protoreflect.ValueOfString(x.Title)
		if !f(fd_CommunityPoolCreateFarmProposal_title, value) {
			return
		}
	}
	if x.Description != "" {
		value := protoreflect.ValueOfString(x.Description)
		if !f(fd_CommunityPoolCreateFarmProposal_description, value) {
			return
		}
	}
	if x.PoolDescription != "" {
		value := protoreflect.ValueOfString(x.PoolDescription)
		if !f(fd_CommunityPoolCreateFarmProposal_pool_description, value) {
			return
		}
	}
	if x.LptDenom != "" {
		value := protoreflect.ValueOfString(x.LptDenom)
		if !f(fd_CommunityPoolCreateFarmProposal_lpt_denom, value) {
			return
		}
	}
	if len(x.RewardPerBlock) != 0 {
		value := protoreflect.ValueOfList(&_CommunityPoolCreateFarmProposal_5_list{list: &x.RewardPerBlock})
		if !f(fd_CommunityPoolCreateFarmProposal_reward_per_block, value) {
			return
		}
	}
	if len(x.FundApplied) != 0 {
		value := protoreflect.ValueOfList(&_CommunityPoolCreateFarmProposal_6_list{list: &x.FundApplied})
		if !f(fd_CommunityPoolCreateFarmProposal_fund_applied, value) {
			return
		}
	}
	if len(x.FundSelfBond) != 0 {
		value := protoreflect.ValueOfList(&_CommunityPoolCreateFarmProposal_7_list{list: &x.FundSelfBond})
		if !f(fd_CommunityPoolCreateFarmProposal_fund_self_bond, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_CommunityPoolCreateFarmProposal) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "irismod.farm.CommunityPoolCreateFarmProposal.title":
		return x.Title != ""
	case "irismod.farm.CommunityPoolCreateFarmProposal.description":
		return x.Description != ""
	case "irismod.farm.CommunityPoolCreateFarmProposal.pool_description":
		return x.PoolDescription != ""
	case "irismod.farm.CommunityPoolCreateFarmProposal.lpt_denom":
		return x.LptDenom != ""
	case "irismod.farm.CommunityPoolCreateFarmProposal.reward_per_block":
		return len(x.RewardPerBlock) != 0
	case "irismod.farm.CommunityPoolCreateFarmProposal.fund_applied":
		return len(x.FundApplied) != 0
	case "irismod.farm.CommunityPoolCreateFarmProposal.fund_self_bond":
		return len(x.FundSelfBond) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: irismod.farm.CommunityPoolCreateFarmProposal"))
		}
		panic(fmt.Errorf("message irismod.farm.CommunityPoolCreateFarmProposal does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CommunityPoolCreateFarmProposal) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "irismod.farm.CommunityPoolCreateFarmProposal.title":
		x.Title = ""
	case "irismod.farm.CommunityPoolCreateFarmProposal.description":
		x.Description = ""
	case "irismod.farm.CommunityPoolCreateFarmProposal.pool_description":
		x.PoolDescription = ""
	case "irismod.farm.CommunityPoolCreateFarmProposal.lpt_denom":
		x.LptDenom = ""
	case "irismod.farm.CommunityPoolCreateFarmProposal.reward_per_block":
		x.RewardPerBlock = nil
	case "irismod.farm.CommunityPoolCreateFarmProposal.fund_applied":
		x.FundApplied = nil
	case "irismod.farm.CommunityPoolCreateFarmProposal.fund_self_bond":
		x.FundSelfBond = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: irismod.farm.CommunityPoolCreateFarmProposal"))
		}
		panic(fmt.Errorf("message irismod.farm.CommunityPoolCreateFarmProposal does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_CommunityPoolCreateFarmProposal) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "irismod.farm.CommunityPoolCreateFarmProposal.title":
		value := x.Title
		return protoreflect.ValueOfString(value)
	case "irismod.farm.CommunityPoolCreateFarmProposal.description":
		value := x.Description
		return protoreflect.ValueOfString(value)
	case "irismod.farm.CommunityPoolCreateFarmProposal.pool_description":
		value := x.PoolDescription
		return protoreflect.ValueOfString(value)
	case "irismod.farm.CommunityPoolCreateFarmProposal.lpt_denom":
		value := x.LptDenom
		return protoreflect.ValueOfString(value)
	case "irismod.farm.CommunityPoolCreateFarmProposal.reward_per_block":
		if len(x.RewardPerBlock) == 0 {
			return protoreflect.ValueOfList(&_CommunityPoolCreateFarmProposal_5_list{})
		}
		listValue := &_CommunityPoolCreateFarmProposal_5_list{list: &x.RewardPerBlock}
		return protoreflect.ValueOfList(listValue)
	case "irismod.farm.CommunityPoolCreateFarmProposal.fund_applied":
		if len(x.FundApplied) == 0 {
			return protoreflect.ValueOfList(&_CommunityPoolCreateFarmProposal_6_list{})
		}
		listValue := &_CommunityPoolCreateFarmProposal_6_list{list: &x.FundApplied}
		return protoreflect.ValueOfList(listValue)
	case "irismod.farm.CommunityPoolCreateFarmProposal.fund_self_bond":
		if len(x.FundSelfBond) == 0 {
			return protoreflect.ValueOfList(&_CommunityPoolCreateFarmProposal_7_list{})
		}
		listValue := &_CommunityPoolCreateFarmProposal_7_list{list: &x.FundSelfBond}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: irismod.farm.CommunityPoolCreateFarmProposal"))
		}
		panic(fmt.Errorf("message irismod.farm.CommunityPoolCreateFarmProposal does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CommunityPoolCreateFarmProposal) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "irismod.farm.CommunityPoolCreateFarmProposal.title":
		x.Title = value.Interface().(string)
	case "irismod.farm.CommunityPoolCreateFarmProposal.description":
		x.Description = value.Interface().(string)
	case "irismod.farm.CommunityPoolCreateFarmProposal.pool_description":
		x.PoolDescription = value.Interface().(string)
	case "irismod.farm.CommunityPoolCreateFarmProposal.lpt_denom":
		x.LptDenom = value.Interface().(string)
	case "irismod.farm.CommunityPoolCreateFarmProposal.reward_per_block":
		lv := value.List()
		clv := lv.(*_CommunityPoolCreateFarmProposal_5_list)
		x.RewardPerBlock = *clv.list
	case "irismod.farm.CommunityPoolCreateFarmProposal.fund_applied":
		lv := value.List()
		clv := lv.(*_CommunityPoolCreateFarmProposal_6_list)
		x.FundApplied = *clv.list
	case "irismod.farm.CommunityPoolCreateFarmProposal.fund_self_bond":
		lv := value.List()
		clv := lv.(*_CommunityPoolCreateFarmProposal_7_list)
		x.FundSelfBond = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: irismod.farm.CommunityPoolCreateFarmProposal"))
		}
		panic(fmt.Errorf("message irismod.farm.CommunityPoolCreateFarmProposal does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CommunityPoolCreateFarmProposal) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "irismod.farm.CommunityPoolCreateFarmProposal.reward_per_block":
		if x.RewardPerBlock == nil {
			x.RewardPerBlock = []*v1beta1.Coin{}
		}
		value := &_CommunityPoolCreateFarmProposal_5_list{list: &x.RewardPerBlock}
		return protoreflect.ValueOfList(value)
	case "irismod.farm.CommunityPoolCreateFarmProposal.fund_applied":
		if x.FundApplied == nil {
			x.FundApplied = []*v1beta1.Coin{}
		}
		value := &_CommunityPoolCreateFarmProposal_6_list{list: &x.FundApplied}
		return protoreflect.ValueOfList(value)
	case "irismod.farm.CommunityPoolCreateFarmProposal.fund_self_bond":
		if x.FundSelfBond == nil {
			x.FundSelfBond = []*v1beta1.Coin{}
		}
		value := &_CommunityPoolCreateFarmProposal_7_list{list: &x.FundSelfBond}
		return protoreflect.ValueOfList(value)
	case "irismod.farm.CommunityPoolCreateFarmProposal.title":
		panic(fmt.Errorf("field title of message irismod.farm.CommunityPoolCreateFarmProposal is not mutable"))
	case "irismod.farm.CommunityPoolCreateFarmProposal.description":
		panic(fmt.Errorf("field description of message irismod.farm.CommunityPoolCreateFarmProposal is not mutable"))
	case "irismod.farm.CommunityPoolCreateFarmProposal.pool_description":
		panic(fmt.Errorf("field pool_description of message irismod.farm.CommunityPoolCreateFarmProposal is not mutable"))
	case "irismod.farm.CommunityPoolCreateFarmProposal.lpt_denom":
		panic(fmt.Errorf("field lpt_denom of message irismod.farm.CommunityPoolCreateFarmProposal is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: irismod.farm.CommunityPoolCreateFarmProposal"))
		}
		panic(fmt.Errorf("message irismod.farm.CommunityPoolCreateFarmProposal does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_CommunityPoolCreateFarmProposal) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "irismod.farm.CommunityPoolCreateFarmProposal.title":
		return protoreflect.ValueOfString("")
	case "irismod.farm.CommunityPoolCreateFarmProposal.description":
		return protoreflect.ValueOfString("")
	case "irismod.farm.CommunityPoolCreateFarmProposal.pool_description":
		return protoreflect.ValueOfString("")
	case "irismod.farm.CommunityPoolCreateFarmProposal.lpt_denom":
		return protoreflect.ValueOfString("")
	case "irismod.farm.CommunityPoolCreateFarmProposal.reward_per_block":
		list := []*v1beta1.Coin{}
		return protoreflect.ValueOfList(&_CommunityPoolCreateFarmProposal_5_list{list: &list})
	case "irismod.farm.CommunityPoolCreateFarmProposal.fund_applied":
		list := []*v1beta1.Coin{}
		return protoreflect.ValueOfList(&_CommunityPoolCreateFarmProposal_6_list{list: &list})
	case "irismod.farm.CommunityPoolCreateFarmProposal.fund_self_bond":
		list := []*v1beta1.Coin{}
		return protoreflect.ValueOfList(&_CommunityPoolCreateFarmProposal_7_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: irismod.farm.CommunityPoolCreateFarmProposal"))
		}
		panic(fmt.Errorf("message irismod.farm.CommunityPoolCreateFarmProposal does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_CommunityPoolCreateFarmProposal) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in irismod.farm.CommunityPoolCreateFarmProposal", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_CommunityPoolCreateFarmProposal) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CommunityPoolCreateFarmProposal) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_CommunityPoolCreateFarmProposal) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_CommunityPoolCreateFarmProposal) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*CommunityPoolCreateFarmProposal)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Title)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Description)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.PoolDescription)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.LptDenom)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.RewardPerBlock) > 0 {
			for _, e := range x.RewardPerBlock {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.FundApplied) > 0 {
			for _, e := range x.FundApplied {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.FundSelfBond) > 0 {
			for _, e := range x.FundSelfBond {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*CommunityPoolCreateFarmProposal)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.FundSelfBond) > 0 {
			for iNdEx := len(x.FundSelfBond) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.FundSelfBond[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x3a
			}
		}
		if len(x.FundApplied) > 0 {
			for iNdEx := len(x.FundApplied) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.FundApplied[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x32
			}
		}
		if len(x.RewardPerBlock) > 0 {
			for iNdEx := len(x.RewardPerBlock) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.RewardPerBlock[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x2a
			}
		}
		if len(x.LptDenom) > 0 {
			i -= len(x.LptDenom)
			copy(dAtA[i:], x.LptDenom)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.LptDenom)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.PoolDescription) > 0 {
			i -= len(x.PoolDescription)
			copy(dAtA[i:], x.PoolDescription)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.PoolDescription)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.Description) > 0 {
			i -= len(x.Description)
			copy(dAtA[i:], x.Description)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Description)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Title) > 0 {
			i -= len(x.Title)
			copy(dAtA[i:], x.Title)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Title)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*CommunityPoolCreateFarmProposal)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: CommunityPoolCreateFarmProposal: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: CommunityPoolCreateFarmProposal: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Title = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Description = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PoolDescription", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PoolDescription = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LptDenom", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.LptDenom = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RewardPerBlock", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RewardPerBlock = append(x.RewardPerBlock, &v1beta1.Coin{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.RewardPerBlock[len(x.RewardPerBlock)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FundApplied", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.FundApplied = append(x.FundApplied, &v1beta1.Coin{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.FundApplied[len(x.FundApplied)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FundSelfBond", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.FundSelfBond = append(x.FundSelfBond, &v1beta1.Coin{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.FundSelfBond[len(x.FundSelfBond)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: irismod/farm/farm.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// FarmPool defines the properties of farm pool
type FarmPool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Creator                string        `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	Description            string        `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	StartHeight            int64         `protobuf:"varint,4,opt,name=start_height,json=startHeight,proto3" json:"start_height,omitempty"`
	EndHeight              int64         `protobuf:"varint,5,opt,name=end_height,json=endHeight,proto3" json:"end_height,omitempty"`
	LastHeightDistrRewards int64         `protobuf:"varint,6,opt,name=last_height_distr_rewards,json=lastHeightDistrRewards,proto3" json:"last_height_distr_rewards,omitempty"`
	Editable               bool          `protobuf:"varint,7,opt,name=editable,proto3" json:"editable,omitempty"`
	TotalLptLocked         *v1beta1.Coin `protobuf:"bytes,8,opt,name=total_lpt_locked,json=totalLptLocked,proto3" json:"total_lpt_locked,omitempty"`
	Rules                  []*RewardRule `protobuf:"bytes,9,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *FarmPool) Reset() {
	*x = FarmPool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_irismod_farm_farm_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FarmPool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FarmPool) ProtoMessage() {}

// Deprecated: Use FarmPool.ProtoReflect.Descriptor instead.
func (*FarmPool) Descriptor() ([]byte, []int) {
	return file_irismod_farm_farm_proto_rawDescGZIP(), []int{0}
}

func (x *FarmPool) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FarmPool) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *FarmPool) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FarmPool) GetStartHeight() int64 {
	if x != nil {
		return x.StartHeight
	}
	return 0
}

func (x *FarmPool) GetEndHeight() int64 {
	if x != nil {
		return x.EndHeight
	}
	return 0
}

func (x *FarmPool) GetLastHeightDistrRewards() int64 {
	if x != nil {
		return x.LastHeightDistrRewards
	}
	return 0
}

func (x *FarmPool) GetEditable() bool {
	if x != nil {
		return x.Editable
	}
	return false
}

func (x *FarmPool) GetTotalLptLocked() *v1beta1.Coin {
	if x != nil {
		return x.TotalLptLocked
	}
	return nil
}

func (x *FarmPool) GetRules() []*RewardRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

// RewardRule defines the properties of farm pool reward
type RewardRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reward          string `protobuf:"bytes,1,opt,name=reward,proto3" json:"reward,omitempty"`
	TotalReward     string `protobuf:"bytes,2,opt,name=total_reward,json=totalReward,proto3" json:"total_reward,omitempty"`
	RemainingReward string `protobuf:"bytes,3,opt,name=remaining_reward,json=remainingReward,proto3" json:"remaining_reward,omitempty"`
	RewardPerBlock  string `protobuf:"bytes,4,opt,name=reward_per_block,json=rewardPerBlock,proto3" json:"reward_per_block,omitempty"`
	RewardPerShare  string `protobuf:"bytes,5,opt,name=reward_per_share,json=rewardPerShare,proto3" json:"reward_per_share,omitempty"`
}

func (x *RewardRule) Reset() {
	*x = RewardRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_irismod_farm_farm_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardRule) ProtoMessage() {}

// Deprecated: Use RewardRule.ProtoReflect.Descriptor instead.
func (*RewardRule) Descriptor() ([]byte, []int) {
	return file_irismod_farm_farm_proto_rawDescGZIP(), []int{1}
}

func (x *RewardRule) GetReward() string {
	if x != nil {
		return x.Reward
	}
	return ""
}

func (x *RewardRule) GetTotalReward() string {
	if x != nil {
		return x.TotalReward
	}
	return ""
}

func (x *RewardRule) GetRemainingReward() string {
	if x != nil {
		return x.RemainingReward
	}
	return ""
}

func (x *RewardRule) GetRewardPerBlock() string {
	if x != nil {
		return x.RewardPerBlock
	}
	return ""
}

func (x *RewardRule) GetRewardPerShare() string {
	if x != nil {
		return x.RewardPerShare
	}
	return ""
}

// FarmInfo records the current information of the farm pool
type FarmInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PoolId     string          `protobuf:"bytes,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	Address    string          `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Locked     string          `protobuf:"bytes,3,opt,name=locked,proto3" json:"locked,omitempty"`
	RewardDebt []*v1beta1.Coin `protobuf:"bytes,4,rep,name=reward_debt,json=rewardDebt,proto3" json:"reward_debt,omitempty"`
}

func (x *FarmInfo) Reset() {
	*x = FarmInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_irismod_farm_farm_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FarmInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FarmInfo) ProtoMessage() {}

// Deprecated: Use FarmInfo.ProtoReflect.Descriptor instead.
func (*FarmInfo) Descriptor() ([]byte, []int) {
	return file_irismod_farm_farm_proto_rawDescGZIP(), []int{2}
}

func (x *FarmInfo) GetPoolId() string {
	if x != nil {
		return x.PoolId
	}
	return ""
}

func (x *FarmInfo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *FarmInfo) GetLocked() string {
	if x != nil {
		return x.Locked
	}
	return ""
}

func (x *FarmInfo) GetRewardDebt() []*v1beta1.Coin {
	if x != nil {
		return x.RewardDebt
	}
	return nil
}

// Params records the current params information of the farm pool
type Params struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PoolCreationFee     *v1beta1.Coin `protobuf:"bytes,1,opt,name=pool_creation_fee,json=poolCreationFee,proto3" json:"pool_creation_fee,omitempty"`
	MaxRewardCategories uint32        `protobuf:"varint,2,opt,name=max_reward_categories,json=maxRewardCategories,proto3" json:"max_reward_categories,omitempty"`
	TaxRate             string        `protobuf:"bytes,3,opt,name=tax_rate,json=taxRate,proto3" json:"tax_rate,omitempty"`
}

func (x *Params) Reset() {
	*x = Params{}
	if protoimpl.UnsafeEnabled {
		mi := &file_irismod_farm_farm_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Params) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Params) ProtoMessage() {}

// Deprecated: Use Params.ProtoReflect.Descriptor instead.
func (*Params) Descriptor() ([]byte, []int) {
	return file_irismod_farm_farm_proto_rawDescGZIP(), []int{3}
}

func (x *Params) GetPoolCreationFee() *v1beta1.Coin {
	if x != nil {
		return x.PoolCreationFee
	}
	return nil
}

func (x *Params) GetMaxRewardCategories() uint32 {
	if x != nil {
		return x.MaxRewardCategories
	}
	return 0
}

func (x *Params) GetTaxRate() string {
	if x != nil {
		return x.TaxRate
	}
	return ""
}

// EscrowInfo create delegate information for farm pool proposals
type EscrowInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proposer     string          `protobuf:"bytes,1,opt,name=proposer,proto3" json:"proposer,omitempty"`
	FundApplied  []*v1beta1.Coin `protobuf:"bytes,2,rep,name=fund_applied,json=fundApplied,proto3" json:"fund_applied,omitempty"`
	FundSelfBond []*v1beta1.Coin `protobuf:"bytes,3,rep,name=fund_self_bond,json=fundSelfBond,proto3" json:"fund_self_bond,omitempty"`
	ProposalId   uint64          `protobuf:"varint,4,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
}

func (x *EscrowInfo) Reset() {
	*x = EscrowInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_irismod_farm_farm_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EscrowInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EscrowInfo) ProtoMessage() {}

// Deprecated: Use EscrowInfo.ProtoReflect.Descriptor instead.
func (*EscrowInfo) Descriptor() ([]byte, []int) {
	return file_irismod_farm_farm_proto_rawDescGZIP(), []int{4}
}

func (x *EscrowInfo) GetProposer() string {
	if x != nil {
		return x.Proposer
	}
	return ""
}

func (x *EscrowInfo) GetFundApplied() []*v1beta1.Coin {
	if x != nil {
		return x.FundApplied
	}
	return nil
}

func (x *EscrowInfo) GetFundSelfBond() []*v1beta1.Coin {
	if x != nil {
		return x.FundSelfBond
	}
	return nil
}

func (x *EscrowInfo) GetProposalId() uint64 {
	if x != nil {
		return x.ProposalId
	}
	return 0
}

// CommunityPoolCreateFarmProposal is a gov Content type for creating a farm
// pool with community pool
type CommunityPoolCreateFarmProposal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title           string          `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description     string          `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	PoolDescription string          `protobuf:"bytes,3,opt,name=pool_description,json=poolDescription,proto3" json:"pool_description,omitempty"`
	LptDenom        string          `protobuf:"bytes,4,opt,name=lpt_denom,json=lptDenom,proto3" json:"lpt_denom,omitempty"`
	RewardPerBlock  []*v1beta1.Coin `protobuf:"bytes,5,rep,name=reward_per_block,json=rewardPerBlock,proto3" json:"reward_per_block,omitempty"`
	FundApplied     []*v1beta1.Coin `protobuf:"bytes,6,rep,name=fund_applied,json=fundApplied,proto3" json:"fund_applied,omitempty"`
	FundSelfBond    []*v1beta1.Coin `protobuf:"bytes,7,rep,name=fund_self_bond,json=fundSelfBond,proto3" json:"fund_self_bond,omitempty"`
}

func (x *CommunityPoolCreateFarmProposal) Reset() {
	*x = CommunityPoolCreateFarmProposal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_irismod_farm_farm_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommunityPoolCreateFarmProposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommunityPoolCreateFarmProposal) ProtoMessage() {}

// Deprecated: Use CommunityPoolCreateFarmProposal.ProtoReflect.Descriptor instead.
func (*CommunityPoolCreateFarmProposal) Descriptor() ([]byte, []int) {
	return file_irismod_farm_farm_proto_rawDescGZIP(), []int{5}
}

func (x *CommunityPoolCreateFarmProposal) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CommunityPoolCreateFarmProposal) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CommunityPoolCreateFarmProposal) GetPoolDescription() string {
	if x != nil {
		return x.PoolDescription
	}
	return ""
}

func (x *CommunityPoolCreateFarmProposal) GetLptDenom() string {
	if x != nil {
		return x.LptDenom
	}
	return ""
}

func (x *CommunityPoolCreateFarmProposal) GetRewardPerBlock() []*v1beta1.Coin {
	if x != nil {
		return x.RewardPerBlock
	}
	return nil
}

func (x *CommunityPoolCreateFarmProposal) GetFundApplied() []*v1beta1.Coin {
	if x != nil {
		return x.FundApplied
	}
	return nil
}

func (x *CommunityPoolCreateFarmProposal) GetFundSelfBond() []*v1beta1.Coin {
	if x != nil {
		return x.FundSelfBond
	}
	return nil
}

var File_irismod_farm_farm_proto protoreflect.FileDescriptor

var file_irismod_farm_farm_proto_rawDesc = []byte{
	0x0a, 0x17, 0x69, 0x72, 0x69, 0x73, 0x6d, 0x6f, 0x64, 0x2f, 0x66, 0x61, 0x72, 0x6d, 0x2f, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x69, 0x72, 0x69, 0x73, 0x6d,
	0x6f, 0x64, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x1a, 0x1e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f,
	0x62, 0x61, 0x73, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x63, 0x6f, 0x69,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa1, 0x03,
	0x0a, 0x08, 0x46, 0x61, 0x72, 0x6d, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x64,
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65,
	0x6e, 0x64, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x39, 0x0a, 0x19, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x5f, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x6c, 0x61, 0x73,
	0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x44, 0x69, 0x73, 0x74, 0x72, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x65, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x74, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6c, 0x70, 0x74, 0x5f, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x43, 0x6f, 0x69, 0x6e, 0x42, 0x2f, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x27, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x70, 0x74, 0x4c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69, 0x72, 0x69, 0x73, 0x6d, 0x6f, 0x64, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x04,
	0xc8, 0xde, 0x1f, 0x00, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x3a, 0x04, 0xe8, 0xa0, 0x1f,
	0x01, 0x22, 0x8c, 0x03, 0x0a, 0x0a, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x75, 0x6c, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x51, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e,
	0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x0b,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x59, 0x0a, 0x10, 0x72,
	0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x26, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x0f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x58, 0x0a, 0x10, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x5f, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x2e, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x52, 0x0e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x12, 0x58, 0x0a, 0x10, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xc8, 0xde, 0x1f, 0x00,
	0xda, 0xde, 0x1f, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b,
	0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x0e, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x50, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x3a, 0x04, 0xe8, 0xa0, 0x1f, 0x01,
	0x22, 0xf9, 0x01, 0x0a, 0x08, 0x46, 0x61, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a,
	0x07, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x46, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x2e, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x52, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x6c, 0x0a, 0x0b, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x5f, 0x64, 0x65, 0x62, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x30, 0xc8, 0xde, 0x1f, 0x00, 0xaa, 0xdf,
	0x1f, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x0a, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x44, 0x65, 0x62, 0x74, 0x3a, 0x04, 0xe8, 0xa0, 0x1f, 0x01, 0x22, 0x89, 0x02, 0x0a,
	0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x76, 0x0a, 0x11, 0x70, 0x6f, 0x6f, 0x6c, 0x5f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x2f, 0xc8,
	0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x27, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d,
	0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x0f,
	0x70, 0x6f, 0x6f, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x12,
	0x32, 0x0a, 0x15, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13,
	0x6d, 0x61, 0x78, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x08, 0x74, 0x61, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x26, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x07, 0x74, 0x61, 0x78, 0x52, 0x61, 0x74, 0x65, 0x3a, 0x08,
	0x98, 0xa0, 0x1f, 0x00, 0xe8, 0xa0, 0x1f, 0x01, 0x22, 0xda, 0x01, 0x0a, 0x0a, 0x45, 0x73, 0x63,
	0x72, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x0c, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x43, 0x6f, 0x69, 0x6e, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0b, 0x66, 0x75, 0x6e, 0x64,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x0e, 0x66, 0x75, 0x6e, 0x64, 0x5f,
	0x73, 0x65, 0x6c, 0x66, 0x5f, 0x62, 0x6f, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00,
	0x52, 0x0c, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x65, 0x6c, 0x66, 0x42, 0x6f, 0x6e, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x49, 0x64, 0x3a,
	0x04, 0xe8, 0xa0, 0x1f, 0x01, 0x22, 0x81, 0x03, 0x0a, 0x1f, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x50, 0x6f, 0x6f, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x61, 0x72,
	0x6d, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x6f, 0x6f,
	0x6c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09,
	0x6c, 0x70, 0x74, 0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6c, 0x70, 0x74, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x12, 0x49, 0x0a, 0x10, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x04,
	0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x65, 0x72, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x42, 0x0a, 0x0c, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0b, 0x66, 0x75, 0x6e,
	0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x0e, 0x66, 0x75, 0x6e, 0x64,
	0x5f, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x62, 0x6f, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x04, 0xc8, 0xde, 0x1f,
	0x00, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x65, 0x6c, 0x66, 0x42, 0x6f, 0x6e, 0x64, 0x3a,
	0x08, 0x98, 0xa0, 0x1f, 0x00, 0xe8, 0xa0, 0x1f, 0x01, 0x42, 0x95, 0x01, 0xc8, 0xe1, 0x1e, 0x00,
	0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x2e, 0x69, 0x72, 0x69, 0x73, 0x6d, 0x6f, 0x64, 0x2e, 0x66, 0x61,
	0x72, 0x6d, 0x42, 0x09, 0x46, 0x61, 0x72, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x21, 0x6d, 0x6f, 0x64, 0x73, 0x2e, 0x69, 0x72, 0x69, 0x73, 0x6e, 0x65, 0x74, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x72, 0x69, 0x73, 0x6d, 0x6f, 0x64, 0x2f, 0x66, 0x61,
	0x72, 0x6d, 0xa2, 0x02, 0x03, 0x49, 0x46, 0x58, 0xaa, 0x02, 0x0c, 0x49, 0x72, 0x69, 0x73, 0x6d,
	0x6f, 0x64, 0x2e, 0x46, 0x61, 0x72, 0x6d, 0xca, 0x02, 0x0c, 0x49, 0x72, 0x69, 0x73, 0x6d, 0x6f,
	0x64, 0x5c, 0x46, 0x61, 0x72, 0x6d, 0xe2, 0x02, 0x18, 0x49, 0x72, 0x69, 0x73, 0x6d, 0x6f, 0x64,
	0x5c, 0x46, 0x61, 0x72, 0x6d, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0xea, 0x02, 0x0d, 0x49, 0x72, 0x69, 0x73, 0x6d, 0x6f, 0x64, 0x3a, 0x3a, 0x46, 0x61, 0x72,
	0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_irismod_farm_farm_proto_rawDescOnce sync.Once
	file_irismod_farm_farm_proto_rawDescData = file_irismod_farm_farm_proto_rawDesc
)

func file_irismod_farm_farm_proto_rawDescGZIP() []byte {
	file_irismod_farm_farm_proto_rawDescOnce.Do(func() {
		file_irismod_farm_farm_proto_rawDescData = protoimpl.X.CompressGZIP(file_irismod_farm_farm_proto_rawDescData)
	})
	return file_irismod_farm_farm_proto_rawDescData
}

var file_irismod_farm_farm_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_irismod_farm_farm_proto_goTypes = []interface{}{
	(*FarmPool)(nil),                        // 0: irismod.farm.FarmPool
	(*RewardRule)(nil),                      // 1: irismod.farm.RewardRule
	(*FarmInfo)(nil),                        // 2: irismod.farm.FarmInfo
	(*Params)(nil),                          // 3: irismod.farm.Params
	(*EscrowInfo)(nil),                      // 4: irismod.farm.EscrowInfo
	(*CommunityPoolCreateFarmProposal)(nil), // 5: irismod.farm.CommunityPoolCreateFarmProposal
	(*v1beta1.Coin)(nil),                    // 6: cosmos.base.v1beta1.Coin
}
var file_irismod_farm_farm_proto_depIdxs = []int32{
	6, // 0: irismod.farm.FarmPool.total_lpt_locked:type_name -> cosmos.base.v1beta1.Coin
	1, // 1: irismod.farm.FarmPool.rules:type_name -> irismod.farm.RewardRule
	6, // 2: irismod.farm.FarmInfo.reward_debt:type_name -> cosmos.base.v1beta1.Coin
	6, // 3: irismod.farm.Params.pool_creation_fee:type_name -> cosmos.base.v1beta1.Coin
	6, // 4: irismod.farm.EscrowInfo.fund_applied:type_name -> cosmos.base.v1beta1.Coin
	6, // 5: irismod.farm.EscrowInfo.fund_self_bond:type_name -> cosmos.base.v1beta1.Coin
	6, // 6: irismod.farm.CommunityPoolCreateFarmProposal.reward_per_block:type_name -> cosmos.base.v1beta1.Coin
	6, // 7: irismod.farm.CommunityPoolCreateFarmProposal.fund_applied:type_name -> cosmos.base.v1beta1.Coin
	6, // 8: irismod.farm.CommunityPoolCreateFarmProposal.fund_self_bond:type_name -> cosmos.base.v1beta1.Coin
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_irismod_farm_farm_proto_init() }
func file_irismod_farm_farm_proto_init() {
	if File_irismod_farm_farm_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_irismod_farm_farm_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FarmPool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_irismod_farm_farm_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewardRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_irismod_farm_farm_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FarmInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_irismod_farm_farm_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Params); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_irismod_farm_farm_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EscrowInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_irismod_farm_farm_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommunityPoolCreateFarmProposal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_irismod_farm_farm_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_irismod_farm_farm_proto_goTypes,
		DependencyIndexes: file_irismod_farm_farm_proto_depIdxs,
		MessageInfos:      file_irismod_farm_farm_proto_msgTypes,
	}.Build()
	File_irismod_farm_farm_proto = out.File
	file_irismod_farm_farm_proto_rawDesc = nil
	file_irismod_farm_farm_proto_goTypes = nil
	file_irismod_farm_farm_proto_depIdxs = nil
}
