// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: irismod/oracle/query.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	types1 "mods.irisnet.org/modules/service/types"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryFeedRequest is request type for the Query/Feed RPC method
type QueryFeedRequest struct {
	FeedName string `protobuf:"bytes,1,opt,name=feed_name,json=feedName,proto3" json:"feed_name,omitempty"`
}

func (m *QueryFeedRequest) Reset()         { *m = QueryFeedRequest{} }
func (m *QueryFeedRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFeedRequest) ProtoMessage()    {}
func (*QueryFeedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3b9af8d00c3858e, []int{0}
}
func (m *QueryFeedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFeedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeedRequest.Merge(m, src)
}
func (m *QueryFeedRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeedRequest proto.InternalMessageInfo

func (m *QueryFeedRequest) GetFeedName() string {
	if m != nil {
		return m.FeedName
	}
	return ""
}

// QueryFeedResponse is response type for the Query/Feed RPC method
type QueryFeedResponse struct {
	Feed FeedContext `protobuf:"bytes,1,opt,name=feed,proto3" json:"feed"`
}

func (m *QueryFeedResponse) Reset()         { *m = QueryFeedResponse{} }
func (m *QueryFeedResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFeedResponse) ProtoMessage()    {}
func (*QueryFeedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3b9af8d00c3858e, []int{1}
}
func (m *QueryFeedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFeedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeedResponse.Merge(m, src)
}
func (m *QueryFeedResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeedResponse proto.InternalMessageInfo

func (m *QueryFeedResponse) GetFeed() FeedContext {
	if m != nil {
		return m.Feed
	}
	return FeedContext{}
}

// QueryFeedsRequest is request type for the Query/Feeds RPC method
type QueryFeedsRequest struct {
	State string `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	// pagination defines an optional pagination for the request
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryFeedsRequest) Reset()         { *m = QueryFeedsRequest{} }
func (m *QueryFeedsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFeedsRequest) ProtoMessage()    {}
func (*QueryFeedsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3b9af8d00c3858e, []int{2}
}
func (m *QueryFeedsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeedsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeedsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFeedsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeedsRequest.Merge(m, src)
}
func (m *QueryFeedsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeedsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeedsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeedsRequest proto.InternalMessageInfo

func (m *QueryFeedsRequest) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *QueryFeedsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryFeedsResponse is response type for the Query/Feeds RPC method
type QueryFeedsResponse struct {
	Feeds []FeedContext `protobuf:"bytes,1,rep,name=feeds,proto3" json:"feeds"`
	// pagination defines an optional pagination for the request
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryFeedsResponse) Reset()         { *m = QueryFeedsResponse{} }
func (m *QueryFeedsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFeedsResponse) ProtoMessage()    {}
func (*QueryFeedsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3b9af8d00c3858e, []int{3}
}
func (m *QueryFeedsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeedsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeedsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFeedsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeedsResponse.Merge(m, src)
}
func (m *QueryFeedsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeedsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeedsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeedsResponse proto.InternalMessageInfo

func (m *QueryFeedsResponse) GetFeeds() []FeedContext {
	if m != nil {
		return m.Feeds
	}
	return nil
}

func (m *QueryFeedsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryFeedValueRequest is request type for the Query/FeedValue RPC method
type QueryFeedValueRequest struct {
	FeedName string `protobuf:"bytes,1,opt,name=feed_name,json=feedName,proto3" json:"feed_name,omitempty"`
}

func (m *QueryFeedValueRequest) Reset()         { *m = QueryFeedValueRequest{} }
func (m *QueryFeedValueRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFeedValueRequest) ProtoMessage()    {}
func (*QueryFeedValueRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3b9af8d00c3858e, []int{4}
}
func (m *QueryFeedValueRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeedValueRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeedValueRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFeedValueRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeedValueRequest.Merge(m, src)
}
func (m *QueryFeedValueRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeedValueRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeedValueRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeedValueRequest proto.InternalMessageInfo

func (m *QueryFeedValueRequest) GetFeedName() string {
	if m != nil {
		return m.FeedName
	}
	return ""
}

// QueryFeedValueResponse is response type for the Query/FeedValue RPC method
type QueryFeedValueResponse struct {
	FeedValues []FeedValue `protobuf:"bytes,1,rep,name=feed_values,json=feedValues,proto3" json:"feed_values"`
}

func (m *QueryFeedValueResponse) Reset()         { *m = QueryFeedValueResponse{} }
func (m *QueryFeedValueResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFeedValueResponse) ProtoMessage()    {}
func (*QueryFeedValueResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3b9af8d00c3858e, []int{5}
}
func (m *QueryFeedValueResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeedValueResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeedValueResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFeedValueResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeedValueResponse.Merge(m, src)
}
func (m *QueryFeedValueResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeedValueResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeedValueResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeedValueResponse proto.InternalMessageInfo

func (m *QueryFeedValueResponse) GetFeedValues() []FeedValue {
	if m != nil {
		return m.FeedValues
	}
	return nil
}

// FeedContext defines the feed context struct
type FeedContext struct {
	Feed              *Feed                                    `protobuf:"bytes,1,opt,name=feed,proto3" json:"feed,omitempty"`
	ServiceName       string                                   `protobuf:"bytes,2,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty" yaml:"service_name"`
	Providers         []string                                 `protobuf:"bytes,3,rep,name=providers,proto3" json:"providers,omitempty"`
	Input             string                                   `protobuf:"bytes,4,opt,name=input,proto3" json:"input,omitempty"`
	Timeout           int64                                    `protobuf:"varint,5,opt,name=timeout,proto3" json:"timeout,omitempty"`
	ServiceFeeCap     github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,6,rep,name=service_fee_cap,json=serviceFeeCap,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"service_fee_cap" yaml:"service_fee_cap"`
	RepeatedFrequency uint64                                   `protobuf:"varint,7,opt,name=repeated_frequency,json=repeatedFrequency,proto3" json:"repeated_frequency,omitempty" yaml:"repeated_frequency"`
	ResponseThreshold uint32                                   `protobuf:"varint,8,opt,name=response_threshold,json=responseThreshold,proto3" json:"response_threshold,omitempty" yaml:"response_threshold"`
	State             types1.RequestContextState               `protobuf:"varint,9,opt,name=state,proto3,enum=irismod.service.RequestContextState" json:"state,omitempty"`
}

func (m *FeedContext) Reset()      { *m = FeedContext{} }
func (*FeedContext) ProtoMessage() {}
func (*FeedContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3b9af8d00c3858e, []int{6}
}
func (m *FeedContext) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeedContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeedContext.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FeedContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeedContext.Merge(m, src)
}
func (m *FeedContext) XXX_Size() int {
	return m.Size()
}
func (m *FeedContext) XXX_DiscardUnknown() {
	xxx_messageInfo_FeedContext.DiscardUnknown(m)
}

var xxx_messageInfo_FeedContext proto.InternalMessageInfo

func (m *FeedContext) GetFeed() *Feed {
	if m != nil {
		return m.Feed
	}
	return nil
}

func (m *FeedContext) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *FeedContext) GetProviders() []string {
	if m != nil {
		return m.Providers
	}
	return nil
}

func (m *FeedContext) GetInput() string {
	if m != nil {
		return m.Input
	}
	return ""
}

func (m *FeedContext) GetTimeout() int64 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *FeedContext) GetServiceFeeCap() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.ServiceFeeCap
	}
	return nil
}

func (m *FeedContext) GetRepeatedFrequency() uint64 {
	if m != nil {
		return m.RepeatedFrequency
	}
	return 0
}

func (m *FeedContext) GetResponseThreshold() uint32 {
	if m != nil {
		return m.ResponseThreshold
	}
	return 0
}

func (m *FeedContext) GetState() types1.RequestContextState {
	if m != nil {
		return m.State
	}
	return types1.RUNNING
}

func init() {
	proto.RegisterType((*QueryFeedRequest)(nil), "irismod.oracle.QueryFeedRequest")
	proto.RegisterType((*QueryFeedResponse)(nil), "irismod.oracle.QueryFeedResponse")
	proto.RegisterType((*QueryFeedsRequest)(nil), "irismod.oracle.QueryFeedsRequest")
	proto.RegisterType((*QueryFeedsResponse)(nil), "irismod.oracle.QueryFeedsResponse")
	proto.RegisterType((*QueryFeedValueRequest)(nil), "irismod.oracle.QueryFeedValueRequest")
	proto.RegisterType((*QueryFeedValueResponse)(nil), "irismod.oracle.QueryFeedValueResponse")
	proto.RegisterType((*FeedContext)(nil), "irismod.oracle.FeedContext")
}

func init() { proto.RegisterFile("irismod/oracle/query.proto", fileDescriptor_d3b9af8d00c3858e) }

var fileDescriptor_d3b9af8d00c3858e = []byte{
	// 797 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0xcd, 0x6f, 0xeb, 0x44,
	0x10, 0x8f, 0x9b, 0xa4, 0x6d, 0x36, 0xb4, 0xd0, 0xa5, 0x1f, 0x6e, 0xda, 0x24, 0xae, 0x81, 0x62,
	0x2a, 0x61, 0xd3, 0x02, 0xaa, 0x94, 0x13, 0x4a, 0xa5, 0x20, 0x55, 0x08, 0x81, 0x41, 0x1c, 0x7a,
	0x89, 0x36, 0xf1, 0xc6, 0xb5, 0x88, 0xbd, 0xae, 0x77, 0x13, 0x11, 0x21, 0x2e, 0x9c, 0x41, 0x42,
	0x42, 0x42, 0x1c, 0x39, 0x73, 0xe1, 0xdf, 0xe8, 0xb1, 0x12, 0x97, 0x77, 0xca, 0x7b, 0x6a, 0xdf,
	0x5f, 0xd0, 0xfb, 0x93, 0x9e, 0xbc, 0x1f, 0xa9, 0x93, 0x97, 0x7e, 0x9c, 0x9c, 0x9d, 0xf9, 0xcd,
	0xfc, 0xe6, 0xb7, 0x33, 0xb3, 0x01, 0x95, 0x20, 0x09, 0x68, 0x48, 0x3c, 0x87, 0x24, 0xa8, 0xdb,
	0xc7, 0xce, 0xc5, 0x00, 0x27, 0x23, 0x3b, 0x4e, 0x08, 0x23, 0x70, 0x55, 0xfa, 0x6c, 0xe1, 0xab,
	0xec, 0xcc, 0x60, 0xc5, 0x47, 0x80, 0x2b, 0x55, 0xe5, 0xa4, 0x38, 0x19, 0x06, 0x5d, 0xac, 0xbe,
	0xd2, 0xbd, 0xee, 0x13, 0x9f, 0xf0, 0x9f, 0x4e, 0xfa, 0x4b, 0x5a, 0x77, 0x7d, 0x42, 0xfc, 0x3e,
	0x76, 0x50, 0x1c, 0x38, 0x28, 0x8a, 0x08, 0x43, 0x2c, 0x20, 0x11, 0x95, 0xde, 0x5a, 0x97, 0xd0,
	0x90, 0x50, 0xa7, 0x83, 0x28, 0x76, 0x86, 0x87, 0x1d, 0xcc, 0xd0, 0xa1, 0xd3, 0x25, 0x41, 0x24,
	0xfd, 0x07, 0x59, 0x3f, 0x2f, 0x7c, 0x82, 0x8a, 0x91, 0x1f, 0x44, 0x3c, 0x99, 0xc0, 0x9a, 0x0e,
	0x78, 0xe7, 0xdb, 0x14, 0xd1, 0xc2, 0xd8, 0x73, 0xf1, 0xc5, 0x00, 0x53, 0x06, 0x77, 0x40, 0xa9,
	0x87, 0xb1, 0xd7, 0x8e, 0x50, 0x88, 0x75, 0xcd, 0xd0, 0xac, 0x92, 0xbb, 0x9c, 0x1a, 0xbe, 0x46,
	0x21, 0x36, 0x4f, 0xc1, 0x5a, 0x26, 0x80, 0xc6, 0x24, 0xa2, 0x18, 0x7e, 0x0e, 0x0a, 0x29, 0x80,
	0x83, 0xcb, 0x47, 0x3b, 0xf6, 0xf4, 0x05, 0xd9, 0x29, 0xf6, 0x84, 0x44, 0x0c, 0xff, 0xc4, 0x9a,
	0x85, 0xcb, 0x71, 0x3d, 0xe7, 0x72, 0xb8, 0x79, 0x91, 0xc9, 0x45, 0x15, 0xfb, 0x3a, 0x28, 0x52,
	0x86, 0x98, 0x62, 0x16, 0x07, 0xd8, 0x02, 0xe0, 0xae, 0x76, 0x7d, 0x81, 0xf3, 0xec, 0xdb, 0x42,
	0xa8, 0x9d, 0x0a, 0xb5, 0x45, 0x87, 0xa4, 0x50, 0xfb, 0x1b, 0xe4, 0x63, 0x99, 0xd1, 0xcd, 0x44,
	0x9a, 0x7f, 0x69, 0x00, 0x66, 0x39, 0xa5, 0x80, 0x63, 0x50, 0x4c, 0x2b, 0xa2, 0xba, 0x66, 0xe4,
	0x9f, 0xa6, 0x40, 0xe0, 0xe1, 0x97, 0x73, 0xea, 0xfa, 0xf0, 0xd1, 0xba, 0x04, 0xeb, 0x54, 0x61,
	0x9f, 0x81, 0x8d, 0x49, 0x5d, 0x3f, 0xa0, 0xfe, 0x00, 0x3f, 0xa9, 0x1b, 0x67, 0x60, 0x73, 0x36,
	0x4a, 0x2a, 0xfa, 0x02, 0x94, 0x79, 0xd8, 0x30, 0xb5, 0x2a, 0x5d, 0xdb, 0xf3, 0x74, 0xf1, 0x38,
	0xa9, 0x0a, 0xf4, 0x94, 0x81, 0x9a, 0xff, 0x15, 0x40, 0x39, 0xa3, 0x1b, 0x5a, 0x53, 0x4d, 0x5e,
	0x9f, 0x97, 0x4a, 0xf4, 0x15, 0x36, 0xc0, 0x5b, 0x72, 0xca, 0x45, 0xd5, 0xe9, 0xb5, 0x94, 0x9a,
	0x5b, 0xb7, 0xe3, 0xfa, 0xbb, 0x23, 0x14, 0xf6, 0x1b, 0x66, 0xd6, 0x6b, 0xba, 0x65, 0x79, 0x4c,
	0x15, 0xc1, 0x5d, 0x50, 0x8a, 0x13, 0x32, 0x0c, 0x3c, 0x9c, 0x50, 0x3d, 0x6f, 0xe4, 0xad, 0x92,
	0x7b, 0x67, 0x48, 0x87, 0x23, 0x88, 0xe2, 0x01, 0xd3, 0x0b, 0x62, 0x38, 0xf8, 0x01, 0xea, 0x60,
	0x89, 0x05, 0x21, 0x26, 0x03, 0xa6, 0x17, 0x0d, 0xcd, 0xca, 0xbb, 0xea, 0x08, 0x7f, 0xd7, 0xc0,
	0xdb, 0x8a, 0xac, 0x87, 0x71, 0xbb, 0x8b, 0x62, 0x7d, 0x51, 0x5e, 0x45, 0xb6, 0x49, 0xaa, 0x3d,
	0x27, 0x24, 0x88, 0x9a, 0xa7, 0xe9, 0x55, 0xdc, 0x8e, 0xeb, 0x9b, 0xd3, 0xc5, 0xca, 0x78, 0xf3,
	0xdf, 0xe7, 0x75, 0xcb, 0x0f, 0xd8, 0xf9, 0xa0, 0x63, 0x77, 0x49, 0xe8, 0xc8, 0x65, 0x13, 0x9f,
	0x8f, 0xa9, 0xf7, 0xa3, 0xc3, 0x46, 0x31, 0xa6, 0x3c, 0x15, 0x75, 0x57, 0x64, 0x74, 0x0b, 0xe3,
	0x13, 0x14, 0xc3, 0xaf, 0x00, 0x4c, 0x70, 0x8c, 0x11, 0xc3, 0x5e, 0xbb, 0x97, 0xa4, 0x1d, 0x8e,
	0xba, 0x23, 0x7d, 0xc9, 0xd0, 0xac, 0x42, 0xb3, 0x7a, 0x3b, 0xae, 0x6f, 0x0b, 0xca, 0x37, 0x31,
	0xa6, 0xbb, 0xa6, 0x8c, 0x2d, 0x65, 0x13, 0xd9, 0x44, 0xbf, 0xdb, 0xec, 0x3c, 0xc1, 0xf4, 0x9c,
	0xf4, 0x3d, 0x7d, 0xd9, 0xd0, 0xac, 0x95, 0xe9, 0x6c, 0xb3, 0x18, 0x9e, 0x4d, 0x18, 0xbf, 0x57,
	0x36, 0xd8, 0x50, 0x8b, 0x57, 0x32, 0x34, 0x6b, 0xf5, 0xe8, 0xfd, 0x49, 0x83, 0xd5, 0x8b, 0x25,
	0x27, 0x52, 0xce, 0xc3, 0x77, 0x29, 0x56, 0xae, 0x67, 0xa3, 0xf0, 0xf7, 0x3f, 0xf5, 0xdc, 0xd1,
	0xab, 0x05, 0x50, 0xe4, 0xe3, 0x08, 0x87, 0xa0, 0x90, 0xce, 0x03, 0x34, 0x66, 0xa7, 0x64, 0xf6,
	0xb1, 0xa9, 0xec, 0x3d, 0x80, 0x10, 0x15, 0x9a, 0x1f, 0xfd, 0xfa, 0xff, 0xcb, 0x3f, 0x17, 0xde,
	0x83, 0x7b, 0xce, 0xcc, 0x43, 0xcb, 0x57, 0xd0, 0xf9, 0x79, 0xb2, 0x1e, 0xbf, 0xc0, 0x10, 0x14,
	0xf9, 0x62, 0xc3, 0xfb, 0xd3, 0xaa, 0x87, 0xa6, 0x62, 0x3e, 0x04, 0x91, 0xd4, 0x55, 0x4e, 0xbd,
	0x05, 0x37, 0xe6, 0x52, 0xc3, 0xdf, 0x34, 0x50, 0x9a, 0xac, 0x10, 0xfc, 0xe0, 0xde, 0x84, 0xd9,
	0x85, 0xae, 0xec, 0x3f, 0x06, 0x93, 0xdc, 0x9f, 0x70, 0xee, 0x03, 0x68, 0x3d, 0x2a, 0xdb, 0x11,
	0x4b, 0xde, 0x3c, 0xbe, 0xbc, 0xae, 0x69, 0x57, 0xd7, 0x35, 0xed, 0xc5, 0x75, 0x4d, 0xfb, 0xe3,
	0xa6, 0x96, 0xbb, 0xba, 0xa9, 0xe5, 0x9e, 0xdd, 0xd4, 0x72, 0x67, 0xd5, 0x90, 0x78, 0x94, 0xf3,
	0x46, 0x98, 0xd9, 0x24, 0xf1, 0x55, 0x2e, 0x3e, 0xab, 0x9d, 0x45, 0xfe, 0x67, 0xf0, 0xe9, 0xeb,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x2a, 0x4d, 0x5b, 0xf6, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Feed queries the feed
	Feed(ctx context.Context, in *QueryFeedRequest, opts ...grpc.CallOption) (*QueryFeedResponse, error)
	// Feeds queries the feed list
	Feeds(ctx context.Context, in *QueryFeedsRequest, opts ...grpc.CallOption) (*QueryFeedsResponse, error)
	// FeedValue queries the feed value
	FeedValue(ctx context.Context, in *QueryFeedValueRequest, opts ...grpc.CallOption) (*QueryFeedValueResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Feed(ctx context.Context, in *QueryFeedRequest, opts ...grpc.CallOption) (*QueryFeedResponse, error) {
	out := new(QueryFeedResponse)
	err := c.cc.Invoke(ctx, "/irismod.oracle.Query/Feed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Feeds(ctx context.Context, in *QueryFeedsRequest, opts ...grpc.CallOption) (*QueryFeedsResponse, error) {
	out := new(QueryFeedsResponse)
	err := c.cc.Invoke(ctx, "/irismod.oracle.Query/Feeds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FeedValue(ctx context.Context, in *QueryFeedValueRequest, opts ...grpc.CallOption) (*QueryFeedValueResponse, error) {
	out := new(QueryFeedValueResponse)
	err := c.cc.Invoke(ctx, "/irismod.oracle.Query/FeedValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Feed queries the feed
	Feed(context.Context, *QueryFeedRequest) (*QueryFeedResponse, error)
	// Feeds queries the feed list
	Feeds(context.Context, *QueryFeedsRequest) (*QueryFeedsResponse, error)
	// FeedValue queries the feed value
	FeedValue(context.Context, *QueryFeedValueRequest) (*QueryFeedValueResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Feed(ctx context.Context, req *QueryFeedRequest) (*QueryFeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Feed not implemented")
}
func (*UnimplementedQueryServer) Feeds(ctx context.Context, req *QueryFeedsRequest) (*QueryFeedsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Feeds not implemented")
}
func (*UnimplementedQueryServer) FeedValue(ctx context.Context, req *QueryFeedValueRequest) (*QueryFeedValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeedValue not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Feed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Feed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/irismod.oracle.Query/Feed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Feed(ctx, req.(*QueryFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Feeds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFeedsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Feeds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/irismod.oracle.Query/Feeds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Feeds(ctx, req.(*QueryFeedsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FeedValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFeedValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FeedValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/irismod.oracle.Query/FeedValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FeedValue(ctx, req.(*QueryFeedValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "irismod.oracle.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Feed",
			Handler:    _Query_Feed_Handler,
		},
		{
			MethodName: "Feeds",
			Handler:    _Query_Feeds_Handler,
		},
		{
			MethodName: "FeedValue",
			Handler:    _Query_FeedValue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "irismod/oracle/query.proto",
}

func (m *QueryFeedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFeedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFeedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FeedName) > 0 {
		i -= len(m.FeedName)
		copy(dAtA[i:], m.FeedName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.FeedName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFeedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFeedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFeedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Feed.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryFeedsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFeedsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFeedsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.State) > 0 {
		i -= len(m.State)
		copy(dAtA[i:], m.State)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.State)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFeedsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFeedsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFeedsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Feeds) > 0 {
		for iNdEx := len(m.Feeds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Feeds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryFeedValueRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFeedValueRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFeedValueRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FeedName) > 0 {
		i -= len(m.FeedName)
		copy(dAtA[i:], m.FeedName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.FeedName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFeedValueResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFeedValueResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFeedValueResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FeedValues) > 0 {
		for iNdEx := len(m.FeedValues) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FeedValues[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *FeedContext) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeedContext) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeedContext) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x48
	}
	if m.ResponseThreshold != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ResponseThreshold))
		i--
		dAtA[i] = 0x40
	}
	if m.RepeatedFrequency != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.RepeatedFrequency))
		i--
		dAtA[i] = 0x38
	}
	if len(m.ServiceFeeCap) > 0 {
		for iNdEx := len(m.ServiceFeeCap) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ServiceFeeCap[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.Timeout != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Timeout))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Input) > 0 {
		i -= len(m.Input)
		copy(dAtA[i:], m.Input)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Input)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Providers) > 0 {
		for iNdEx := len(m.Providers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Providers[iNdEx])
			copy(dAtA[i:], m.Providers[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Providers[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ServiceName) > 0 {
		i -= len(m.ServiceName)
		copy(dAtA[i:], m.ServiceName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ServiceName)))
		i--
		dAtA[i] = 0x12
	}
	if m.Feed != nil {
		{
			size, err := m.Feed.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryFeedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FeedName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFeedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Feed.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryFeedsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFeedsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Feeds) > 0 {
		for _, e := range m.Feeds {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFeedValueRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FeedName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFeedValueResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FeedValues) > 0 {
		for _, e := range m.FeedValues {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *FeedContext) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Feed != nil {
		l = m.Feed.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ServiceName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Providers) > 0 {
		for _, s := range m.Providers {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	l = len(m.Input)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Timeout != 0 {
		n += 1 + sovQuery(uint64(m.Timeout))
	}
	if len(m.ServiceFeeCap) > 0 {
		for _, e := range m.ServiceFeeCap {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.RepeatedFrequency != 0 {
		n += 1 + sovQuery(uint64(m.RepeatedFrequency))
	}
	if m.ResponseThreshold != 0 {
		n += 1 + sovQuery(uint64(m.ResponseThreshold))
	}
	if m.State != 0 {
		n += 1 + sovQuery(uint64(m.State))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryFeedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFeedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeedName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFeedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFeedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Feed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Feed.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFeedsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFeedsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeedsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFeedsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFeedsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeedsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Feeds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Feeds = append(m.Feeds, FeedContext{})
			if err := m.Feeds[len(m.Feeds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFeedValueRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFeedValueRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeedValueRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeedName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFeedValueResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFeedValueResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeedValueResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedValues", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeedValues = append(m.FeedValues, FeedValue{})
			if err := m.FeedValues[len(m.FeedValues)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeedContext) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeedContext: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeedContext: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Feed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Feed == nil {
				m.Feed = &Feed{}
			}
			if err := m.Feed.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Providers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Providers = append(m.Providers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Input = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceFeeCap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceFeeCap = append(m.ServiceFeeCap, types.Coin{})
			if err := m.ServiceFeeCap[len(m.ServiceFeeCap)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepeatedFrequency", wireType)
			}
			m.RepeatedFrequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RepeatedFrequency |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseThreshold", wireType)
			}
			m.ResponseThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResponseThreshold |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= types1.RequestContextState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
