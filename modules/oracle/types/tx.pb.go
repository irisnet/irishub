// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: irismod/oracle/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgCreateFeed defines an sdk.Msg type that supports creating a feed
type MsgCreateFeed struct {
	FeedName          string                                   `protobuf:"bytes,1,opt,name=feed_name,json=feedName,proto3" json:"feed_name,omitempty" yaml:"feed_name"`
	LatestHistory     uint64                                   `protobuf:"varint,2,opt,name=latest_history,json=latestHistory,proto3" json:"latest_history,omitempty" yaml:"latest_history"`
	Description       string                                   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Creator           string                                   `protobuf:"bytes,4,opt,name=creator,proto3" json:"creator,omitempty"`
	ServiceName       string                                   `protobuf:"bytes,5,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty" yaml:"service_name"`
	Providers         []string                                 `protobuf:"bytes,6,rep,name=providers,proto3" json:"providers,omitempty"`
	Input             string                                   `protobuf:"bytes,7,opt,name=input,proto3" json:"input,omitempty"`
	Timeout           int64                                    `protobuf:"varint,8,opt,name=timeout,proto3" json:"timeout,omitempty"`
	ServiceFeeCap     github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,9,rep,name=service_fee_cap,json=serviceFeeCap,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"service_fee_cap" yaml:"service_fee_cap"`
	RepeatedFrequency uint64                                   `protobuf:"varint,10,opt,name=repeated_frequency,json=repeatedFrequency,proto3" json:"repeated_frequency,omitempty" yaml:"repeated_frequency"`
	AggregateFunc     string                                   `protobuf:"bytes,11,opt,name=aggregate_func,json=aggregateFunc,proto3" json:"aggregate_func,omitempty" yaml:"aggregate_func"`
	ValueJsonPath     string                                   `protobuf:"bytes,12,opt,name=value_json_path,json=valueJsonPath,proto3" json:"value_json_path,omitempty" yaml:"value_json_path"`
	ResponseThreshold uint32                                   `protobuf:"varint,13,opt,name=response_threshold,json=responseThreshold,proto3" json:"response_threshold,omitempty" yaml:"response_threshold"`
}

func (m *MsgCreateFeed) Reset()         { *m = MsgCreateFeed{} }
func (m *MsgCreateFeed) String() string { return proto.CompactTextString(m) }
func (*MsgCreateFeed) ProtoMessage()    {}
func (*MsgCreateFeed) Descriptor() ([]byte, []int) {
	return fileDescriptor_149b611e53598551, []int{0}
}
func (m *MsgCreateFeed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateFeed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateFeed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateFeed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateFeed.Merge(m, src)
}
func (m *MsgCreateFeed) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateFeed) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateFeed.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateFeed proto.InternalMessageInfo

func (m *MsgCreateFeed) GetFeedName() string {
	if m != nil {
		return m.FeedName
	}
	return ""
}

func (m *MsgCreateFeed) GetLatestHistory() uint64 {
	if m != nil {
		return m.LatestHistory
	}
	return 0
}

func (m *MsgCreateFeed) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MsgCreateFeed) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateFeed) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *MsgCreateFeed) GetProviders() []string {
	if m != nil {
		return m.Providers
	}
	return nil
}

func (m *MsgCreateFeed) GetInput() string {
	if m != nil {
		return m.Input
	}
	return ""
}

func (m *MsgCreateFeed) GetTimeout() int64 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *MsgCreateFeed) GetServiceFeeCap() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.ServiceFeeCap
	}
	return nil
}

func (m *MsgCreateFeed) GetRepeatedFrequency() uint64 {
	if m != nil {
		return m.RepeatedFrequency
	}
	return 0
}

func (m *MsgCreateFeed) GetAggregateFunc() string {
	if m != nil {
		return m.AggregateFunc
	}
	return ""
}

func (m *MsgCreateFeed) GetValueJsonPath() string {
	if m != nil {
		return m.ValueJsonPath
	}
	return ""
}

func (m *MsgCreateFeed) GetResponseThreshold() uint32 {
	if m != nil {
		return m.ResponseThreshold
	}
	return 0
}

// MsgCreateFeedResponse defines the Msg/CreateFeed response type
type MsgCreateFeedResponse struct {
}

func (m *MsgCreateFeedResponse) Reset()         { *m = MsgCreateFeedResponse{} }
func (m *MsgCreateFeedResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateFeedResponse) ProtoMessage()    {}
func (*MsgCreateFeedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_149b611e53598551, []int{1}
}
func (m *MsgCreateFeedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateFeedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateFeedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateFeedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateFeedResponse.Merge(m, src)
}
func (m *MsgCreateFeedResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateFeedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateFeedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateFeedResponse proto.InternalMessageInfo

// MsgPauseFeed defines an sdk.Msg type that supports stating a feed
type MsgStartFeed struct {
	FeedName string `protobuf:"bytes,1,opt,name=feed_name,json=feedName,proto3" json:"feed_name,omitempty" yaml:"feed_name"`
	Creator  string `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *MsgStartFeed) Reset()         { *m = MsgStartFeed{} }
func (m *MsgStartFeed) String() string { return proto.CompactTextString(m) }
func (*MsgStartFeed) ProtoMessage()    {}
func (*MsgStartFeed) Descriptor() ([]byte, []int) {
	return fileDescriptor_149b611e53598551, []int{2}
}
func (m *MsgStartFeed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgStartFeed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgStartFeed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgStartFeed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgStartFeed.Merge(m, src)
}
func (m *MsgStartFeed) XXX_Size() int {
	return m.Size()
}
func (m *MsgStartFeed) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgStartFeed.DiscardUnknown(m)
}

var xxx_messageInfo_MsgStartFeed proto.InternalMessageInfo

func (m *MsgStartFeed) GetFeedName() string {
	if m != nil {
		return m.FeedName
	}
	return ""
}

func (m *MsgStartFeed) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

// MsgStartFeedResponse defines the Msg/StartFeed response type
type MsgStartFeedResponse struct {
}

func (m *MsgStartFeedResponse) Reset()         { *m = MsgStartFeedResponse{} }
func (m *MsgStartFeedResponse) String() string { return proto.CompactTextString(m) }
func (*MsgStartFeedResponse) ProtoMessage()    {}
func (*MsgStartFeedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_149b611e53598551, []int{3}
}
func (m *MsgStartFeedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgStartFeedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgStartFeedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgStartFeedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgStartFeedResponse.Merge(m, src)
}
func (m *MsgStartFeedResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgStartFeedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgStartFeedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgStartFeedResponse proto.InternalMessageInfo

// MsgPauseFeed defines an sdk.Msg type that supports pausing a feed
type MsgPauseFeed struct {
	FeedName string `protobuf:"bytes,1,opt,name=feed_name,json=feedName,proto3" json:"feed_name,omitempty" yaml:"feed_name"`
	Creator  string `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *MsgPauseFeed) Reset()         { *m = MsgPauseFeed{} }
func (m *MsgPauseFeed) String() string { return proto.CompactTextString(m) }
func (*MsgPauseFeed) ProtoMessage()    {}
func (*MsgPauseFeed) Descriptor() ([]byte, []int) {
	return fileDescriptor_149b611e53598551, []int{4}
}
func (m *MsgPauseFeed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPauseFeed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPauseFeed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPauseFeed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPauseFeed.Merge(m, src)
}
func (m *MsgPauseFeed) XXX_Size() int {
	return m.Size()
}
func (m *MsgPauseFeed) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPauseFeed.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPauseFeed proto.InternalMessageInfo

func (m *MsgPauseFeed) GetFeedName() string {
	if m != nil {
		return m.FeedName
	}
	return ""
}

func (m *MsgPauseFeed) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

// MsgPauseFeedResponse defines the Msg/PauseFeed response type
type MsgPauseFeedResponse struct {
}

func (m *MsgPauseFeedResponse) Reset()         { *m = MsgPauseFeedResponse{} }
func (m *MsgPauseFeedResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPauseFeedResponse) ProtoMessage()    {}
func (*MsgPauseFeedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_149b611e53598551, []int{5}
}
func (m *MsgPauseFeedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPauseFeedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPauseFeedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPauseFeedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPauseFeedResponse.Merge(m, src)
}
func (m *MsgPauseFeedResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPauseFeedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPauseFeedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPauseFeedResponse proto.InternalMessageInfo

// MsgEditFeed defines an sdk.Msg type that supports editing a feed
type MsgEditFeed struct {
	FeedName          string                                   `protobuf:"bytes,1,opt,name=feed_name,json=feedName,proto3" json:"feed_name,omitempty" yaml:"feed_name"`
	Description       string                                   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	LatestHistory     uint64                                   `protobuf:"varint,3,opt,name=latest_history,json=latestHistory,proto3" json:"latest_history,omitempty" yaml:"latest_history"`
	Providers         []string                                 `protobuf:"bytes,4,rep,name=providers,proto3" json:"providers,omitempty"`
	Timeout           int64                                    `protobuf:"varint,5,opt,name=timeout,proto3" json:"timeout,omitempty"`
	ServiceFeeCap     github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,6,rep,name=service_fee_cap,json=serviceFeeCap,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"service_fee_cap" yaml:"service_fee_cap"`
	RepeatedFrequency uint64                                   `protobuf:"varint,7,opt,name=repeated_frequency,json=repeatedFrequency,proto3" json:"repeated_frequency,omitempty" yaml:"repeated_frequency"`
	ResponseThreshold uint32                                   `protobuf:"varint,8,opt,name=response_threshold,json=responseThreshold,proto3" json:"response_threshold,omitempty" yaml:"response_threshold"`
	Creator           string                                   `protobuf:"bytes,9,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *MsgEditFeed) Reset()         { *m = MsgEditFeed{} }
func (m *MsgEditFeed) String() string { return proto.CompactTextString(m) }
func (*MsgEditFeed) ProtoMessage()    {}
func (*MsgEditFeed) Descriptor() ([]byte, []int) {
	return fileDescriptor_149b611e53598551, []int{6}
}
func (m *MsgEditFeed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgEditFeed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEditFeed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgEditFeed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEditFeed.Merge(m, src)
}
func (m *MsgEditFeed) XXX_Size() int {
	return m.Size()
}
func (m *MsgEditFeed) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEditFeed.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEditFeed proto.InternalMessageInfo

func (m *MsgEditFeed) GetFeedName() string {
	if m != nil {
		return m.FeedName
	}
	return ""
}

func (m *MsgEditFeed) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MsgEditFeed) GetLatestHistory() uint64 {
	if m != nil {
		return m.LatestHistory
	}
	return 0
}

func (m *MsgEditFeed) GetProviders() []string {
	if m != nil {
		return m.Providers
	}
	return nil
}

func (m *MsgEditFeed) GetTimeout() int64 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *MsgEditFeed) GetServiceFeeCap() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.ServiceFeeCap
	}
	return nil
}

func (m *MsgEditFeed) GetRepeatedFrequency() uint64 {
	if m != nil {
		return m.RepeatedFrequency
	}
	return 0
}

func (m *MsgEditFeed) GetResponseThreshold() uint32 {
	if m != nil {
		return m.ResponseThreshold
	}
	return 0
}

func (m *MsgEditFeed) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

// MsgEditFeedResponse defines the Msg/EditFeed response type
type MsgEditFeedResponse struct {
}

func (m *MsgEditFeedResponse) Reset()         { *m = MsgEditFeedResponse{} }
func (m *MsgEditFeedResponse) String() string { return proto.CompactTextString(m) }
func (*MsgEditFeedResponse) ProtoMessage()    {}
func (*MsgEditFeedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_149b611e53598551, []int{7}
}
func (m *MsgEditFeedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgEditFeedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEditFeedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgEditFeedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEditFeedResponse.Merge(m, src)
}
func (m *MsgEditFeedResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgEditFeedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEditFeedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEditFeedResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCreateFeed)(nil), "irismod.oracle.MsgCreateFeed")
	proto.RegisterType((*MsgCreateFeedResponse)(nil), "irismod.oracle.MsgCreateFeedResponse")
	proto.RegisterType((*MsgStartFeed)(nil), "irismod.oracle.MsgStartFeed")
	proto.RegisterType((*MsgStartFeedResponse)(nil), "irismod.oracle.MsgStartFeedResponse")
	proto.RegisterType((*MsgPauseFeed)(nil), "irismod.oracle.MsgPauseFeed")
	proto.RegisterType((*MsgPauseFeedResponse)(nil), "irismod.oracle.MsgPauseFeedResponse")
	proto.RegisterType((*MsgEditFeed)(nil), "irismod.oracle.MsgEditFeed")
	proto.RegisterType((*MsgEditFeedResponse)(nil), "irismod.oracle.MsgEditFeedResponse")
}

func init() { proto.RegisterFile("irismod/oracle/tx.proto", fileDescriptor_149b611e53598551) }

var fileDescriptor_149b611e53598551 = []byte{
	// 765 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0x4f, 0x6f, 0xe2, 0x56,
	0x10, 0xc7, 0xfc, 0x49, 0xe0, 0x11, 0x92, 0xd6, 0x21, 0x89, 0x43, 0x13, 0x40, 0x6e, 0x2b, 0x71,
	0xa9, 0xad, 0xa4, 0x87, 0x4a, 0x39, 0x55, 0x44, 0x45, 0x55, 0x14, 0xda, 0xc8, 0xed, 0xa9, 0x3d,
	0x58, 0x0f, 0x7b, 0x30, 0x6e, 0xb1, 0x9f, 0xfb, 0xde, 0x33, 0x2a, 0x1f, 0xa2, 0x52, 0x3f, 0xc3,
	0x1e, 0xf7, 0x93, 0x64, 0x6f, 0x39, 0xee, 0x89, 0x5d, 0x25, 0xdf, 0x80, 0xf3, 0x1e, 0x56, 0xb6,
	0xb1, 0xb1, 0x01, 0x65, 0xb5, 0x48, 0x2b, 0xed, 0x09, 0xbf, 0xf9, 0xcd, 0xfc, 0x66, 0x86, 0x99,
	0x9f, 0x9f, 0xd1, 0x89, 0x4d, 0x6d, 0xe6, 0x10, 0x53, 0x25, 0x14, 0x1b, 0x63, 0x50, 0xf9, 0xbf,
	0x8a, 0x47, 0x09, 0x27, 0xe2, 0xfe, 0x02, 0x50, 0x22, 0xa0, 0x51, 0xb7, 0x88, 0x45, 0x42, 0x48,
	0x0d, 0x9e, 0x22, 0xaf, 0x46, 0xd3, 0x20, 0xcc, 0x21, 0x4c, 0x1d, 0x60, 0x06, 0xea, 0xe4, 0x62,
	0x00, 0x1c, 0x5f, 0xa8, 0x06, 0xb1, 0xdd, 0x08, 0x97, 0xdf, 0x95, 0x50, 0xad, 0xcf, 0xac, 0x6b,
	0x0a, 0x98, 0x43, 0x0f, 0xc0, 0x14, 0x2f, 0x50, 0x65, 0x08, 0x60, 0xea, 0x2e, 0x76, 0x40, 0x12,
	0xda, 0x42, 0xa7, 0xd2, 0xad, 0xcf, 0x67, 0xad, 0x2f, 0xa6, 0xd8, 0x19, 0x5f, 0xc9, 0x09, 0x24,
	0x6b, 0xe5, 0xe0, 0xf9, 0x17, 0xec, 0x80, 0xf8, 0x23, 0xda, 0x1f, 0x63, 0x0e, 0x8c, 0xeb, 0x23,
	0x9b, 0x71, 0x42, 0xa7, 0x52, 0xbe, 0x2d, 0x74, 0x8a, 0xdd, 0xd3, 0xf9, 0xac, 0x75, 0x14, 0xc5,
	0x65, 0x71, 0x59, 0xab, 0x45, 0x86, 0x9f, 0xa3, 0xb3, 0xd8, 0x46, 0x55, 0x13, 0x98, 0x41, 0x6d,
	0x8f, 0xdb, 0xc4, 0x95, 0x0a, 0x41, 0x5a, 0x2d, 0x6d, 0x12, 0x25, 0xb4, 0x6b, 0x04, 0x45, 0x12,
	0x2a, 0x15, 0x43, 0x34, 0x3e, 0x8a, 0x57, 0x68, 0x8f, 0x01, 0x9d, 0xd8, 0x06, 0x44, 0x35, 0x97,
	0xc2, 0x9a, 0x4f, 0xe6, 0xb3, 0xd6, 0x61, 0x94, 0x3b, 0x8d, 0xca, 0x5a, 0x75, 0x71, 0x0c, 0x2b,
	0x3f, 0x43, 0x15, 0x8f, 0x92, 0x89, 0x6d, 0x02, 0x65, 0xd2, 0x4e, 0xbb, 0xd0, 0xa9, 0x68, 0x4b,
	0x83, 0x58, 0x47, 0x25, 0xdb, 0xf5, 0x7c, 0x2e, 0xed, 0x86, 0x19, 0xa3, 0x43, 0x50, 0x09, 0xb7,
	0x1d, 0x20, 0x3e, 0x97, 0xca, 0x6d, 0xa1, 0x53, 0xd0, 0xe2, 0xa3, 0xf8, 0x9f, 0x80, 0x0e, 0xe2,
	0x64, 0x43, 0x00, 0xdd, 0xc0, 0x9e, 0x54, 0x69, 0x17, 0x3a, 0xd5, 0xcb, 0x53, 0x25, 0x9a, 0x83,
	0x12, 0xcc, 0x41, 0x59, 0xcc, 0x41, 0xb9, 0x26, 0xb6, 0xdb, 0xbd, 0xb9, 0x9f, 0xb5, 0x72, 0xf3,
	0x59, 0xeb, 0x38, 0x5b, 0xec, 0x22, 0x5e, 0x7e, 0xf9, 0xa6, 0xd5, 0xb1, 0x6c, 0x3e, 0xf2, 0x07,
	0x8a, 0x41, 0x1c, 0x75, 0x31, 0xce, 0xe8, 0xe7, 0x3b, 0x66, 0xfe, 0xad, 0xf2, 0xa9, 0x07, 0x2c,
	0xa4, 0x62, 0x5a, 0x6d, 0x11, 0xdd, 0x03, 0xb8, 0xc6, 0x9e, 0x78, 0x8b, 0x44, 0x0a, 0x5e, 0x30,
	0x59, 0x53, 0x1f, 0x52, 0xf8, 0xc7, 0x07, 0xd7, 0x98, 0x4a, 0x28, 0x9c, 0xcd, 0xf9, 0x7c, 0xd6,
	0x3a, 0x8d, 0x52, 0xae, 0xfb, 0xc8, 0xda, 0x97, 0xb1, 0xb1, 0x17, 0xdb, 0x82, 0x29, 0x63, 0xcb,
	0xa2, 0x60, 0x61, 0x0e, 0xfa, 0xd0, 0x77, 0x0d, 0xa9, 0x1a, 0xfe, 0xd3, 0xa9, 0x29, 0x67, 0x71,
	0x59, 0xab, 0x25, 0x86, 0x9e, 0xef, 0x1a, 0x62, 0x17, 0x1d, 0x4c, 0xf0, 0xd8, 0x07, 0xfd, 0x2f,
	0x46, 0x5c, 0xdd, 0xc3, 0x7c, 0x24, 0xed, 0x85, 0x14, 0x8d, 0x65, 0xff, 0x2b, 0x0e, 0xb2, 0x56,
	0x0b, 0x2d, 0x37, 0x8c, 0xb8, 0x77, 0x98, 0x8f, 0xa2, 0x9e, 0x98, 0x47, 0x5c, 0x06, 0x3a, 0x1f,
	0x51, 0x60, 0x23, 0x32, 0x36, 0xa5, 0x5a, 0x5b, 0xe8, 0xd4, 0xb2, 0x3d, 0xad, 0xfa, 0x84, 0x3d,
	0x45, 0xc6, 0xdf, 0x13, 0xdb, 0x09, 0x3a, 0xca, 0x6c, 0xbf, 0xb6, 0xf0, 0x90, 0xff, 0x44, 0x7b,
	0x7d, 0x66, 0xfd, 0xc6, 0x31, 0xe5, 0xdb, 0xaa, 0x22, 0xb5, 0xb1, 0xf9, 0xcc, 0xc6, 0xca, 0xc7,
	0xa8, 0x9e, 0x26, 0x5f, 0x49, 0x7a, 0x87, 0x7d, 0x06, 0x9f, 0x2a, 0x69, 0x42, 0x9e, 0x24, 0x7d,
	0x51, 0x44, 0xd5, 0x3e, 0xb3, 0x7e, 0x32, 0xed, 0xad, 0x3b, 0x5d, 0x51, 0x6f, 0x7e, 0x5d, 0xbd,
	0xeb, 0x6f, 0x88, 0xc2, 0x47, 0xbe, 0x21, 0x32, 0x4a, 0x2d, 0xae, 0x2a, 0x35, 0xa5, 0xc9, 0xd2,
	0x87, 0x35, 0xb9, 0xf3, 0xd9, 0x69, 0x72, 0x77, 0x4b, 0x4d, 0x6e, 0x56, 0x43, 0x79, 0x3b, 0x35,
	0xa4, 0x97, 0xa7, 0x92, 0x5d, 0x9e, 0x23, 0x74, 0x98, 0xda, 0x91, 0x78, 0x77, 0x2e, 0x5f, 0xe5,
	0x51, 0xa1, 0xcf, 0x2c, 0x51, 0x43, 0x28, 0x75, 0x83, 0x9c, 0x2b, 0xd9, 0xab, 0x49, 0xc9, 0x48,
	0xac, 0xf1, 0xed, 0xb3, 0x70, 0xcc, 0x2d, 0xde, 0xa2, 0x72, 0xb2, 0x93, 0x5f, 0x6d, 0x08, 0x89,
	0xc1, 0xc6, 0xd7, 0xcf, 0x80, 0x09, 0xdb, 0xaf, 0xa8, 0xb2, 0x14, 0xf3, 0xd9, 0x86, 0x88, 0x04,
	0x6d, 0x7c, 0xf3, 0x1c, 0x9a, 0x26, 0x5c, 0x0a, 0x75, 0x13, 0x61, 0x82, 0x6e, 0x24, 0x5c, 0xd3,
	0x61, 0xf7, 0x87, 0xfb, 0xc7, 0xa6, 0xf0, 0xf0, 0xd8, 0x14, 0xde, 0x3e, 0x36, 0x85, 0xff, 0x9f,
	0x9a, 0xb9, 0x87, 0xa7, 0x66, 0xee, 0xf5, 0x53, 0x33, 0xf7, 0xc7, 0xb9, 0x43, 0x4c, 0x16, 0x72,
	0xb8, 0xc0, 0x15, 0x42, 0xad, 0xe4, 0x5b, 0x20, 0x58, 0xb3, 0xc1, 0x4e, 0x78, 0x93, 0x7f, 0xff,
	0x3e, 0x00, 0x00, 0xff, 0xff, 0x05, 0x8d, 0x31, 0x5d, 0x2a, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// CreateFeed defines a method for creating a new feed
	CreateFeed(ctx context.Context, in *MsgCreateFeed, opts ...grpc.CallOption) (*MsgCreateFeedResponse, error)
	// EditFeed defines a method for editing a feed
	EditFeed(ctx context.Context, in *MsgEditFeed, opts ...grpc.CallOption) (*MsgEditFeedResponse, error)
	// StartFeed defines a method for starting a feed
	StartFeed(ctx context.Context, in *MsgStartFeed, opts ...grpc.CallOption) (*MsgStartFeedResponse, error)
	// PauseFeed defines a method for pausing a feed
	PauseFeed(ctx context.Context, in *MsgPauseFeed, opts ...grpc.CallOption) (*MsgPauseFeedResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateFeed(ctx context.Context, in *MsgCreateFeed, opts ...grpc.CallOption) (*MsgCreateFeedResponse, error) {
	out := new(MsgCreateFeedResponse)
	err := c.cc.Invoke(ctx, "/irismod.oracle.Msg/CreateFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) EditFeed(ctx context.Context, in *MsgEditFeed, opts ...grpc.CallOption) (*MsgEditFeedResponse, error) {
	out := new(MsgEditFeedResponse)
	err := c.cc.Invoke(ctx, "/irismod.oracle.Msg/EditFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) StartFeed(ctx context.Context, in *MsgStartFeed, opts ...grpc.CallOption) (*MsgStartFeedResponse, error) {
	out := new(MsgStartFeedResponse)
	err := c.cc.Invoke(ctx, "/irismod.oracle.Msg/StartFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PauseFeed(ctx context.Context, in *MsgPauseFeed, opts ...grpc.CallOption) (*MsgPauseFeedResponse, error) {
	out := new(MsgPauseFeedResponse)
	err := c.cc.Invoke(ctx, "/irismod.oracle.Msg/PauseFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// CreateFeed defines a method for creating a new feed
	CreateFeed(context.Context, *MsgCreateFeed) (*MsgCreateFeedResponse, error)
	// EditFeed defines a method for editing a feed
	EditFeed(context.Context, *MsgEditFeed) (*MsgEditFeedResponse, error)
	// StartFeed defines a method for starting a feed
	StartFeed(context.Context, *MsgStartFeed) (*MsgStartFeedResponse, error)
	// PauseFeed defines a method for pausing a feed
	PauseFeed(context.Context, *MsgPauseFeed) (*MsgPauseFeedResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateFeed(ctx context.Context, req *MsgCreateFeed) (*MsgCreateFeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFeed not implemented")
}
func (*UnimplementedMsgServer) EditFeed(ctx context.Context, req *MsgEditFeed) (*MsgEditFeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditFeed not implemented")
}
func (*UnimplementedMsgServer) StartFeed(ctx context.Context, req *MsgStartFeed) (*MsgStartFeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartFeed not implemented")
}
func (*UnimplementedMsgServer) PauseFeed(ctx context.Context, req *MsgPauseFeed) (*MsgPauseFeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseFeed not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateFeed)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/irismod.oracle.Msg/CreateFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateFeed(ctx, req.(*MsgCreateFeed))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_EditFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgEditFeed)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).EditFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/irismod.oracle.Msg/EditFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).EditFeed(ctx, req.(*MsgEditFeed))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_StartFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgStartFeed)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).StartFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/irismod.oracle.Msg/StartFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).StartFeed(ctx, req.(*MsgStartFeed))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PauseFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPauseFeed)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PauseFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/irismod.oracle.Msg/PauseFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PauseFeed(ctx, req.(*MsgPauseFeed))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "irismod.oracle.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFeed",
			Handler:    _Msg_CreateFeed_Handler,
		},
		{
			MethodName: "EditFeed",
			Handler:    _Msg_EditFeed_Handler,
		},
		{
			MethodName: "StartFeed",
			Handler:    _Msg_StartFeed_Handler,
		},
		{
			MethodName: "PauseFeed",
			Handler:    _Msg_PauseFeed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "irismod/oracle/tx.proto",
}

func (m *MsgCreateFeed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateFeed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateFeed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ResponseThreshold != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ResponseThreshold))
		i--
		dAtA[i] = 0x68
	}
	if len(m.ValueJsonPath) > 0 {
		i -= len(m.ValueJsonPath)
		copy(dAtA[i:], m.ValueJsonPath)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ValueJsonPath)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.AggregateFunc) > 0 {
		i -= len(m.AggregateFunc)
		copy(dAtA[i:], m.AggregateFunc)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AggregateFunc)))
		i--
		dAtA[i] = 0x5a
	}
	if m.RepeatedFrequency != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.RepeatedFrequency))
		i--
		dAtA[i] = 0x50
	}
	if len(m.ServiceFeeCap) > 0 {
		for iNdEx := len(m.ServiceFeeCap) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ServiceFeeCap[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.Timeout != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Timeout))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Input) > 0 {
		i -= len(m.Input)
		copy(dAtA[i:], m.Input)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Input)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Providers) > 0 {
		for iNdEx := len(m.Providers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Providers[iNdEx])
			copy(dAtA[i:], m.Providers[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Providers[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.ServiceName) > 0 {
		i -= len(m.ServiceName)
		copy(dAtA[i:], m.ServiceName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ServiceName)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if m.LatestHistory != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.LatestHistory))
		i--
		dAtA[i] = 0x10
	}
	if len(m.FeedName) > 0 {
		i -= len(m.FeedName)
		copy(dAtA[i:], m.FeedName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FeedName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateFeedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateFeedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateFeedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgStartFeed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgStartFeed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgStartFeed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FeedName) > 0 {
		i -= len(m.FeedName)
		copy(dAtA[i:], m.FeedName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FeedName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgStartFeedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgStartFeedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgStartFeedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgPauseFeed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPauseFeed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPauseFeed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FeedName) > 0 {
		i -= len(m.FeedName)
		copy(dAtA[i:], m.FeedName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FeedName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPauseFeedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPauseFeedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPauseFeedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgEditFeed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEditFeed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEditFeed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x4a
	}
	if m.ResponseThreshold != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ResponseThreshold))
		i--
		dAtA[i] = 0x40
	}
	if m.RepeatedFrequency != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.RepeatedFrequency))
		i--
		dAtA[i] = 0x38
	}
	if len(m.ServiceFeeCap) > 0 {
		for iNdEx := len(m.ServiceFeeCap) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ServiceFeeCap[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.Timeout != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Timeout))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Providers) > 0 {
		for iNdEx := len(m.Providers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Providers[iNdEx])
			copy(dAtA[i:], m.Providers[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Providers[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.LatestHistory != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.LatestHistory))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FeedName) > 0 {
		i -= len(m.FeedName)
		copy(dAtA[i:], m.FeedName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FeedName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgEditFeedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEditFeedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEditFeedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateFeed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FeedName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.LatestHistory != 0 {
		n += 1 + sovTx(uint64(m.LatestHistory))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ServiceName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Providers) > 0 {
		for _, s := range m.Providers {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.Input)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Timeout != 0 {
		n += 1 + sovTx(uint64(m.Timeout))
	}
	if len(m.ServiceFeeCap) > 0 {
		for _, e := range m.ServiceFeeCap {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.RepeatedFrequency != 0 {
		n += 1 + sovTx(uint64(m.RepeatedFrequency))
	}
	l = len(m.AggregateFunc)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ValueJsonPath)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ResponseThreshold != 0 {
		n += 1 + sovTx(uint64(m.ResponseThreshold))
	}
	return n
}

func (m *MsgCreateFeedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgStartFeed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FeedName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgStartFeedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgPauseFeed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FeedName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgPauseFeedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgEditFeed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FeedName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.LatestHistory != 0 {
		n += 1 + sovTx(uint64(m.LatestHistory))
	}
	if len(m.Providers) > 0 {
		for _, s := range m.Providers {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.Timeout != 0 {
		n += 1 + sovTx(uint64(m.Timeout))
	}
	if len(m.ServiceFeeCap) > 0 {
		for _, e := range m.ServiceFeeCap {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.RepeatedFrequency != 0 {
		n += 1 + sovTx(uint64(m.RepeatedFrequency))
	}
	if m.ResponseThreshold != 0 {
		n += 1 + sovTx(uint64(m.ResponseThreshold))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgEditFeedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateFeed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateFeed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateFeed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeedName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestHistory", wireType)
			}
			m.LatestHistory = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LatestHistory |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Providers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Providers = append(m.Providers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Input = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceFeeCap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceFeeCap = append(m.ServiceFeeCap, types.Coin{})
			if err := m.ServiceFeeCap[len(m.ServiceFeeCap)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepeatedFrequency", wireType)
			}
			m.RepeatedFrequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RepeatedFrequency |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregateFunc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AggregateFunc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueJsonPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValueJsonPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseThreshold", wireType)
			}
			m.ResponseThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResponseThreshold |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateFeedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateFeedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateFeedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgStartFeed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgStartFeed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgStartFeed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeedName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgStartFeedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgStartFeedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgStartFeedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPauseFeed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPauseFeed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPauseFeed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeedName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPauseFeedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPauseFeedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPauseFeedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgEditFeed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEditFeed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEditFeed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeedName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestHistory", wireType)
			}
			m.LatestHistory = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LatestHistory |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Providers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Providers = append(m.Providers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceFeeCap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceFeeCap = append(m.ServiceFeeCap, types.Coin{})
			if err := m.ServiceFeeCap[len(m.ServiceFeeCap)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepeatedFrequency", wireType)
			}
			m.RepeatedFrequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RepeatedFrequency |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseThreshold", wireType)
			}
			m.ResponseThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResponseThreshold |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgEditFeedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEditFeedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEditFeedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
