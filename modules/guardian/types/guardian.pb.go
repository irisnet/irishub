// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: irishub/guardian/guardian.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// AccountType defines the super account type
type AccountType int32

const (
	// GENESIS defines a genesis account type
	Genesis AccountType = 0
	// ORDINARY defines a ordinary account type
	Ordinary AccountType = 1
)

var AccountType_name = map[int32]string{
	0: "GENESIS",
	1: "ORDINARY",
}

var AccountType_value = map[string]int32{
	"GENESIS":  0,
	"ORDINARY": 1,
}

func (x AccountType) String() string {
	return proto.EnumName(AccountType_name, int32(x))
}

func (AccountType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cbcdd28e3c2705db, []int{0}
}

// Super defines the super standard
type Super struct {
	Description string      `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	AccountType AccountType `protobuf:"varint,2,opt,name=account_type,json=accountType,proto3,enum=irishub.guardian.AccountType" json:"account_type,omitempty" yaml:"account_type"`
	Address     string      `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	AddedBy     string      `protobuf:"bytes,4,opt,name=added_by,json=addedBy,proto3" json:"added_by,omitempty"`
}

func (m *Super) Reset()         { *m = Super{} }
func (m *Super) String() string { return proto.CompactTextString(m) }
func (*Super) ProtoMessage()    {}
func (*Super) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbcdd28e3c2705db, []int{0}
}
func (m *Super) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Super) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Super.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Super) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Super.Merge(m, src)
}
func (m *Super) XXX_Size() int {
	return m.Size()
}
func (m *Super) XXX_DiscardUnknown() {
	xxx_messageInfo_Super.DiscardUnknown(m)
}

var xxx_messageInfo_Super proto.InternalMessageInfo

func (m *Super) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Super) GetAccountType() AccountType {
	if m != nil {
		return m.AccountType
	}
	return Genesis
}

func (m *Super) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Super) GetAddedBy() string {
	if m != nil {
		return m.AddedBy
	}
	return ""
}

func init() {
	proto.RegisterEnum("irishub.guardian.AccountType", AccountType_name, AccountType_value)
	proto.RegisterType((*Super)(nil), "irishub.guardian.Super")
}

func init() { proto.RegisterFile("irishub/guardian/guardian.proto", fileDescriptor_cbcdd28e3c2705db) }

var fileDescriptor_cbcdd28e3c2705db = []byte{
	// 328 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0xcf, 0x2c, 0xca, 0x2c,
	0xce, 0x28, 0x4d, 0xd2, 0x4f, 0x2f, 0x4d, 0x2c, 0x4a, 0xc9, 0x4c, 0xcc, 0x83, 0x33, 0xf4, 0x0a,
	0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0x04, 0xa0, 0x0a, 0xf4, 0x60, 0xe2, 0x52, 0x22, 0xe9, 0xf9, 0xe9,
	0xf9, 0x60, 0x49, 0x7d, 0x10, 0x0b, 0xa2, 0x4e, 0x69, 0x27, 0x23, 0x17, 0x6b, 0x70, 0x69, 0x41,
	0x6a, 0x91, 0x90, 0x02, 0x17, 0x77, 0x4a, 0x6a, 0x71, 0x72, 0x51, 0x66, 0x41, 0x49, 0x66, 0x7e,
	0x9e, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x67, 0x10, 0xb2, 0x90, 0x50, 0x24, 0x17, 0x4f, 0x62, 0x72,
	0x72, 0x7e, 0x69, 0x5e, 0x49, 0x7c, 0x49, 0x65, 0x41, 0xaa, 0x04, 0x93, 0x02, 0xa3, 0x06, 0x9f,
	0x91, 0xac, 0x1e, 0xba, 0x55, 0x7a, 0x8e, 0x10, 0x55, 0x21, 0x95, 0x05, 0xa9, 0x4e, 0xe2, 0x9f,
	0xee, 0xc9, 0x0b, 0x57, 0x26, 0xe6, 0xe6, 0x58, 0x29, 0x21, 0x6b, 0x56, 0x0a, 0xe2, 0x4e, 0x44,
	0xa8, 0x12, 0x92, 0xe0, 0x62, 0x4f, 0x4c, 0x49, 0x29, 0x4a, 0x2d, 0x2e, 0x96, 0x60, 0x06, 0x5b,
	0x0c, 0xe3, 0x0a, 0x49, 0x72, 0x71, 0x24, 0xa6, 0xa4, 0xa4, 0xa6, 0xc4, 0x27, 0x55, 0x4a, 0xb0,
	0xc0, 0xa5, 0x52, 0x53, 0x9c, 0x2a, 0xb5, 0x3c, 0xb9, 0xb8, 0x1d, 0x51, 0xcd, 0x70, 0x77, 0xf5,
	0x73, 0x0d, 0xf6, 0x0c, 0x16, 0x60, 0x90, 0xe2, 0xee, 0x9a, 0xab, 0xc0, 0xee, 0x9e, 0x9a, 0x97,
	0x5a, 0x9c, 0x59, 0x2c, 0x24, 0xc5, 0xc5, 0xe1, 0x1f, 0xe4, 0xe2, 0xe9, 0xe7, 0x18, 0x14, 0x29,
	0xc0, 0x28, 0xc5, 0xd3, 0x35, 0x57, 0x81, 0xc3, 0xbf, 0x28, 0x25, 0x33, 0x2f, 0xb1, 0xa8, 0x52,
	0x8a, 0xa5, 0x63, 0xb1, 0x1c, 0x83, 0x93, 0xdf, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31,
	0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe1, 0xb1, 0x1c, 0xc3, 0x85, 0xc7, 0x72, 0x0c, 0x37, 0x1e, 0xcb,
	0x31, 0x44, 0x99, 0xa4, 0x67, 0x96, 0x80, 0x3c, 0x97, 0x9c, 0x9f, 0xab, 0x0f, 0xf2, 0x68, 0x5e,
	0x6a, 0x89, 0x3e, 0x2c, 0xf0, 0xcb, 0x8c, 0xf4, 0x73, 0xf3, 0x53, 0x4a, 0x73, 0x52, 0x8b, 0x11,
	0xf1, 0x00, 0xf2, 0x5c, 0x71, 0x12, 0x1b, 0x38, 0x74, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff,
	0x84, 0xb5, 0xea, 0xa9, 0xa8, 0x01, 0x00, 0x00,
}

func (m *Super) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Super) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Super) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AddedBy) > 0 {
		i -= len(m.AddedBy)
		copy(dAtA[i:], m.AddedBy)
		i = encodeVarintGuardian(dAtA, i, uint64(len(m.AddedBy)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintGuardian(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1a
	}
	if m.AccountType != 0 {
		i = encodeVarintGuardian(dAtA, i, uint64(m.AccountType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintGuardian(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGuardian(dAtA []byte, offset int, v uint64) int {
	offset -= sovGuardian(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Super) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovGuardian(uint64(l))
	}
	if m.AccountType != 0 {
		n += 1 + sovGuardian(uint64(m.AccountType))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovGuardian(uint64(l))
	}
	l = len(m.AddedBy)
	if l > 0 {
		n += 1 + l + sovGuardian(uint64(l))
	}
	return n
}

func sovGuardian(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGuardian(x uint64) (n int) {
	return sovGuardian(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Super) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuardian
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Super: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Super: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuardian
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuardian
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuardian
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountType", wireType)
			}
			m.AccountType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuardian
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountType |= AccountType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuardian
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuardian
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuardian
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuardian
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuardian
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuardian
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuardian(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuardian
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGuardian(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGuardian
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGuardian
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGuardian
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGuardian
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGuardian
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGuardian
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGuardian        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGuardian          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGuardian = fmt.Errorf("proto: unexpected end of group")
)
