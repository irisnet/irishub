// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: irismod/farm/query.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryFarmPoolsRequest is request type for the Query/FarmPools RPC method
type QueryFarmPoolsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryFarmPoolsRequest) Reset()         { *m = QueryFarmPoolsRequest{} }
func (m *QueryFarmPoolsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFarmPoolsRequest) ProtoMessage()    {}
func (*QueryFarmPoolsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a0ccd6e77c4b961, []int{0}
}
func (m *QueryFarmPoolsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFarmPoolsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFarmPoolsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFarmPoolsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFarmPoolsRequest.Merge(m, src)
}
func (m *QueryFarmPoolsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFarmPoolsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFarmPoolsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFarmPoolsRequest proto.InternalMessageInfo

func (m *QueryFarmPoolsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// FarmPoolEntry defines the properties of farm pool
type FarmPoolEntry struct {
	Id              string                                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Creator         string                                   `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	Description     string                                   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	StartHeight     int64                                    `protobuf:"varint,4,opt,name=start_height,json=startHeight,proto3" json:"start_height,omitempty"`
	EndHeight       int64                                    `protobuf:"varint,5,opt,name=end_height,json=endHeight,proto3" json:"end_height,omitempty"`
	Editable        bool                                     `protobuf:"varint,6,opt,name=editable,proto3" json:"editable,omitempty"`
	Expired         bool                                     `protobuf:"varint,7,opt,name=expired,proto3" json:"expired,omitempty"`
	TotalLptLocked  github_com_cosmos_cosmos_sdk_types.Coin  `protobuf:"bytes,8,opt,name=total_lpt_locked,json=totalLptLocked,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"total_lpt_locked"`
	TotalReward     github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,9,rep,name=total_reward,json=totalReward,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"total_reward"`
	RemainingReward github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,10,rep,name=remaining_reward,json=remainingReward,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"remaining_reward"`
	RewardPerBlock  github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,11,rep,name=reward_per_block,json=rewardPerBlock,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"reward_per_block"`
}

func (m *FarmPoolEntry) Reset()         { *m = FarmPoolEntry{} }
func (m *FarmPoolEntry) String() string { return proto.CompactTextString(m) }
func (*FarmPoolEntry) ProtoMessage()    {}
func (*FarmPoolEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a0ccd6e77c4b961, []int{1}
}
func (m *FarmPoolEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FarmPoolEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FarmPoolEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FarmPoolEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FarmPoolEntry.Merge(m, src)
}
func (m *FarmPoolEntry) XXX_Size() int {
	return m.Size()
}
func (m *FarmPoolEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_FarmPoolEntry.DiscardUnknown(m)
}

var xxx_messageInfo_FarmPoolEntry proto.InternalMessageInfo

func (m *FarmPoolEntry) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *FarmPoolEntry) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *FarmPoolEntry) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *FarmPoolEntry) GetStartHeight() int64 {
	if m != nil {
		return m.StartHeight
	}
	return 0
}

func (m *FarmPoolEntry) GetEndHeight() int64 {
	if m != nil {
		return m.EndHeight
	}
	return 0
}

func (m *FarmPoolEntry) GetEditable() bool {
	if m != nil {
		return m.Editable
	}
	return false
}

func (m *FarmPoolEntry) GetExpired() bool {
	if m != nil {
		return m.Expired
	}
	return false
}

func (m *FarmPoolEntry) GetTotalReward() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.TotalReward
	}
	return nil
}

func (m *FarmPoolEntry) GetRemainingReward() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.RemainingReward
	}
	return nil
}

func (m *FarmPoolEntry) GetRewardPerBlock() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.RewardPerBlock
	}
	return nil
}

// QueryFarmPoolsResponse is response type for the Query/FarmPools RPC method
type QueryFarmPoolsResponse struct {
	Pools      []*FarmPoolEntry    `protobuf:"bytes,1,rep,name=pools,proto3" json:"pools,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryFarmPoolsResponse) Reset()         { *m = QueryFarmPoolsResponse{} }
func (m *QueryFarmPoolsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFarmPoolsResponse) ProtoMessage()    {}
func (*QueryFarmPoolsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a0ccd6e77c4b961, []int{2}
}
func (m *QueryFarmPoolsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFarmPoolsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFarmPoolsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFarmPoolsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFarmPoolsResponse.Merge(m, src)
}
func (m *QueryFarmPoolsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFarmPoolsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFarmPoolsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFarmPoolsResponse proto.InternalMessageInfo

func (m *QueryFarmPoolsResponse) GetPools() []*FarmPoolEntry {
	if m != nil {
		return m.Pools
	}
	return nil
}

func (m *QueryFarmPoolsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryFarmPoolsRequest is request type for the Query/FarmPool RPC method
type QueryFarmPoolRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryFarmPoolRequest) Reset()         { *m = QueryFarmPoolRequest{} }
func (m *QueryFarmPoolRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFarmPoolRequest) ProtoMessage()    {}
func (*QueryFarmPoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a0ccd6e77c4b961, []int{3}
}
func (m *QueryFarmPoolRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFarmPoolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFarmPoolRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFarmPoolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFarmPoolRequest.Merge(m, src)
}
func (m *QueryFarmPoolRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFarmPoolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFarmPoolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFarmPoolRequest proto.InternalMessageInfo

func (m *QueryFarmPoolRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// QueryFarmPoolResponse is response type for the Query/FarmPool RPC method
type QueryFarmPoolResponse struct {
	Pool *FarmPoolEntry `protobuf:"bytes,1,opt,name=pool,proto3" json:"pool,omitempty"`
}

func (m *QueryFarmPoolResponse) Reset()         { *m = QueryFarmPoolResponse{} }
func (m *QueryFarmPoolResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFarmPoolResponse) ProtoMessage()    {}
func (*QueryFarmPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a0ccd6e77c4b961, []int{4}
}
func (m *QueryFarmPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFarmPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFarmPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFarmPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFarmPoolResponse.Merge(m, src)
}
func (m *QueryFarmPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFarmPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFarmPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFarmPoolResponse proto.InternalMessageInfo

func (m *QueryFarmPoolResponse) GetPool() *FarmPoolEntry {
	if m != nil {
		return m.Pool
	}
	return nil
}

// QueryFarmerRequest is request type for the Query/Farmer RPC method
type QueryFarmerRequest struct {
	Farmer string `protobuf:"bytes,1,opt,name=farmer,proto3" json:"farmer,omitempty"`
	PoolId string `protobuf:"bytes,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
}

func (m *QueryFarmerRequest) Reset()         { *m = QueryFarmerRequest{} }
func (m *QueryFarmerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFarmerRequest) ProtoMessage()    {}
func (*QueryFarmerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a0ccd6e77c4b961, []int{5}
}
func (m *QueryFarmerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFarmerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFarmerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFarmerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFarmerRequest.Merge(m, src)
}
func (m *QueryFarmerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFarmerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFarmerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFarmerRequest proto.InternalMessageInfo

func (m *QueryFarmerRequest) GetFarmer() string {
	if m != nil {
		return m.Farmer
	}
	return ""
}

func (m *QueryFarmerRequest) GetPoolId() string {
	if m != nil {
		return m.PoolId
	}
	return ""
}

// QueryFarmerResponse is response type for the Query/Farmer RPC method
type QueryFarmerResponse struct {
	List   []*LockedInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Height int64         `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QueryFarmerResponse) Reset()         { *m = QueryFarmerResponse{} }
func (m *QueryFarmerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFarmerResponse) ProtoMessage()    {}
func (*QueryFarmerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a0ccd6e77c4b961, []int{6}
}
func (m *QueryFarmerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFarmerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFarmerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFarmerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFarmerResponse.Merge(m, src)
}
func (m *QueryFarmerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFarmerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFarmerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFarmerResponse proto.InternalMessageInfo

func (m *QueryFarmerResponse) GetList() []*LockedInfo {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *QueryFarmerResponse) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

// QueryParamsRequest is request type for the Query/Params RPC method
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a0ccd6e77c4b961, []int{7}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method
type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a0ccd6e77c4b961, []int{8}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// LockedInfo defines the information of the farmer's current pledge
type LockedInfo struct {
	PoolId        string                                   `protobuf:"bytes,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	Locked        github_com_cosmos_cosmos_sdk_types.Coin  `protobuf:"bytes,2,opt,name=locked,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"locked"`
	PendingReward github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=pending_reward,json=pendingReward,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"pending_reward"`
}

func (m *LockedInfo) Reset()         { *m = LockedInfo{} }
func (m *LockedInfo) String() string { return proto.CompactTextString(m) }
func (*LockedInfo) ProtoMessage()    {}
func (*LockedInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a0ccd6e77c4b961, []int{9}
}
func (m *LockedInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LockedInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LockedInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LockedInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockedInfo.Merge(m, src)
}
func (m *LockedInfo) XXX_Size() int {
	return m.Size()
}
func (m *LockedInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_LockedInfo.DiscardUnknown(m)
}

var xxx_messageInfo_LockedInfo proto.InternalMessageInfo

func (m *LockedInfo) GetPoolId() string {
	if m != nil {
		return m.PoolId
	}
	return ""
}

func (m *LockedInfo) GetPendingReward() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.PendingReward
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryFarmPoolsRequest)(nil), "irismod.farm.QueryFarmPoolsRequest")
	proto.RegisterType((*FarmPoolEntry)(nil), "irismod.farm.FarmPoolEntry")
	proto.RegisterType((*QueryFarmPoolsResponse)(nil), "irismod.farm.QueryFarmPoolsResponse")
	proto.RegisterType((*QueryFarmPoolRequest)(nil), "irismod.farm.QueryFarmPoolRequest")
	proto.RegisterType((*QueryFarmPoolResponse)(nil), "irismod.farm.QueryFarmPoolResponse")
	proto.RegisterType((*QueryFarmerRequest)(nil), "irismod.farm.QueryFarmerRequest")
	proto.RegisterType((*QueryFarmerResponse)(nil), "irismod.farm.QueryFarmerResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "irismod.farm.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "irismod.farm.QueryParamsResponse")
	proto.RegisterType((*LockedInfo)(nil), "irismod.farm.LockedInfo")
}

func init() { proto.RegisterFile("irismod/farm/query.proto", fileDescriptor_3a0ccd6e77c4b961) }

var fileDescriptor_3a0ccd6e77c4b961 = []byte{
	// 881 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x96, 0xcf, 0x6e, 0xdb, 0x46,
	0x10, 0xc6, 0x4d, 0xc9, 0x96, 0xad, 0x91, 0xe3, 0x06, 0x1b, 0xc5, 0x66, 0x94, 0x54, 0x56, 0xe8,
	0xc2, 0x11, 0x8a, 0x96, 0x5b, 0xbb, 0xe7, 0x5e, 0x5c, 0x24, 0x8d, 0x81, 0x1c, 0x5c, 0x1e, 0xdb,
	0x83, 0xb0, 0xd2, 0xae, 0xe9, 0x85, 0x45, 0x2e, 0xb3, 0xbb, 0x4a, 0x6b, 0x04, 0xb9, 0xf4, 0x09,
	0x0a, 0xb4, 0x0f, 0x51, 0xf4, 0x49, 0x72, 0x0c, 0x50, 0xa0, 0x28, 0x7a, 0x48, 0x0b, 0xbb, 0xaf,
	0x51, 0xa0, 0xd8, 0x3f, 0x64, 0x44, 0xc7, 0x55, 0x72, 0xf0, 0xc5, 0xe6, 0xce, 0xce, 0xce, 0xef,
	0xe3, 0x70, 0x3e, 0x52, 0x10, 0x72, 0xc9, 0x55, 0x26, 0x28, 0x3e, 0x26, 0x32, 0xc3, 0x4f, 0x67,
	0x4c, 0x9e, 0xc5, 0x85, 0x14, 0x5a, 0xa0, 0x75, 0xbf, 0x13, 0x9b, 0x9d, 0x5e, 0x7f, 0x22, 0x54,
	0x26, 0x14, 0x1e, 0x13, 0xc5, 0xf0, 0xb3, 0xbd, 0x31, 0xd3, 0x64, 0x0f, 0x4f, 0x04, 0xcf, 0x5d,
	0x76, 0xef, 0xe3, 0xf9, 0x7d, 0x5b, 0xa6, 0xca, 0x2a, 0x48, 0xca, 0x73, 0xa2, 0xb9, 0x28, 0x73,
	0xbb, 0xa9, 0x48, 0x85, 0xbd, 0xc4, 0xe6, 0xca, 0x47, 0xef, 0xa5, 0x42, 0xa4, 0x53, 0x86, 0x49,
	0xc1, 0x31, 0xc9, 0x73, 0xa1, 0xed, 0x11, 0xe5, 0x77, 0xb7, 0x6a, 0x3a, 0xcd, 0x1f, 0xb7, 0x11,
	0x8d, 0xe0, 0xf6, 0xd7, 0x06, 0xf7, 0x88, 0xc8, 0xec, 0x48, 0x88, 0xa9, 0x4a, 0xd8, 0xd3, 0x19,
	0x53, 0x1a, 0x3d, 0x02, 0x78, 0x43, 0x0e, 0x9b, 0x83, 0x60, 0xd8, 0xd9, 0xdf, 0x8d, 0x9d, 0xcc,
	0xd8, 0xc8, 0x8c, 0xdd, 0xdd, 0x7a, 0x99, 0xf1, 0x11, 0x49, 0x99, 0x3f, 0x9b, 0xcc, 0x9d, 0x8c,
	0x7e, 0x59, 0x81, 0x1b, 0x65, 0xf1, 0x87, 0xb9, 0x96, 0x67, 0x68, 0x03, 0x1a, 0x9c, 0x86, 0xc1,
	0x20, 0x18, 0xb6, 0x93, 0x06, 0xa7, 0x28, 0x84, 0xd5, 0x89, 0x64, 0x44, 0x0b, 0x19, 0x36, 0x6c,
	0xb0, 0x5c, 0xa2, 0x01, 0x74, 0x28, 0x53, 0x13, 0xc9, 0x8b, 0x4a, 0x44, 0x3b, 0x99, 0x0f, 0xa1,
	0xfb, 0xb0, 0xae, 0x34, 0x91, 0x7a, 0x74, 0xc2, 0x78, 0x7a, 0xa2, 0xc3, 0xe5, 0x41, 0x30, 0x6c,
	0x26, 0x1d, 0x1b, 0x7b, 0x6c, 0x43, 0xe8, 0x43, 0x00, 0x96, 0xd3, 0x32, 0x61, 0xc5, 0x26, 0xb4,
	0x59, 0x4e, 0xfd, 0x76, 0x0f, 0xd6, 0x18, 0xe5, 0x9a, 0x8c, 0xa7, 0x2c, 0x6c, 0x0d, 0x82, 0xe1,
	0x5a, 0x52, 0xad, 0x8d, 0x32, 0xf6, 0x7d, 0xc1, 0x25, 0xa3, 0xe1, 0xaa, 0xdd, 0x2a, 0x97, 0x48,
	0xc3, 0x4d, 0x2d, 0x34, 0x99, 0x8e, 0xa6, 0x85, 0x1e, 0x4d, 0xc5, 0xe4, 0x94, 0xd1, 0x70, 0xcd,
	0xf6, 0xe8, 0x4e, 0xad, 0x47, 0x65, 0x77, 0xbe, 0x14, 0x3c, 0x3f, 0xc0, 0x2f, 0x5f, 0x6f, 0x2f,
	0xfd, 0xf9, 0x7a, 0xfb, 0x41, 0xca, 0xf5, 0xc9, 0x6c, 0x1c, 0x4f, 0x44, 0x86, 0xfd, 0x73, 0x77,
	0xff, 0x3e, 0x55, 0xf4, 0x14, 0xeb, 0xb3, 0x82, 0x29, 0x7b, 0x20, 0xd9, 0xb0, 0x8c, 0x27, 0x85,
	0x7e, 0x62, 0x09, 0x28, 0x87, 0x75, 0x47, 0x95, 0xec, 0x3b, 0x22, 0x69, 0xd8, 0x1e, 0x34, 0x17,
	0x13, 0x3f, 0x33, 0xc4, 0x5f, 0xff, 0xda, 0x1e, 0xbe, 0x27, 0x51, 0x25, 0x1d, 0x0b, 0x48, 0x6c,
	0x7d, 0xf4, 0x0c, 0x6e, 0x4a, 0x96, 0x11, 0x9e, 0xf3, 0x3c, 0x2d, 0x99, 0x70, 0xfd, 0xcc, 0x0f,
	0x2a, 0x88, 0xe7, 0xce, 0x0c, 0xd7, 0x5c, 0x8d, 0x0a, 0x26, 0x47, 0x63, 0xd3, 0xdf, 0xb0, 0x73,
	0xfd, 0xdc, 0x0d, 0x07, 0x39, 0x62, 0xf2, 0xc0, 0x20, 0xa2, 0x9f, 0x03, 0xd8, 0xbc, 0x6c, 0x06,
	0x55, 0x88, 0x5c, 0x31, 0xb4, 0x07, 0x2b, 0x85, 0x09, 0x84, 0x81, 0x95, 0x71, 0x37, 0x9e, 0x77,
	0x77, 0x5c, 0x9b, 0xef, 0xc4, 0x65, 0xa2, 0xaf, 0x6a, 0x06, 0x6a, 0xd8, 0xe1, 0x78, 0xf0, 0x4e,
	0x03, 0x39, 0x5e, 0xcd, 0x41, 0xbb, 0xd0, 0xad, 0xa9, 0x2a, 0x1d, 0x7a, 0xc9, 0x47, 0xd1, 0xe3,
	0x4b, 0x56, 0xae, 0xc4, 0x63, 0x58, 0x36, 0x92, 0x6c, 0xea, 0x3b, 0xb4, 0xdb, 0xc4, 0xe8, 0x21,
	0xa0, 0xaa, 0x12, 0x93, 0x25, 0x6f, 0x13, 0x5a, 0xc7, 0x36, 0xe0, 0x99, 0x7e, 0x85, 0xb6, 0x60,
	0xd5, 0x9c, 0x1a, 0x71, 0xea, 0xfd, 0xdb, 0x32, 0xcb, 0x43, 0x1a, 0x7d, 0x0b, 0xb7, 0x6a, 0x65,
	0xbc, 0x9c, 0x4f, 0x60, 0x79, 0xca, 0x95, 0xf6, 0xad, 0x0c, 0xeb, 0x72, 0xdc, 0xa4, 0x1f, 0xe6,
	0xc7, 0x22, 0xb1, 0x59, 0x86, 0xea, 0xad, 0xdb, 0xb0, 0xd6, 0xf5, 0xab, 0xa8, 0xeb, 0x35, 0x1e,
	0x11, 0x49, 0xb2, 0xf2, 0xad, 0x15, 0x1d, 0x7a, 0x64, 0x19, 0xf5, 0xc8, 0x7d, 0x68, 0x15, 0x36,
	0xe2, 0x7b, 0xd0, 0xad, 0x43, 0x5d, 0xf6, 0xc1, 0xb2, 0x99, 0xa0, 0xc4, 0x67, 0x46, 0xff, 0x06,
	0x00, 0x6f, 0xd4, 0xcc, 0xdf, 0x65, 0x30, 0x7f, 0x97, 0x68, 0x0c, 0x2d, 0xff, 0x02, 0x68, 0x5c,
	0xfb, 0x0b, 0xc0, 0x57, 0x46, 0x12, 0x36, 0x0a, 0x96, 0xd3, 0x39, 0x1b, 0x36, 0xaf, 0xdf, 0x0e,
	0x37, 0x3c, 0xc2, 0x99, 0x70, 0xff, 0xf7, 0x26, 0xac, 0xd8, 0x5e, 0x22, 0x05, 0xed, 0xca, 0x11,
	0x68, 0xa7, 0xde, 0xba, 0x2b, 0x3f, 0x1e, 0xbd, 0x8f, 0x16, 0x27, 0xb9, 0xa7, 0x12, 0xdd, 0xfd,
	0xe1, 0xb7, 0x7f, 0x7e, 0x6a, 0xdc, 0x46, 0xb7, 0x70, 0xed, 0xeb, 0xe4, 0xec, 0xa3, 0x61, 0xad,
	0x3c, 0x81, 0xa2, 0x05, 0xe5, 0x4a, 0xe4, 0xce, 0xc2, 0x1c, 0x4f, 0xdc, 0xb6, 0xc4, 0x3b, 0x68,
	0xeb, 0x6d, 0x22, 0x7e, 0xce, 0xe9, 0x0b, 0x34, 0x83, 0x96, 0x9b, 0x56, 0x34, 0xf8, 0x9f, 0x7a,
	0x95, 0x1f, 0x7a, 0xf7, 0x17, 0x64, 0x78, 0xde, 0xae, 0xe5, 0x0d, 0x50, 0x1f, 0xbf, 0xf5, 0xfd,
	0x65, 0x52, 0xe1, 0xe7, 0xee, 0xe2, 0x05, 0x3a, 0x85, 0x96, 0x9b, 0xc1, 0x2b, 0xb1, 0xb5, 0x11,
	0xbf, 0x12, 0x5b, 0x1f, 0xf7, 0xe8, 0x9e, 0xc5, 0x6e, 0xa2, 0xee, 0xa5, 0xdb, 0x74, 0x63, 0xfe,
	0xc5, 0xcb, 0xf3, 0x7e, 0xf0, 0xea, 0xbc, 0x1f, 0xfc, 0x7d, 0xde, 0x0f, 0x7e, 0xbc, 0xe8, 0x2f,
	0xbd, 0xba, 0xe8, 0x2f, 0xfd, 0x71, 0xd1, 0x5f, 0xfa, 0x66, 0x27, 0x13, 0x54, 0xd9, 0xf2, 0x39,
	0xd3, 0xb1, 0x90, 0x29, 0xce, 0x04, 0x9d, 0x4d, 0x99, 0x72, 0xe7, 0xed, 0xb0, 0x8c, 0x5b, 0xf6,
	0x87, 0xc3, 0xe7, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x64, 0x79, 0x0c, 0x3d, 0xfb, 0x08, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// FarmPools returns all the farm pool
	FarmPools(ctx context.Context, in *QueryFarmPoolsRequest, opts ...grpc.CallOption) (*QueryFarmPoolsResponse, error)
	// FarmPool returns the farm pool for the provided id
	FarmPool(ctx context.Context, in *QueryFarmPoolRequest, opts ...grpc.CallOption) (*QueryFarmPoolResponse, error)
	// Farmer returns the farmer for the provided farmer address
	Farmer(ctx context.Context, in *QueryFarmerRequest, opts ...grpc.CallOption) (*QueryFarmerResponse, error)
	// Params queries the farm parameters
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) FarmPools(ctx context.Context, in *QueryFarmPoolsRequest, opts ...grpc.CallOption) (*QueryFarmPoolsResponse, error) {
	out := new(QueryFarmPoolsResponse)
	err := c.cc.Invoke(ctx, "/irismod.farm.Query/FarmPools", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FarmPool(ctx context.Context, in *QueryFarmPoolRequest, opts ...grpc.CallOption) (*QueryFarmPoolResponse, error) {
	out := new(QueryFarmPoolResponse)
	err := c.cc.Invoke(ctx, "/irismod.farm.Query/FarmPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Farmer(ctx context.Context, in *QueryFarmerRequest, opts ...grpc.CallOption) (*QueryFarmerResponse, error) {
	out := new(QueryFarmerResponse)
	err := c.cc.Invoke(ctx, "/irismod.farm.Query/Farmer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/irismod.farm.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// FarmPools returns all the farm pool
	FarmPools(context.Context, *QueryFarmPoolsRequest) (*QueryFarmPoolsResponse, error)
	// FarmPool returns the farm pool for the provided id
	FarmPool(context.Context, *QueryFarmPoolRequest) (*QueryFarmPoolResponse, error)
	// Farmer returns the farmer for the provided farmer address
	Farmer(context.Context, *QueryFarmerRequest) (*QueryFarmerResponse, error)
	// Params queries the farm parameters
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) FarmPools(ctx context.Context, req *QueryFarmPoolsRequest) (*QueryFarmPoolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FarmPools not implemented")
}
func (*UnimplementedQueryServer) FarmPool(ctx context.Context, req *QueryFarmPoolRequest) (*QueryFarmPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FarmPool not implemented")
}
func (*UnimplementedQueryServer) Farmer(ctx context.Context, req *QueryFarmerRequest) (*QueryFarmerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Farmer not implemented")
}
func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_FarmPools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFarmPoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FarmPools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/irismod.farm.Query/FarmPools",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FarmPools(ctx, req.(*QueryFarmPoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FarmPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFarmPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FarmPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/irismod.farm.Query/FarmPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FarmPool(ctx, req.(*QueryFarmPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Farmer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFarmerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Farmer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/irismod.farm.Query/Farmer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Farmer(ctx, req.(*QueryFarmerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/irismod.farm.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "irismod.farm.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FarmPools",
			Handler:    _Query_FarmPools_Handler,
		},
		{
			MethodName: "FarmPool",
			Handler:    _Query_FarmPool_Handler,
		},
		{
			MethodName: "Farmer",
			Handler:    _Query_Farmer_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "irismod/farm/query.proto",
}

func (m *QueryFarmPoolsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFarmPoolsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFarmPoolsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}

func (m *FarmPoolEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FarmPoolEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FarmPoolEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RewardPerBlock) > 0 {
		for iNdEx := len(m.RewardPerBlock) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RewardPerBlock[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.RemainingReward) > 0 {
		for iNdEx := len(m.RemainingReward) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RemainingReward[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.TotalReward) > 0 {
		for iNdEx := len(m.TotalReward) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TotalReward[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	{
		size := m.TotalLptLocked.Size()
		i -= size
		if _, err := m.TotalLptLocked.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if m.Expired {
		i--
		if m.Expired {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.Editable {
		i--
		if m.Editable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.EndHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.EndHeight))
		i--
		dAtA[i] = 0x28
	}
	if m.StartHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.StartHeight))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFarmPoolsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFarmPoolsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFarmPoolsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Pools) > 0 {
		for iNdEx := len(m.Pools) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pools[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryFarmPoolRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFarmPoolRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFarmPoolRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFarmPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFarmPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFarmPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pool != nil {
		{
			size, err := m.Pool.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFarmerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFarmerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFarmerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PoolId) > 0 {
		i -= len(m.PoolId)
		copy(dAtA[i:], m.PoolId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PoolId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Farmer) > 0 {
		i -= len(m.Farmer)
		copy(dAtA[i:], m.Farmer)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Farmer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFarmerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFarmerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFarmerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *LockedInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockedInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LockedInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PendingReward) > 0 {
		for iNdEx := len(m.PendingReward) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PendingReward[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size := m.Locked.Size()
		i -= size
		if _, err := m.Locked.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.PoolId) > 0 {
		i -= len(m.PoolId)
		copy(dAtA[i:], m.PoolId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PoolId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryFarmPoolsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *FarmPoolEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.StartHeight != 0 {
		n += 1 + sovQuery(uint64(m.StartHeight))
	}
	if m.EndHeight != 0 {
		n += 1 + sovQuery(uint64(m.EndHeight))
	}
	if m.Editable {
		n += 2
	}
	if m.Expired {
		n += 2
	}
	l = m.TotalLptLocked.Size()
	n += 1 + l + sovQuery(uint64(l))
	if len(m.TotalReward) > 0 {
		for _, e := range m.TotalReward {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.RemainingReward) > 0 {
		for _, e := range m.RemainingReward {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.RewardPerBlock) > 0 {
		for _, e := range m.RewardPerBlock {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryFarmPoolsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pools) > 0 {
		for _, e := range m.Pools {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFarmPoolRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFarmPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pool != nil {
		l = m.Pool.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFarmerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Farmer)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.PoolId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFarmerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Height != 0 {
		n += 1 + sovQuery(uint64(m.Height))
	}
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *LockedInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PoolId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = m.Locked.Size()
	n += 1 + l + sovQuery(uint64(l))
	if len(m.PendingReward) > 0 {
		for _, e := range m.PendingReward {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryFarmPoolsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFarmPoolsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFarmPoolsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FarmPoolEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FarmPoolEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FarmPoolEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartHeight", wireType)
			}
			m.StartHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndHeight", wireType)
			}
			m.EndHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Editable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Editable = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expired", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Expired = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalLptLocked", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalLptLocked.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalReward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalReward = append(m.TotalReward, types.Coin{})
			if err := m.TotalReward[len(m.TotalReward)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainingReward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemainingReward = append(m.RemainingReward, types.Coin{})
			if err := m.RemainingReward[len(m.RemainingReward)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardPerBlock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardPerBlock = append(m.RewardPerBlock, types.Coin{})
			if err := m.RewardPerBlock[len(m.RewardPerBlock)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFarmPoolsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFarmPoolsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFarmPoolsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pools = append(m.Pools, &FarmPoolEntry{})
			if err := m.Pools[len(m.Pools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFarmPoolRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFarmPoolRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFarmPoolRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFarmPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFarmPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFarmPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pool == nil {
				m.Pool = &FarmPoolEntry{}
			}
			if err := m.Pool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFarmerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFarmerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFarmerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Farmer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Farmer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFarmerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFarmerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFarmerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &LockedInfo{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LockedInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockedInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockedInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locked", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Locked.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingReward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendingReward = append(m.PendingReward, types.Coin{})
			if err := m.PendingReward[len(m.PendingReward)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
