// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: irismod/random/random.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Random defines the feed standard
type Random struct {
	RequestTxHash string `protobuf:"bytes,1,opt,name=request_tx_hash,json=requestTxHash,proto3" json:"request_tx_hash,omitempty" yaml:"request_tx_hash"`
	Height        int64  `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Value         string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Random) Reset()         { *m = Random{} }
func (m *Random) String() string { return proto.CompactTextString(m) }
func (*Random) ProtoMessage()    {}
func (*Random) Descriptor() ([]byte, []int) {
	return fileDescriptor_dad8fcdc408dceeb, []int{0}
}
func (m *Random) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Random) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Random.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Random) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Random.Merge(m, src)
}
func (m *Random) XXX_Size() int {
	return m.Size()
}
func (m *Random) XXX_DiscardUnknown() {
	xxx_messageInfo_Random.DiscardUnknown(m)
}

var xxx_messageInfo_Random proto.InternalMessageInfo

func (m *Random) GetRequestTxHash() string {
	if m != nil {
		return m.RequestTxHash
	}
	return ""
}

func (m *Random) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Random) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// Request defines the random request standard
type Request struct {
	Height           int64                                    `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Consumer         string                                   `protobuf:"bytes,2,opt,name=consumer,proto3" json:"consumer,omitempty"`
	TxHash           string                                   `protobuf:"bytes,3,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty" yaml:"tx_hash"`
	Oracle           bool                                     `protobuf:"varint,4,opt,name=oracle,proto3" json:"oracle,omitempty"`
	ServiceFeeCap    github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,5,rep,name=service_fee_cap,json=serviceFeeCap,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"service_fee_cap" yaml:"service_fee_cap"`
	ServiceContextID string                                   `protobuf:"bytes,6,opt,name=service_context_id,json=serviceContextId,proto3" json:"service_context_id,omitempty" yaml:"service_context_id"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_dad8fcdc408dceeb, []int{1}
}
func (m *Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return m.Size()
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Request) GetConsumer() string {
	if m != nil {
		return m.Consumer
	}
	return ""
}

func (m *Request) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *Request) GetOracle() bool {
	if m != nil {
		return m.Oracle
	}
	return false
}

func (m *Request) GetServiceFeeCap() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.ServiceFeeCap
	}
	return nil
}

func (m *Request) GetServiceContextID() string {
	if m != nil {
		return m.ServiceContextID
	}
	return ""
}

func init() {
	proto.RegisterType((*Random)(nil), "irismod.random.Random")
	proto.RegisterType((*Request)(nil), "irismod.random.Request")
}

func init() { proto.RegisterFile("irismod/random/random.proto", fileDescriptor_dad8fcdc408dceeb) }

var fileDescriptor_dad8fcdc408dceeb = []byte{
	// 436 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x52, 0xcd, 0x6e, 0xd3, 0x40,
	0x18, 0xcc, 0x36, 0xd4, 0x6d, 0x17, 0xf5, 0x47, 0xab, 0xaa, 0x72, 0x83, 0xb0, 0x23, 0x9f, 0x2c,
	0x21, 0xd6, 0x0a, 0x1c, 0x90, 0x38, 0x3a, 0x08, 0x01, 0xc7, 0x85, 0x13, 0x17, 0x6b, 0x63, 0x7f,
	0xd8, 0x16, 0xb1, 0xbf, 0xe0, 0xdd, 0x44, 0x29, 0xef, 0x80, 0xc4, 0x73, 0xf0, 0x24, 0x3d, 0xf6,
	0xc8, 0xc9, 0xa0, 0xe4, 0x0d, 0xc2, 0x0b, 0xa0, 0x78, 0x9d, 0xb4, 0xc9, 0x69, 0x3d, 0x3b, 0xdf,
	0x8c, 0xc6, 0xb3, 0x1f, 0x7d, 0x92, 0x57, 0xb9, 0x2a, 0x30, 0x09, 0x2a, 0x59, 0x26, 0x58, 0xb4,
	0x07, 0x9f, 0x54, 0xa8, 0x91, 0x9d, 0xb5, 0x24, 0x37, 0xb7, 0xbd, 0xcb, 0x14, 0x53, 0x6c, 0xa8,
	0x60, 0xfd, 0x65, 0xa6, 0x7a, 0x4e, 0x8c, 0xaa, 0x40, 0x15, 0x8c, 0xa4, 0x82, 0x60, 0x36, 0x18,
	0x81, 0x96, 0x83, 0x20, 0xc6, 0xbc, 0x34, 0xbc, 0xf7, 0x9d, 0x5a, 0xa2, 0xd1, 0xb3, 0x90, 0x9e,
	0x57, 0xf0, 0x6d, 0x0a, 0x4a, 0x47, 0x7a, 0x1e, 0x65, 0x52, 0x65, 0x36, 0xe9, 0x13, 0xff, 0x24,
	0xec, 0xad, 0x6a, 0xf7, 0xea, 0x46, 0x16, 0xe3, 0xd7, 0xde, 0xde, 0x80, 0x27, 0x4e, 0xdb, 0x9b,
	0x4f, 0xf3, 0x77, 0x52, 0x65, 0xec, 0x8a, 0x5a, 0x19, 0xe4, 0x69, 0xa6, 0xed, 0x83, 0x3e, 0xf1,
	0xbb, 0xa2, 0x45, 0xec, 0x92, 0x1e, 0xce, 0xe4, 0x78, 0x0a, 0x76, 0x77, 0xed, 0x28, 0x0c, 0xf0,
	0xfe, 0x1d, 0xd0, 0x23, 0x61, 0xf4, 0x0f, 0x94, 0x64, 0x47, 0xd9, 0xa3, 0xc7, 0x31, 0x96, 0x6a,
	0x5a, 0x40, 0xd5, 0x78, 0x9e, 0x88, 0x2d, 0x66, 0xcf, 0xe8, 0xd1, 0x26, 0x69, 0xe3, 0x1b, 0xb2,
	0x55, 0xed, 0x9e, 0x99, 0xa4, 0xdb, 0x84, 0x96, 0xde, 0x46, 0xc3, 0x4a, 0xc6, 0x63, 0xb0, 0x1f,
	0xf5, 0x89, 0x7f, 0x2c, 0x5a, 0xc4, 0x7e, 0x10, 0x7a, 0xae, 0xa0, 0x9a, 0xe5, 0x31, 0x44, 0x5f,
	0x00, 0xa2, 0x58, 0x4e, 0xec, 0xc3, 0x7e, 0xd7, 0x7f, 0xfc, 0xe2, 0x9a, 0x9b, 0xee, 0xf8, 0xba,
	0x3b, 0xde, 0x76, 0xc7, 0x87, 0x98, 0x97, 0xe1, 0x87, 0xdb, 0xda, 0xed, 0xdc, 0xd7, 0xb2, 0xa7,
	0xf7, 0x7e, 0xfd, 0x71, 0xfd, 0x34, 0xd7, 0xd9, 0x74, 0xc4, 0x63, 0x2c, 0x82, 0xf6, 0x09, 0xcc,
	0xf1, 0x5c, 0x25, 0x5f, 0x03, 0x7d, 0x33, 0x01, 0xd5, 0x58, 0x29, 0x71, 0xda, 0xaa, 0xdf, 0x02,
	0x0c, 0xe5, 0x84, 0x45, 0x94, 0x6d, 0xec, 0x62, 0x2c, 0x35, 0xcc, 0x75, 0x94, 0x27, 0xb6, 0xd5,
	0xfc, 0xdf, 0x60, 0x51, 0xbb, 0x17, 0x1f, 0x0d, 0x3b, 0x34, 0xe4, 0xfb, 0x37, 0xab, 0xda, 0xbd,
	0xde, 0x8d, 0x71, 0xaf, 0xf3, 0xc4, 0x85, 0xda, 0x1d, 0x4f, 0xc2, 0x57, 0xb7, 0x0b, 0x87, 0xdc,
	0x2d, 0x1c, 0xf2, 0x77, 0xe1, 0x90, 0x9f, 0x4b, 0xa7, 0x73, 0xb7, 0x74, 0x3a, 0xbf, 0x97, 0x4e,
	0xe7, 0xf3, 0xd3, 0x02, 0x13, 0xc5, 0xd7, 0x6b, 0x55, 0x82, 0xe6, 0x58, 0xa5, 0x9b, 0xbd, 0x6b,
	0xe2, 0x8e, 0xac, 0x66, 0x63, 0x5e, 0xfe, 0x0f, 0x00, 0x00, 0xff, 0xff, 0xbe, 0xc0, 0x74, 0x90,
	0x96, 0x02, 0x00, 0x00,
}

func (m *Random) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Random) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Random) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintRandom(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Height != 0 {
		i = encodeVarintRandom(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RequestTxHash) > 0 {
		i -= len(m.RequestTxHash)
		copy(dAtA[i:], m.RequestTxHash)
		i = encodeVarintRandom(dAtA, i, uint64(len(m.RequestTxHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ServiceContextID) > 0 {
		i -= len(m.ServiceContextID)
		copy(dAtA[i:], m.ServiceContextID)
		i = encodeVarintRandom(dAtA, i, uint64(len(m.ServiceContextID)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ServiceFeeCap) > 0 {
		for iNdEx := len(m.ServiceFeeCap) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ServiceFeeCap[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRandom(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Oracle {
		i--
		if m.Oracle {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintRandom(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Consumer) > 0 {
		i -= len(m.Consumer)
		copy(dAtA[i:], m.Consumer)
		i = encodeVarintRandom(dAtA, i, uint64(len(m.Consumer)))
		i--
		dAtA[i] = 0x12
	}
	if m.Height != 0 {
		i = encodeVarintRandom(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintRandom(dAtA []byte, offset int, v uint64) int {
	offset -= sovRandom(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Random) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RequestTxHash)
	if l > 0 {
		n += 1 + l + sovRandom(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovRandom(uint64(m.Height))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovRandom(uint64(l))
	}
	return n
}

func (m *Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovRandom(uint64(m.Height))
	}
	l = len(m.Consumer)
	if l > 0 {
		n += 1 + l + sovRandom(uint64(l))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovRandom(uint64(l))
	}
	if m.Oracle {
		n += 2
	}
	if len(m.ServiceFeeCap) > 0 {
		for _, e := range m.ServiceFeeCap {
			l = e.Size()
			n += 1 + l + sovRandom(uint64(l))
		}
	}
	l = len(m.ServiceContextID)
	if l > 0 {
		n += 1 + l + sovRandom(uint64(l))
	}
	return n
}

func sovRandom(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRandom(x uint64) (n int) {
	return sovRandom(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Random) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRandom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Random: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Random: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRandom
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRandom
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRandom
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRandom
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRandom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRandom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRandom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Consumer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRandom
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRandom
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Consumer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRandom
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRandom
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oracle", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Oracle = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceFeeCap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRandom
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRandom
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceFeeCap = append(m.ServiceFeeCap, types.Coin{})
			if err := m.ServiceFeeCap[len(m.ServiceFeeCap)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceContextID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRandom
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRandom
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceContextID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRandom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRandom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRandom(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRandom
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRandom
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRandom
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRandom
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRandom
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRandom
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRandom        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRandom          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRandom = fmt.Errorf("proto: unexpected end of group")
)
