syntax = "proto3";
package irismod.farm;

import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";

option go_package = "mods.irisnet.org/modules/farm/types";
option (gogoproto.goproto_getters_all) = false;

// FarmPool defines the properties of farm pool
message FarmPool {
  option (gogoproto.equal) = true;

  string id = 1;
  string creator = 2;
  string description = 3;
  int64 start_height = 4;
  int64 end_height = 5;
  int64 last_height_distr_rewards = 6;
  bool editable = 7;
  cosmos.base.v1beta1.Coin total_lpt_locked = 8 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin",
    (gogoproto.nullable) = false
  ];
  repeated RewardRule rules = 9 [ (gogoproto.nullable) = false ];
}

// RewardRule defines the properties of farm pool reward
message RewardRule {
  option (gogoproto.equal) = true;

  string reward = 1;
  string total_reward = 2 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  string remaining_reward = 3 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  string reward_per_block = 4 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  string reward_per_share = 5 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
}

// FarmInfo records the current information of the farm pool
message FarmInfo {
  option (gogoproto.equal) = true;

  string pool_id = 1;
  string address = 2;
  string locked = 3 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  repeated cosmos.base.v1beta1.Coin reward_debt = 4 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable) = false
  ];
}

// Params records the current params information of the farm pool
message Params {
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_stringer) = false;

  cosmos.base.v1beta1.Coin pool_creation_fee = 1 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin",
    (gogoproto.nullable) = false
  ];
  uint32 max_reward_categories = 2;
  string tax_rate = 3 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
}

// EscrowInfo create delegate information for farm pool proposals
message EscrowInfo {
  option (gogoproto.equal) = true;

  string proposer = 1;
  repeated cosmos.base.v1beta1.Coin fund_applied = 2
      [ (gogoproto.nullable) = false ];
  repeated cosmos.base.v1beta1.Coin fund_self_bond = 3
      [ (gogoproto.nullable) = false ];
  uint64 proposal_id = 4;
}

// CommunityPoolCreateFarmProposal is a gov Content type for creating a farm
// pool with community pool
message CommunityPoolCreateFarmProposal {
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_stringer) = false;

  string title = 1;
  string description = 2;
  string pool_description = 3;
  string lpt_denom = 4;
  repeated cosmos.base.v1beta1.Coin reward_per_block = 5
      [ (gogoproto.nullable) = false ];
  repeated cosmos.base.v1beta1.Coin fund_applied = 6
      [ (gogoproto.nullable) = false ];
  repeated cosmos.base.v1beta1.Coin fund_self_bond = 7
      [ (gogoproto.nullable) = false ];
}