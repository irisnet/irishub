syntax = "proto3";
package irismod.token.v1;

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "irismod/token/v1/token.proto";

option go_package = "mods.irisnet.org/token/types/v1";
option (gogoproto.goproto_getters_all) = false;

// Msg defines the oracle Msg service
service Msg {
  option (cosmos.msg.v1.service) = true;

  // IssueToken defines a method for issuing a new token
  rpc IssueToken(MsgIssueToken) returns (MsgIssueTokenResponse);

  // EditToken defines a method for editing a token
  rpc EditToken(MsgEditToken) returns (MsgEditTokenResponse);

  // MintToken defines a method for minting some tokens
  rpc MintToken(MsgMintToken) returns (MsgMintTokenResponse);

  // BurnToken defines a method for burning some tokens
  rpc BurnToken(MsgBurnToken) returns (MsgBurnTokenResponse);

  // TransferTokenOwner defines a method for transfering token owner
  rpc TransferTokenOwner(MsgTransferTokenOwner)
      returns (MsgTransferTokenOwnerResponse);

  // SwapFeeToken defines a method for swapping between IRIS and ERIS
  rpc SwapFeeToken(MsgSwapFeeToken) returns (MsgSwapFeeTokenResponse);

  // SwapToERC20 defines a method for swapping some native token to its ERC20
  // counterpart
  rpc SwapToERC20(MsgSwapToERC20) returns (MsgSwapToERC20Response);

  // SwapFromERC20 defines a method for swapping some ERC20 token to its native
  // counterpart
  rpc SwapFromERC20(MsgSwapFromERC20) returns (MsgSwapFromERC20Response);

  // UpdateParams defines a governance operation for updating the token
  // module parameters. The authority is defined in the keeper.
  //
  // Since: cosmos-sdk 0.47
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);

  // DeployERC20 defines a governance operation for deploying an ERC20 contract
  // that binds to a native token
  rpc DeployERC20(MsgDeployERC20) returns (MsgDeployERC20Response);

  // UpgradeERC20 defines a governance operation for upgrading an ERC20 contract
  rpc UpgradeERC20(MsgUpgradeERC20) returns (MsgUpgradeERC20Response);
}

// MsgIssueToken defines an SDK message for issuing a new token
message MsgIssueToken {
  option (cosmos.msg.v1.signer) = "owner";

  string symbol = 1;
  string name = 2;
  uint32 scale = 3;
  string min_unit = 4;
  uint64 initial_supply = 5;
  uint64 max_supply = 6;
  bool mintable = 7;
  string owner = 8 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}

// MsgIssueTokenResponse defines the Msg/IssueToken response type
message MsgIssueTokenResponse {}

// MsgTransferTokenOwner defines an SDK message for transferring the token owner
message MsgTransferTokenOwner {
  option (cosmos.msg.v1.signer) = "src_owner";

  string src_owner = 1;
  string dst_owner = 2;
  string symbol = 3 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}

// MsgTransferTokenOwnerResponse defines the Msg/TransferTokenOwner response
// type
message MsgTransferTokenOwnerResponse {}

// MsgEditToken defines an SDK message for editing a new token
message MsgEditToken {
  option (cosmos.msg.v1.signer) = "owner";

  string symbol = 1;
  string name = 2;
  uint64 max_supply = 3;
  string mintable = 4
      [ (gogoproto.casttype) =
            "mods.irisnet.org/token/types.Bool" ];
  string owner = 5 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}

// MsgEditTokenResponse defines the Msg/EditToken response type
message MsgEditTokenResponse {}

// MsgMintToken defines an SDK message for minting a new token
message MsgMintToken {
  option (cosmos.msg.v1.signer) = "owner";

  cosmos.base.v1beta1.Coin coin = 1 [ (gogoproto.nullable) = false ];
  string receiver = 2;
  string owner = 3 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}

// MsgMintTokenResponse defines the Msg/MintToken response type
message MsgMintTokenResponse {}

// MsgBurnToken defines an SDK message for burning some tokens
message MsgBurnToken {
  option (cosmos.msg.v1.signer) = "sender";

  cosmos.base.v1beta1.Coin coin = 1 [ (gogoproto.nullable) = false ];
  string sender = 2 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}

// MsgBurnTokenResponse defines the Msg/BurnToken response type
message MsgBurnTokenResponse {}

// MsgSwapFeeToken defines an SDK message for swap fee token
message MsgSwapFeeToken {
  option (cosmos.msg.v1.signer) = "sender";

  cosmos.base.v1beta1.Coin fee_paid = 1 [ (gogoproto.nullable) = false ];
  string receiver = 2;
  string sender = 3 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}

// MsgSwapFeeTokenResponse defines the Msg/SwapFeeToken response type
message MsgSwapFeeTokenResponse {
  cosmos.base.v1beta1.Coin fee_got = 1 [ (gogoproto.nullable) = false ];
}

// MsgUpdateParams is the Msg/UpdateParams request type.
//
// Since: cosmos-sdk 0.47
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";

  // authority is the address that controls the module (defaults to token unless
  // overwritten).
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // params defines the token parameters to update.
  //
  // NOTE: All parameters must be supplied.
  Params params = 2 [ (gogoproto.nullable) = false ];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
//
// Since: cosmos-sdk 0.47
message MsgUpdateParamsResponse {}

// MsgDeployERC20 defines an SDK message for DeployERC20
message MsgDeployERC20 {
  string symbol = 1;
  string name = 2;
  uint32 scale = 3;
  string min_unit = 4;
  string authority = 5 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}

// MsgDeployERC20Response defines the Msg/DeployERC20 response type
message MsgDeployERC20Response {}

// MsgSwapToERC20 defines an SDK message for SwapToERC20
message MsgSwapToERC20 {
  option (cosmos.msg.v1.signer) = "sender";

  cosmos.base.v1beta1.Coin amount = 1 [ (gogoproto.nullable) = false ];
  string sender = 2 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string receiver = 3;
}

// MsgSwapToERC20Response defines the Msg/SwapToERC20 response type
message MsgSwapToERC20Response {}

// MsgSwapFromERC20 defines an SDK message for SwapFromERC20
message MsgSwapFromERC20 {
  option (cosmos.msg.v1.signer) = "sender";

  cosmos.base.v1beta1.Coin wanted_amount = 1 [ (gogoproto.nullable) = false ];
  string sender = 2 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string receiver = 3 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}

// MsgSwapFromERC20Response defines the Msg/SwapFromERC20 response type
message MsgSwapFromERC20Response {}

// MsgUpgradeERC20 defines an SDK message for UpgradeERC20
message MsgUpgradeERC20 {
  option (cosmos.msg.v1.signer) = "authority";

  // implementation is the new erc20 contract address
  string implementation = 1;
  string authority = 2 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}

// MsgUpgradeERC20Response defines the Msg/UpgradeERC20 response type
message MsgUpgradeERC20Response {}