syntax = "proto3";
package irismod.htlc;

import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/duration.proto";

option go_package = "mods.irisnet.org/htlc/types";
option (gogoproto.goproto_getters_all) = false;

// HTLC defines the struct of an HTLC
message HTLC {
  option (gogoproto.equal) = true;

  string id = 1;
  string sender = 2;
  string to = 3;
  string receiver_on_other_chain = 4;
  string sender_on_other_chain = 5;
  repeated cosmos.base.v1beta1.Coin amount = 6 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
  string hash_lock = 7;
  string secret = 8;
  uint64 timestamp = 9;
  uint64 expiration_height = 10;
  HTLCState state = 11;
  uint64 closed_block = 12;
  bool transfer = 13;
  SwapDirection direction = 14;
}

// HTLCState defines the state of an HTLC
enum HTLCState {
  option (gogoproto.goproto_enum_prefix) = false;

  // HTLC_STATE_OPEN defines an open state.
  HTLC_STATE_OPEN = 0 [ (gogoproto.enumvalue_customname) = "Open" ];
  // HTLC_STATE_COMPLETED defines a completed state.
  HTLC_STATE_COMPLETED = 1 [ (gogoproto.enumvalue_customname) = "Completed" ];
  // HTLC_STATE_REFUNDED defines a refunded state.
  HTLC_STATE_REFUNDED = 2 [ (gogoproto.enumvalue_customname) = "Refunded" ];
}

// SwapDirection defines the direction of an HTLT
enum SwapDirection {
  option (gogoproto.goproto_enum_prefix) = false;

  // NONE defines an htlt none direction.
  NONE = 0 [ (gogoproto.enumvalue_customname) = "None" ];
  // INCOMING defines an htlt incoming direction.
  INCOMING = 1 [ (gogoproto.enumvalue_customname) = "Incoming" ];
  // OUTGOING defines an htlt outgoing direction.
  OUTGOING = 2 [ (gogoproto.enumvalue_customname) = "Outgoing" ];
}

// AssetSupply defines the struct of an AssetSupply
message AssetSupply {
  cosmos.base.v1beta1.Coin incoming_supply = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.v1beta1.Coin outgoing_supply = 2 [ (gogoproto.nullable) = false ];
  cosmos.base.v1beta1.Coin current_supply = 3 [ (gogoproto.nullable) = false ];
  cosmos.base.v1beta1.Coin time_limited_current_supply = 4
      [ (gogoproto.nullable) = false ];
  google.protobuf.Duration time_elapsed = 5
      [ (gogoproto.nullable) = false, (gogoproto.stdduration) = true ];
}

// Params defines token module's parameters
message Params {
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_stringer) = false;

  repeated AssetParam asset_params = 1 [
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"asset_params\""
  ];
}

// AssetParam defines the struct of an AssetParam
message AssetParam {
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_stringer) = false;

  string denom = 1; // name of the asset
  SupplyLimit supply_limit = 2
      [ (gogoproto.nullable) = false ]; // asset supply limit
  bool active = 3;           // denotes if asset is available or paused
  string deputy_address = 4; // the address of the relayer process
  string fixed_fee = 5 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ]; // the fixed fee charged by the relayer process for outgoing swaps
  string min_swap_amount = 6 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ]; // Minimum swap amount
  string max_swap_amount = 7 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];                         // Maximum swap amount
  uint64 min_block_lock = 8; // Minimum swap block lock
  uint64 max_block_lock = 9; // Maximum swap block lock
}

// SupplyLimit defines the struct of an SupplyLimit
message SupplyLimit {
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_stringer) = false;

  string limit = 1 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];                     // the absolute supply limit for an asset
  bool time_limited = 2; // boolean for if the supply is also limited by time
  google.protobuf.Duration time_period = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.stdduration) = true
  ]; // the duration for which the supply time limit applies
  string time_based_limit = 4 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ]; // the supply limit for an asset for each time period
}