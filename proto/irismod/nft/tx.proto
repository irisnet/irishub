syntax = "proto3";
package irismod.nft;

import "gogoproto/gogo.proto";

option go_package = "mods.irisnet.org/nft/types";
option (gogoproto.goproto_getters_all) = false;

// Msg defines the nft Msg service.
service Msg {
  // IssueDenom defines a method for issue a denom.
  rpc IssueDenom(MsgIssueDenom) returns (MsgIssueDenomResponse);

  // MintNFT defines a method for mint a new nft
  rpc MintNFT(MsgMintNFT) returns (MsgMintNFTResponse);

  // RefundHTLC defines a method for editing a nft.
  rpc EditNFT(MsgEditNFT) returns (MsgEditNFTResponse);

  // TransferNFT defines a method for transferring a nft.
  rpc TransferNFT(MsgTransferNFT) returns (MsgTransferNFTResponse);

  // BurnNFT defines a method for burning a nft.
  rpc BurnNFT(MsgBurnNFT) returns (MsgBurnNFTResponse);

  // TransferDenom defines a method for transferring a denom.
  rpc TransferDenom(MsgTransferDenom) returns (MsgTransferDenomResponse);
}

// MsgIssueDenom defines an SDK message for creating a new denom.
message MsgIssueDenom {
  option (gogoproto.equal) = true;

  string id = 1;
  string name = 2;
  string schema = 3;
  string sender = 4;
  string symbol = 5;
  bool mint_restricted = 6;
  bool update_restricted = 7;
  string description = 8;
  string uri = 9;
  string uri_hash = 10;
  string data = 11;
}

// MsgIssueDenomResponse defines the Msg/IssueDenom response type.
message MsgIssueDenomResponse {}

// MsgTransferNFT defines an SDK message for transferring an NFT to recipient.
message MsgTransferNFT {
  option (gogoproto.equal) = true;

  string id = 1;
  string denom_id = 2 [ (gogoproto.moretags) = "yaml:\"denom_id\"" ];
  string name = 3;
  string uri = 4 [ (gogoproto.customname) = "URI" ];
  string data = 5;
  string sender = 6;
  string recipient = 7;
  string uri_hash = 8;
}

// MsgTransferNFTResponse defines the Msg/TransferNFT response type.
message MsgTransferNFTResponse {}

// MsgEditNFT defines an SDK message for editing a nft.
message MsgEditNFT {
  option (gogoproto.equal) = true;

  string id = 1;
  string denom_id = 2 [ (gogoproto.moretags) = "yaml:\"denom_id\"" ];
  string name = 3;
  string uri = 4 [ (gogoproto.customname) = "URI" ];
  string data = 5;
  string sender = 6;
  string uri_hash = 7;
}

// MsgEditNFTResponse defines the Msg/EditNFT response type.
message MsgEditNFTResponse {}

// MsgMintNFT defines an SDK message for creating a new NFT.
message MsgMintNFT {
  option (gogoproto.equal) = true;

  string id = 1;
  string denom_id = 2 [ (gogoproto.moretags) = "yaml:\"denom_id\"" ];
  string name = 3;
  string uri = 4 [ (gogoproto.customname) = "URI" ];
  string data = 5;
  string sender = 6;
  string recipient = 7;
  string uri_hash = 8;
}

// MsgMintNFTResponse defines the Msg/MintNFT response type.
message MsgMintNFTResponse {}

// MsgBurnNFT defines an SDK message for burning a NFT.
message MsgBurnNFT {
  option (gogoproto.equal) = true;

  string id = 1;
  string denom_id = 2 [ (gogoproto.moretags) = "yaml:\"denom_id\"" ];
  string sender = 3;
}

// MsgBurnNFTResponse defines the Msg/BurnNFT response type.
message MsgBurnNFTResponse {}

// MsgTransferDenom defines an SDK message for transferring an denom to
// recipient.
message MsgTransferDenom {
  option (gogoproto.equal) = true;
  string id = 1;
  string sender = 2;
  string recipient = 3;
}

// MsgTransferDenomResponse defines the Msg/TransferDenom response type.
message MsgTransferDenomResponse {}
