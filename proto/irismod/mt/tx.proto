syntax = "proto3";
package irismod.mt;

import "gogoproto/gogo.proto";

option go_package = "mods.irisnet.org/mt/types";
option (gogoproto.goproto_getters_all) = false;

// Msg defines the mt Msg service.
service Msg {
  // IssueDenom defines a method for issuing a denom.
  rpc IssueDenom(MsgIssueDenom) returns (MsgIssueDenomResponse);

  // TransferDenom defines a method for transferring a denom.
  rpc TransferDenom(MsgTransferDenom) returns (MsgTransferDenomResponse);

  // MintMT defines a method for creating a new MT or minting amounts of an
  // existing MT
  rpc MintMT(MsgMintMT) returns (MsgMintMTResponse);

  // EditMT defines a method for editing an MT.
  rpc EditMT(MsgEditMT) returns (MsgEditMTResponse);

  // TransferMT defines a method for transferring an MT.
  rpc TransferMT(MsgTransferMT) returns (MsgTransferMTResponse);

  // BurnMT defines a method for burning an MT.
  rpc BurnMT(MsgBurnMT) returns (MsgBurnMTResponse);
}

// MsgIssueDenom defines an SDK message for creating a new denom.
message MsgIssueDenom {
  option (gogoproto.equal) = true;

  string name = 1;
  bytes data = 2;
  string sender = 3;
}

// MsgIssueDenomResponse defines the Msg/IssueDenom response type.
message MsgIssueDenomResponse {}

// MsgTransferDenom defines an SDK message for transferring an denom to
// recipient.
message MsgTransferDenom {
  option (gogoproto.equal) = true;
  string id = 1;
  string sender = 2;
  string recipient = 3;
}

// MsgTransferDenomResponse defines the Msg/TransferDenom response type.
message MsgTransferDenomResponse {}

// MsgMintMT defines an SDK message for creating a new MT.
message MsgMintMT {
  option (gogoproto.equal) = true;

  string id = 1;
  string denom_id = 2;
  uint64 amount = 3;
  bytes data = 4;
  string sender = 5;
  string recipient = 6;
}

// MsgMintMTResponse defines the Msg/MintMT response type.
message MsgMintMTResponse {}

// MsgEditMT defines an SDK message for editing an MT.
message MsgEditMT {
  option (gogoproto.equal) = true;

  string id = 1;
  string denom_id = 2;
  bytes data = 3;
  string sender = 4;
}

// MsgEditMTResponse defines the Msg/EditMT response type.
message MsgEditMTResponse {}

// MsgTransferMT defines an SDK message for transferring an MT to recipient.
message MsgTransferMT {
  option (gogoproto.equal) = true;

  string id = 1;
  string denom_id = 2;
  uint64 amount = 3;
  string sender = 4;
  string recipient = 5;
}

// MsgTransferMTResponse defines the Msg/TransferMT response type.
message MsgTransferMTResponse {}

// MsgBurnMT defines an SDK message for burning an MT.
message MsgBurnMT {
  option (gogoproto.equal) = true;

  string id = 1;
  string denom_id = 2;
  uint64 amount = 3;
  string sender = 4;
}

// MsgBurnMTResponse defines the Msg/BurnMT response type.
message MsgBurnMTResponse {}