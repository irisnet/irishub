syntax = "proto3";
package irismod.coinswap;

import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/query/v1/query.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "irismod/coinswap/coinswap.proto";

option go_package = "mods.irisnet.org/coinswap/types";

// Query creates service with coinswap as rpc
service Query {
  // LiquidityPool returns the liquidity pool for the provided lpt_denom
  rpc LiquidityPool(QueryLiquidityPoolRequest)
      returns (QueryLiquidityPoolResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/irismod/coinswap/pools/{lpt_denom}";
  }

  // LiquidityPools returns all the liquidity pools available
  rpc LiquidityPools(QueryLiquidityPoolsRequest)
      returns (QueryLiquidityPoolsResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/irismod/coinswap/pools";
  }

  // Params queries the parameters of x/coinswap module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/irismod/coinswap/params";
  }
}

// QueryLiquidityPoolRequest is request type for the Query/LiquidityPool RPC
// method
message QueryLiquidityPoolRequest { string lpt_denom = 1; }

// QueryLiquidityPoolResponse is response type for the Query/LiquidityPool RPC
// method
message QueryLiquidityPoolResponse {
  PoolInfo pool = 1 [ (gogoproto.nullable) = false ];
}

// QueryLiquidityPoolsRequest is request type for the Query/LiquidityPools RPC
// method
message QueryLiquidityPoolsRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryLiquidityPoolsResponse is response type for the Query/LiquidityPools RPC
// method
message QueryLiquidityPoolsResponse {
  repeated PoolInfo pools = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryParamsRequest defines the request type for querying x/coinswap
// parameters.
message QueryParamsRequest {}

// QueryParamsResponse defines the response type for querying x/coinswap
// parameters.
message QueryParamsResponse {
  Params params = 1 [ (gogoproto.nullable) = false ];
}

// PoolInfo defines the properties the liquidity pool
message PoolInfo {
  string id = 1;
  // escrow account for deposit tokens
  string escrow_address = 2;
  // main token balance
  cosmos.base.v1beta1.Coin standard = 3 [ (gogoproto.nullable) = false ];
  // counterparty token balance
  cosmos.base.v1beta1.Coin token = 4 [ (gogoproto.nullable) = false ];
  // liquidity token balance
  cosmos.base.v1beta1.Coin lpt = 5 [ (gogoproto.nullable) = false ];
  // liquidity pool fee
  string fee = 6;
}